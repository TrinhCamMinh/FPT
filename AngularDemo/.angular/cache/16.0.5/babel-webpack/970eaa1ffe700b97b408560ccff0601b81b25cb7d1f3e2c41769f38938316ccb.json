{"ast":null,"code":"import _asyncToGenerator from \"D:/Workspace/FPT/AngularDemo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { environment } from 'src/environments/environment.development';\nimport { Component } from '@angular/core';\nimport { Loader } from '@googlemaps/js-api-loader';\nlet map;\nconst VietNamCor = {\n  lat: 15.9031,\n  lng: 105.8067\n};\nconst Ganivo = [{\n  name: 'HCMU00020.001/G',\n  type: 'G',\n  XCor: 10.789538365455055,\n  YCor: 106.63355331689347\n}, {\n  name: 'HCMU00020.002/G',\n  type: 'G',\n  XCor: 10.790382019066472,\n  YCor: 106.63369793039553\n}];\nconst TilePipe = [{\n  name: 'HCMU00001.001/O',\n  type: 'O',\n  XCor: 10.835144728045616,\n  YCor: 106.66329563558202\n}, {\n  name: 'HCMU00001.002/O',\n  type: 'O',\n  XCor: 10.835263001921522,\n  YCor: 106.66372920705183\n}];\nconst Tank = [{\n  name: 'HCMU00001.002/B',\n  type: 'B',\n  XCor: 10.835000478970937,\n  YCor: 106.66365127116387\n}, {\n  name: 'HCMU00001.003/B',\n  type: 'B',\n  XCor: 10.835297724069841,\n  YCor: 106.66463990032798\n}];\nlet loader = new Loader({\n  apiKey: environment.apiKey,\n  version: 'weekly'\n});\nlet currentInfoWindow = null;\nlet isOpenDetectWater = false;\nconst circles = [];\nconst markers = [];\nconst rectangles = [];\nconst ganivos = [];\nconst tanks = [];\nconst TilePines = [];\nlet AppComponent = class AppComponent {\n  constructor(http) {\n    this.http = http;\n    this.successMarkers = [];\n    this.coordinate = [{\n      lat: Number,\n      lng: Number\n    }];\n    this.readFile = () => {\n      this.http.get('assets/Book1.csv', {\n        responseType: 'text'\n      }).subscribe(data => {\n        this.result = data.split('\\n');\n        this.result.map((item, index) => {\n          this.coordinate.push({\n            lat: item.split(',')[0],\n            lng: item.split(',')[1]\n          });\n          const marker = new google.maps.Marker({\n            position: {\n              lat: Number(item.split(',')[0]),\n              lng: Number(item.split(',')[1])\n            },\n            map,\n            title: `Item index ${index}`\n          });\n          return marker;\n        });\n      }, error => console.log(error.error));\n    };\n    this.handleWaterCheckBox = event => {\n      if (event.target.checked) {\n        isOpenDetectWater = true;\n      } else {\n        isOpenDetectWater = false;\n      }\n    };\n    this.handleDrawHandClick = () => {\n      this.drawingManager.setDrawingMode(null);\n    };\n    this.handleDrawMarkerClick = () => {\n      function detectWater(_x, _x2) {\n        return _detectWater.apply(this, arguments);\n      }\n      function _detectWater() {\n        _detectWater = _asyncToGenerator(function* (lat, lng) {\n          try {\n            const url = `https://isitwater-com.p.rapidapi.com/?latitude=${lat}&longitude=${lng}`;\n            const options = {\n              method: 'GET',\n              headers: {\n                'X-RapidAPI-Key': '911f81d9e3msh5f705b8931d758cp13855bjsn19b3ba12960e',\n                'X-RapidAPI-Host': 'isitwater-com.p.rapidapi.com'\n              }\n            };\n            const response = yield fetch(url, options);\n            const result = yield response.json();\n            if (result.water) {\n              return true;\n            }\n            return false;\n          } catch (error) {\n            console.error(error);\n            return undefined;\n          }\n        });\n        return _detectWater.apply(this, arguments);\n      }\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.MARKER);\n      google.maps.event.addListener(this.drawingManager, 'markercomplete', /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (marker) {\n          marker.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');\n          const lat = marker.getPosition()?.lat();\n          const lng = marker.getPosition()?.lng();\n          //Toggle check water functionality\n          if (isOpenDetectWater) {\n            const isWater = yield detectWater(lat, lng);\n            if (isWater) {\n              alert('You are placing marker on water');\n              return marker.setMap(null);\n            }\n          }\n          markers.push(marker);\n          if (circles.length > 0) {\n            circles.forEach(item => {\n              const circleCenter = item.getCenter();\n              const circleRadius = item.getRadius();\n              const markerPosition = marker.getPosition();\n              if (markerPosition && circleCenter) {\n                if (google.maps.geometry.spherical.computeDistanceBetween(circleCenter, markerPosition) <= circleRadius) {\n                  marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');\n                } else {\n                  marker.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');\n                }\n              }\n            });\n          }\n          if (rectangles.length > 0) {\n            const markerPosition = marker.getPosition();\n            rectangles.forEach(item => {\n              const rectangleBound = item.getBounds();\n              if (markerPosition && rectangleBound?.contains(markerPosition)) {\n                marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');\n              } else {\n                marker.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');\n              }\n            });\n          }\n          marker.addListener('rightclick', () => {\n            if (currentInfoWindow) {\n              currentInfoWindow.close();\n            }\n            const infowindow = new google.maps.InfoWindow({\n              content: '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' + '<div><input type=\"checkbox\" id=\"remove\">Remove</div>'\n            });\n            infowindow.open(map, marker);\n            currentInfoWindow = infowindow;\n            infowindow.addListener('domready', () => {\n              const editCheckbox = document.getElementById('edit');\n              const removeCheckbox = document.getElementById('remove');\n              if (marker.getDraggable()) {\n                editCheckbox?.setAttribute('checked', 'true');\n              } else {\n                editCheckbox?.removeAttribute('checked');\n              }\n              editCheckbox?.addEventListener('change', () => {\n                if (marker.getDraggable()) {\n                  editCheckbox?.removeAttribute('checked');\n                  marker.setDraggable(null);\n                } else {\n                  editCheckbox.setAttribute('checked', 'true');\n                  marker.setDraggable(true);\n                }\n              });\n              removeCheckbox?.addEventListener('change', () => {\n                marker.setMap(null);\n              });\n            });\n          });\n          marker.addListener('dragend', /*#__PURE__*/_asyncToGenerator(function* () {\n            const lat = marker.getPosition()?.lat();\n            const lng = marker.getPosition()?.lng();\n            const markerPosition = marker.getPosition();\n            if (isOpenDetectWater) {\n              const isWater = yield detectWater(lat, lng);\n              if (isWater) {\n                alert('You are placing marker on water');\n                return marker.setMap(null);\n              }\n            }\n            circles.forEach(item => {\n              const circleCenter = item.getCenter();\n              const circleRadius = item.getRadius();\n              if (markerPosition && circleCenter) {\n                if (google.maps.geometry.spherical.computeDistanceBetween(circleCenter, markerPosition) <= circleRadius) {\n                  marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');\n                } else {\n                  marker.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');\n                }\n              }\n            });\n            rectangles.forEach(item => {\n              const rectangleBound = item.getBounds();\n              if (markerPosition && rectangleBound?.contains(markerPosition)) {\n                marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');\n              } else {\n                marker.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');\n              }\n            });\n          }));\n        });\n        return function (_x3) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    };\n    this.handleDrawCircleClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.CIRCLE);\n      google.maps.event.addListener(this.drawingManager, 'circlecomplete', function (circle) {\n        circles.push(circle);\n        circle.addListener('bounds_changed', () => {\n          const circleCenter = circle.getCenter();\n          const circleRadius = circle.getRadius();\n          markers.forEach(item => {\n            const markerPosition = item.getPosition();\n            if (markerPosition && circleCenter) {\n              if (google.maps.geometry.spherical.computeDistanceBetween(circleCenter, markerPosition) <= circleRadius) {\n                item.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');\n              } else {\n                item.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');\n              }\n            }\n          });\n        });\n      });\n    };\n    this.handleClearCircleClick = () => {\n      circles.forEach(circle => {\n        circle.setMap(null);\n      });\n      circles.length = 0;\n    };\n    this.handleDrawShapeClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);\n      google.maps.event.addListener(this.drawingManager, 'polygoncomplete', function (polygon) {\n        polygon.addListener('rightclick', function (event) {\n          if (currentInfoWindow) {\n            currentInfoWindow.close();\n          }\n          const infowindow = new google.maps.InfoWindow({\n            content: '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' + '<div><input type=\"checkbox\" id=\"remove\">Remove</div>'\n          });\n          infowindow.setPosition(event.latLng);\n          infowindow.open(map);\n          currentInfoWindow = infowindow;\n          infowindow.addListener('domready', () => {\n            const editCheckbox = document.getElementById('edit');\n            const removeCheckbox = document.getElementById('remove');\n            if (polygon.getDraggable()) {\n              editCheckbox?.setAttribute('checked', 'true');\n            } else {\n              editCheckbox?.removeAttribute('checked');\n            }\n            editCheckbox?.addEventListener('change', () => {\n              if (polygon.getDraggable()) {\n                editCheckbox?.removeAttribute('checked');\n                polygon.setDraggable(null);\n              } else {\n                editCheckbox.setAttribute('checked', 'true');\n                polygon.setDraggable(true);\n              }\n            });\n            removeCheckbox?.addEventListener('change', () => {\n              polygon.setMap(null);\n              infowindow.close();\n            });\n          });\n        });\n      });\n    };\n    this.handleDrawLineClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYLINE);\n      google.maps.event.addListener(this.drawingManager, 'polylinecomplete', function (line) {\n        line.addListener('rightclick', function (event) {\n          if (currentInfoWindow) {\n            currentInfoWindow.close();\n          }\n          const infowindow = new google.maps.InfoWindow({\n            content: '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' + '<div><input type=\"checkbox\" id=\"remove\">Remove</div>'\n          });\n          infowindow.setPosition(event.latLng);\n          infowindow.open(map);\n          currentInfoWindow = infowindow;\n          infowindow.addListener('domready', () => {\n            const editCheckbox = document.getElementById('edit');\n            const removeCheckbox = document.getElementById('remove');\n            if (line.getDraggable()) {\n              editCheckbox?.setAttribute('checked', 'true');\n            } else {\n              editCheckbox?.removeAttribute('checked');\n            }\n            editCheckbox?.addEventListener('change', () => {\n              if (line.getDraggable()) {\n                editCheckbox?.removeAttribute('checked');\n                line.setDraggable(null);\n              } else {\n                editCheckbox.setAttribute('checked', 'true');\n                line.setDraggable(true);\n              }\n            });\n            removeCheckbox?.addEventListener('change', () => {\n              line.setMap(null);\n              infowindow.close();\n            });\n          });\n        });\n      });\n    };\n    this.handleDrawRectangleClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.RECTANGLE);\n      google.maps.event.addListener(this.drawingManager, 'rectanglecomplete', function (rectangle) {\n        rectangles.push(rectangle);\n        rectangle.addListener('rightclick', function (event) {\n          if (currentInfoWindow) {\n            currentInfoWindow.close();\n          }\n          const infowindow = new google.maps.InfoWindow({\n            content: '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' + '<div><input type=\"checkbox\" id=\"remove\">Remove</div>'\n          });\n          infowindow.setPosition(event.latLng);\n          infowindow.open(map);\n          currentInfoWindow = infowindow;\n          infowindow.addListener('domready', () => {\n            const editCheckbox = document.getElementById('edit');\n            const removeCheckbox = document.getElementById('remove');\n            if (rectangle.getDraggable()) {\n              editCheckbox?.setAttribute('checked', 'true');\n            } else {\n              editCheckbox?.removeAttribute('checked');\n            }\n            editCheckbox?.addEventListener('change', () => {\n              if (rectangle.getDraggable()) {\n                editCheckbox?.removeAttribute('checked');\n                rectangle.setDraggable(null);\n              } else {\n                editCheckbox.setAttribute('checked', 'true');\n                rectangle.setDraggable(true);\n              }\n            });\n            removeCheckbox?.addEventListener('change', () => {\n              rectangle.setMap(null);\n              infowindow.close();\n            });\n          });\n        });\n        rectangle.addListener('dragend', () => {\n          const rectangleBound = rectangle.getBounds();\n          markers.forEach(item => {\n            const itemPosition = item.getPosition();\n            if (itemPosition && rectangleBound?.contains(itemPosition)) {\n              item.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');\n            } else {\n              item.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');\n            }\n          });\n        });\n      });\n    };\n    this.handleChangeGanivoIcon = () => {\n      ganivos.forEach(item => {\n        item.setIcon('https://img.icons8.com/external-others-pike-picture/50/external-building-church-christianity-others-pike-picture-3.png');\n      });\n    };\n    this.handleChangeTilePineIcon = () => {\n      TilePines.forEach(item => {\n        item.setIcon('https://img.icons8.com/external-others-pike-picture/50/external-building-church-christianity-others-pike-picture-3.png');\n      });\n    };\n    this.handleChangeTankIcon = () => {\n      tanks.forEach(item => {\n        item.setIcon('https://img.icons8.com/external-others-pike-picture/50/external-building-church-christianity-others-pike-picture-3.png');\n      });\n    };\n  }\n  ngOnInit() {\n    this.demo();\n  }\n  demo() {\n    var _this = this;\n    loader.load().then( /*#__PURE__*/_asyncToGenerator(function* () {\n      //* initial map element\n      const {\n        Map\n      } = yield google.maps.importLibrary('maps');\n      map = new Map(document.getElementById('map'), {\n        center: VietNamCor,\n        zoom: 8\n      });\n      Ganivo.forEach((item, index) => {\n        const marker = new google.maps.Marker({\n          position: {\n            lat: item.XCor,\n            lng: item.YCor\n          },\n          icon: 'https://img.icons8.com/ios-filled/50/marker-g.png',\n          map,\n          title: `Item at index ${index}`\n        });\n        ganivos.push(marker);\n      });\n      TilePipe.forEach((item, index) => {\n        const marker = new google.maps.Marker({\n          position: {\n            lat: item.XCor,\n            lng: item.YCor\n          },\n          icon: 'https://img.icons8.com/ios-filled/50/marker-t.png',\n          map,\n          title: `Item at index ${index}`\n        });\n        TilePines.push(marker);\n      });\n      Tank.forEach((item, index) => {\n        const marker = new google.maps.Marker({\n          position: {\n            lat: item.XCor,\n            lng: item.YCor\n          },\n          icon: 'https://img.icons8.com/ios/50/box--v1.png',\n          map,\n          title: `Item at index ${index}`\n        });\n        tanks.push(marker);\n      });\n      _this.drawingManager = new google.maps.drawing.DrawingManager({\n        drawingMode: null,\n        drawingControl: false,\n        circleOptions: {\n          fillColor: '#ffff00',\n          fillOpacity: 1,\n          strokeWeight: 5,\n          clickable: false,\n          editable: true,\n          zIndex: 1\n        }\n      });\n      _this.drawingManager.setMap(map);\n    }));\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"names":["environment","Component","Loader","map","VietNamCor","lat","lng","Ganivo","name","type","XCor","YCor","TilePipe","Tank","loader","apiKey","version","currentInfoWindow","isOpenDetectWater","circles","markers","rectangles","ganivos","tanks","TilePines","AppComponent","constructor","http","successMarkers","coordinate","Number","readFile","get","responseType","subscribe","data","result","split","item","index","push","marker","google","maps","Marker","position","title","error","console","log","handleWaterCheckBox","event","target","checked","handleDrawHandClick","drawingManager","setDrawingMode","handleDrawMarkerClick","detectWater","_x","_x2","_detectWater","apply","arguments","_asyncToGenerator","url","options","method","headers","response","fetch","json","water","undefined","drawing","OverlayType","MARKER","addListener","_ref","setIcon","getPosition","isWater","alert","setMap","length","forEach","circleCenter","getCenter","circleRadius","getRadius","markerPosition","geometry","spherical","computeDistanceBetween","rectangleBound","getBounds","contains","close","infowindow","InfoWindow","content","open","editCheckbox","document","getElementById","removeCheckbox","getDraggable","setAttribute","removeAttribute","addEventListener","setDraggable","_x3","handleDrawCircleClick","CIRCLE","circle","handleClearCircleClick","handleDrawShapeClick","POLYGON","polygon","setPosition","latLng","handleDrawLineClick","POLYLINE","line","handleDrawRectangleClick","RECTANGLE","rectangle","itemPosition","handleChangeGanivoIcon","handleChangeTilePineIcon","handleChangeTankIcon","ngOnInit","demo","_this","load","then","Map","importLibrary","center","zoom","icon","DrawingManager","drawingMode","drawingControl","circleOptions","fillColor","fillOpacity","strokeWeight","clickable","editable","zIndex","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Workspace\\FPT\\AngularDemo\\src\\app\\app.component.ts"],"sourcesContent":["import { environment } from 'src/environments/environment.development';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Loader } from '@googlemaps/js-api-loader';\r\nimport * as _ from 'lodash';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nlet map: google.maps.Map;\r\nconst VietNamCor = { lat: 15.9031, lng: 105.8067 };\r\n\r\nconst Ganivo = [\r\n    {\r\n        name: 'HCMU00020.001/G',\r\n        type: 'G',\r\n        XCor: 10.789538365455055,\r\n        YCor: 106.63355331689347,\r\n    },\r\n    {\r\n        name: 'HCMU00020.002/G',\r\n        type: 'G',\r\n        XCor: 10.790382019066472,\r\n        YCor: 106.63369793039553,\r\n    },\r\n];\r\n\r\nconst TilePipe = [\r\n    {\r\n        name: 'HCMU00001.001/O',\r\n        type: 'O',\r\n        XCor: 10.835144728045616,\r\n        YCor: 106.66329563558202,\r\n    },\r\n    {\r\n        name: 'HCMU00001.002/O',\r\n        type: 'O',\r\n        XCor: 10.835263001921522,\r\n        YCor: 106.66372920705183,\r\n    },\r\n];\r\n\r\nconst Tank = [\r\n    {\r\n        name: 'HCMU00001.002/B',\r\n        type: 'B',\r\n        XCor: 10.835000478970937,\r\n        YCor: 106.66365127116387,\r\n    },\r\n    {\r\n        name: 'HCMU00001.003/B',\r\n        type: 'B',\r\n        XCor: 10.835297724069841,\r\n        YCor: 106.66463990032798,\r\n    },\r\n];\r\n\r\nlet loader = new Loader({\r\n    apiKey: environment.apiKey,\r\n    version: 'weekly',\r\n});\r\n\r\nlet currentInfoWindow: any = null;\r\nlet isOpenDetectWater: Boolean = false;\r\nconst circles: Array<any> = [];\r\nconst markers: Array<any> = [];\r\nconst rectangles: Array<any> = [];\r\nconst ganivos: Array<any> = [];\r\nconst tanks: Array<any> = [];\r\nconst TilePines: Array<any> = [];\r\n@Component({\r\n    selector: 'app-root',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.css'],\r\n})\r\nexport class AppComponent implements OnInit {\r\n    constructor(private http: HttpClient) {}\r\n\r\n    result: any;\r\n    successMarkers: Array<Object> = [];\r\n    coordinate: Array<Object> = [\r\n        {\r\n            lat: Number,\r\n            lng: Number,\r\n        },\r\n    ];\r\n    drawingManager: any;\r\n\r\n    ngOnInit(): void {\r\n        this.demo();\r\n    }\r\n\r\n    readFile = () => {\r\n        this.http.get('assets/Book1.csv', { responseType: 'text' }).subscribe(\r\n            (data: any) => {\r\n                this.result = data.split('\\n');\r\n\r\n                this.result.map((item: any, index: number) => {\r\n                    this.coordinate.push({\r\n                        lat: item.split(',')[0],\r\n                        lng: item.split(',')[1],\r\n                    });\r\n\r\n                    const marker = new google.maps.Marker({\r\n                        position: {\r\n                            lat: Number(item.split(',')[0]),\r\n                            lng: Number(item.split(',')[1]),\r\n                        },\r\n                        map,\r\n                        title: `Item index ${index}`,\r\n                    });\r\n\r\n                    return marker;\r\n                });\r\n            },\r\n            (error: any) => console.log(error.error)\r\n        );\r\n    };\r\n\r\n    handleWaterCheckBox = (event: any) => {\r\n        if (event.target.checked) {\r\n            isOpenDetectWater = true;\r\n        } else {\r\n            isOpenDetectWater = false;\r\n        }\r\n    };\r\n\r\n    demo() {\r\n        loader.load().then(async () => {\r\n            //* initial map element\r\n            const { Map } = (await google.maps.importLibrary(\r\n                'maps'\r\n            )) as google.maps.MapsLibrary;\r\n            map = new Map(document.getElementById('map') as HTMLElement, {\r\n                center: VietNamCor,\r\n                zoom: 8,\r\n            });\r\n\r\n            Ganivo.forEach((item, index) => {\r\n                const marker = new google.maps.Marker({\r\n                    position: { lat: item.XCor, lng: item.YCor },\r\n                    icon: 'https://img.icons8.com/ios-filled/50/marker-g.png',\r\n                    map,\r\n                    title: `Item at index ${index}`,\r\n                });\r\n\r\n                ganivos.push(marker);\r\n            });\r\n\r\n            TilePipe.forEach((item, index) => {\r\n                const marker = new google.maps.Marker({\r\n                    position: { lat: item.XCor, lng: item.YCor },\r\n                    icon: 'https://img.icons8.com/ios-filled/50/marker-t.png',\r\n                    map,\r\n                    title: `Item at index ${index}`,\r\n                });\r\n\r\n                TilePines.push(marker);\r\n            });\r\n\r\n            Tank.forEach((item, index) => {\r\n                const marker = new google.maps.Marker({\r\n                    position: { lat: item.XCor, lng: item.YCor },\r\n                    icon: 'https://img.icons8.com/ios/50/box--v1.png',\r\n                    map,\r\n                    title: `Item at index ${index}`,\r\n                });\r\n\r\n                tanks.push(marker);\r\n            });\r\n\r\n            this.drawingManager = new google.maps.drawing.DrawingManager({\r\n                drawingMode: null,\r\n                drawingControl: false,\r\n                circleOptions: {\r\n                    fillColor: '#ffff00',\r\n                    fillOpacity: 1,\r\n                    strokeWeight: 5,\r\n                    clickable: false,\r\n                    editable: true,\r\n                    zIndex: 1,\r\n                },\r\n            });\r\n            this.drawingManager.setMap(map);\r\n        });\r\n    }\r\n\r\n    handleDrawHandClick = () => {\r\n        this.drawingManager.setDrawingMode(null);\r\n    };\r\n\r\n    handleDrawMarkerClick = () => {\r\n        async function detectWater(lat?: number, lng?: number) {\r\n            try {\r\n                const url = `https://isitwater-com.p.rapidapi.com/?latitude=${lat}&longitude=${lng}`;\r\n                const options = {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'X-RapidAPI-Key':\r\n                            '911f81d9e3msh5f705b8931d758cp13855bjsn19b3ba12960e',\r\n                        'X-RapidAPI-Host': 'isitwater-com.p.rapidapi.com',\r\n                    },\r\n                };\r\n                const response = await fetch(url, options);\r\n                const result = await response.json();\r\n                if (result.water) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            } catch (error) {\r\n                console.error(error);\r\n                return undefined;\r\n            }\r\n        }\r\n\r\n        this.drawingManager.setDrawingMode(\r\n            google.maps.drawing.OverlayType.MARKER\r\n        );\r\n\r\n        google.maps.event.addListener(\r\n            this.drawingManager,\r\n            'markercomplete',\r\n            async function (marker: any) {\r\n                marker.setIcon(\r\n                    'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\r\n                );\r\n\r\n                const lat = marker.getPosition()?.lat();\r\n                const lng = marker.getPosition()?.lng();\r\n\r\n                //Toggle check water functionality\r\n                if (isOpenDetectWater) {\r\n                    const isWater = await detectWater(lat, lng);\r\n\r\n                    if (isWater) {\r\n                        alert('You are placing marker on water');\r\n                        return marker.setMap(null);\r\n                    }\r\n                }\r\n\r\n                markers.push(marker);\r\n\r\n                if (circles.length > 0) {\r\n                    circles.forEach((item) => {\r\n                        const circleCenter = item.getCenter();\r\n                        const circleRadius = item.getRadius();\r\n                        const markerPosition = marker.getPosition();\r\n\r\n                        if (markerPosition && circleCenter) {\r\n                            if (\r\n                                google.maps.geometry.spherical.computeDistanceBetween(\r\n                                    circleCenter,\r\n                                    markerPosition\r\n                                ) <= circleRadius\r\n                            ) {\r\n                                marker.setIcon(\r\n                                    'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\r\n                                );\r\n                            } else {\r\n                                marker.setIcon(\r\n                                    'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\r\n                                );\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n\r\n                if (rectangles.length > 0) {\r\n                    const markerPosition = marker.getPosition();\r\n                    rectangles.forEach((item) => {\r\n                        const rectangleBound = item.getBounds();\r\n                        if (\r\n                            markerPosition &&\r\n                            rectangleBound?.contains(markerPosition)\r\n                        ) {\r\n                            marker.setIcon(\r\n                                'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\r\n                            );\r\n                        } else {\r\n                            marker.setIcon(\r\n                                'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\r\n                            );\r\n                        }\r\n                    });\r\n                }\r\n\r\n                marker.addListener('rightclick', () => {\r\n                    if (currentInfoWindow) {\r\n                        currentInfoWindow.close();\r\n                    }\r\n                    const infowindow = new google.maps.InfoWindow({\r\n                        content:\r\n                            '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' +\r\n                            '<div><input type=\"checkbox\" id=\"remove\">Remove</div>',\r\n                    });\r\n\r\n                    infowindow.open(map, marker);\r\n                    currentInfoWindow = infowindow;\r\n\r\n                    infowindow.addListener('domready', () => {\r\n                        const editCheckbox = document.getElementById('edit');\r\n                        const removeCheckbox =\r\n                            document.getElementById('remove');\r\n\r\n                        if (marker.getDraggable()) {\r\n                            editCheckbox?.setAttribute('checked', 'true');\r\n                        } else {\r\n                            editCheckbox?.removeAttribute('checked');\r\n                        }\r\n\r\n                        editCheckbox?.addEventListener('change', () => {\r\n                            if (marker.getDraggable()) {\r\n                                editCheckbox?.removeAttribute('checked');\r\n                                marker.setDraggable(null);\r\n                            } else {\r\n                                editCheckbox.setAttribute('checked', 'true');\r\n                                marker.setDraggable(true);\r\n                            }\r\n                        });\r\n\r\n                        removeCheckbox?.addEventListener('change', () => {\r\n                            marker.setMap(null);\r\n                        });\r\n                    });\r\n                });\r\n\r\n                marker.addListener('dragend', async () => {\r\n                    const lat = marker.getPosition()?.lat();\r\n                    const lng = marker.getPosition()?.lng();\r\n                    const markerPosition = marker.getPosition();\r\n\r\n                    if (isOpenDetectWater) {\r\n                        const isWater = await detectWater(lat, lng);\r\n                        if (isWater) {\r\n                            alert('You are placing marker on water');\r\n                            return marker.setMap(null);\r\n                        }\r\n                    }\r\n\r\n                    circles.forEach((item) => {\r\n                        const circleCenter = item.getCenter();\r\n                        const circleRadius = item.getRadius();\r\n\r\n                        if (markerPosition && circleCenter) {\r\n                            if (\r\n                                google.maps.geometry.spherical.computeDistanceBetween(\r\n                                    circleCenter,\r\n                                    markerPosition\r\n                                ) <= circleRadius\r\n                            ) {\r\n                                marker.setIcon(\r\n                                    'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\r\n                                );\r\n                            } else {\r\n                                marker.setIcon(\r\n                                    'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\r\n                                );\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    rectangles.forEach((item) => {\r\n                        const rectangleBound = item.getBounds();\r\n                        if (\r\n                            markerPosition &&\r\n                            rectangleBound?.contains(markerPosition)\r\n                        ) {\r\n                            marker.setIcon(\r\n                                'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\r\n                            );\r\n                        } else {\r\n                            marker.setIcon(\r\n                                'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\r\n                            );\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        );\r\n    };\r\n\r\n    handleDrawCircleClick = () => {\r\n        this.drawingManager.setDrawingMode(\r\n            google.maps.drawing.OverlayType.CIRCLE\r\n        );\r\n\r\n        google.maps.event.addListener(\r\n            this.drawingManager,\r\n            'circlecomplete',\r\n            function (circle: any) {\r\n                circles.push(circle);\r\n\r\n                circle.addListener('bounds_changed', () => {\r\n                    const circleCenter = circle.getCenter();\r\n                    const circleRadius = circle.getRadius();\r\n\r\n                    markers.forEach((item) => {\r\n                        const markerPosition = item.getPosition();\r\n\r\n                        if (markerPosition && circleCenter) {\r\n                            if (\r\n                                google.maps.geometry.spherical.computeDistanceBetween(\r\n                                    circleCenter,\r\n                                    markerPosition\r\n                                ) <= circleRadius\r\n                            ) {\r\n                                item.setIcon(\r\n                                    'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\r\n                                );\r\n                            } else {\r\n                                item.setIcon(\r\n                                    'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\r\n                                );\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        );\r\n    };\r\n\r\n    handleClearCircleClick = () => {\r\n        circles.forEach((circle) => {\r\n            circle.setMap(null);\r\n        });\r\n\r\n        circles.length = 0;\r\n    };\r\n\r\n    handleDrawShapeClick = () => {\r\n        this.drawingManager.setDrawingMode(\r\n            google.maps.drawing.OverlayType.POLYGON\r\n        );\r\n\r\n        google.maps.event.addListener(\r\n            this.drawingManager,\r\n            'polygoncomplete',\r\n            function (polygon: any) {\r\n                polygon.addListener('rightclick', function (event: any) {\r\n                    if (currentInfoWindow) {\r\n                        currentInfoWindow.close();\r\n                    }\r\n                    const infowindow = new google.maps.InfoWindow({\r\n                        content:\r\n                            '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' +\r\n                            '<div><input type=\"checkbox\" id=\"remove\">Remove</div>',\r\n                    });\r\n\r\n                    infowindow.setPosition(event.latLng);\r\n                    infowindow.open(map);\r\n                    currentInfoWindow = infowindow;\r\n\r\n                    infowindow.addListener('domready', () => {\r\n                        const editCheckbox = document.getElementById('edit');\r\n                        const removeCheckbox =\r\n                            document.getElementById('remove');\r\n\r\n                        if (polygon.getDraggable()) {\r\n                            editCheckbox?.setAttribute('checked', 'true');\r\n                        } else {\r\n                            editCheckbox?.removeAttribute('checked');\r\n                        }\r\n\r\n                        editCheckbox?.addEventListener('change', () => {\r\n                            if (polygon.getDraggable()) {\r\n                                editCheckbox?.removeAttribute('checked');\r\n                                polygon.setDraggable(null);\r\n                            } else {\r\n                                editCheckbox.setAttribute('checked', 'true');\r\n                                polygon.setDraggable(true);\r\n                            }\r\n                        });\r\n\r\n                        removeCheckbox?.addEventListener('change', () => {\r\n                            polygon.setMap(null);\r\n                            infowindow.close();\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n        );\r\n    };\r\n    handleDrawLineClick = () => {\r\n        this.drawingManager.setDrawingMode(\r\n            google.maps.drawing.OverlayType.POLYLINE\r\n        );\r\n\r\n        google.maps.event.addListener(\r\n            this.drawingManager,\r\n            'polylinecomplete',\r\n            function (line: any) {\r\n                line.addListener('rightclick', function (event: any) {\r\n                    if (currentInfoWindow) {\r\n                        currentInfoWindow.close();\r\n                    }\r\n                    const infowindow = new google.maps.InfoWindow({\r\n                        content:\r\n                            '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' +\r\n                            '<div><input type=\"checkbox\" id=\"remove\">Remove</div>',\r\n                    });\r\n\r\n                    infowindow.setPosition(event.latLng);\r\n                    infowindow.open(map);\r\n                    currentInfoWindow = infowindow;\r\n\r\n                    infowindow.addListener('domready', () => {\r\n                        const editCheckbox = document.getElementById('edit');\r\n                        const removeCheckbox =\r\n                            document.getElementById('remove');\r\n\r\n                        if (line.getDraggable()) {\r\n                            editCheckbox?.setAttribute('checked', 'true');\r\n                        } else {\r\n                            editCheckbox?.removeAttribute('checked');\r\n                        }\r\n\r\n                        editCheckbox?.addEventListener('change', () => {\r\n                            if (line.getDraggable()) {\r\n                                editCheckbox?.removeAttribute('checked');\r\n                                line.setDraggable(null);\r\n                            } else {\r\n                                editCheckbox.setAttribute('checked', 'true');\r\n                                line.setDraggable(true);\r\n                            }\r\n                        });\r\n\r\n                        removeCheckbox?.addEventListener('change', () => {\r\n                            line.setMap(null);\r\n                            infowindow.close();\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n        );\r\n    };\r\n\r\n    handleDrawRectangleClick = () => {\r\n        this.drawingManager.setDrawingMode(\r\n            google.maps.drawing.OverlayType.RECTANGLE\r\n        );\r\n\r\n        google.maps.event.addListener(\r\n            this.drawingManager,\r\n            'rectanglecomplete',\r\n            function (rectangle: any) {\r\n                rectangles.push(rectangle);\r\n\r\n                rectangle.addListener('rightclick', function (event: any) {\r\n                    if (currentInfoWindow) {\r\n                        currentInfoWindow.close();\r\n                    }\r\n                    const infowindow = new google.maps.InfoWindow({\r\n                        content:\r\n                            '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' +\r\n                            '<div><input type=\"checkbox\" id=\"remove\">Remove</div>',\r\n                    });\r\n\r\n                    infowindow.setPosition(event.latLng);\r\n                    infowindow.open(map);\r\n                    currentInfoWindow = infowindow;\r\n\r\n                    infowindow.addListener('domready', () => {\r\n                        const editCheckbox = document.getElementById('edit');\r\n                        const removeCheckbox =\r\n                            document.getElementById('remove');\r\n\r\n                        if (rectangle.getDraggable()) {\r\n                            editCheckbox?.setAttribute('checked', 'true');\r\n                        } else {\r\n                            editCheckbox?.removeAttribute('checked');\r\n                        }\r\n\r\n                        editCheckbox?.addEventListener('change', () => {\r\n                            if (rectangle.getDraggable()) {\r\n                                editCheckbox?.removeAttribute('checked');\r\n                                rectangle.setDraggable(null);\r\n                            } else {\r\n                                editCheckbox.setAttribute('checked', 'true');\r\n                                rectangle.setDraggable(true);\r\n                            }\r\n                        });\r\n\r\n                        removeCheckbox?.addEventListener('change', () => {\r\n                            rectangle.setMap(null);\r\n                            infowindow.close();\r\n                        });\r\n                    });\r\n                });\r\n\r\n                rectangle.addListener('dragend', () => {\r\n                    const rectangleBound = rectangle.getBounds();\r\n                    markers.forEach((item) => {\r\n                        const itemPosition = item.getPosition();\r\n                        if (\r\n                            itemPosition &&\r\n                            rectangleBound?.contains(itemPosition)\r\n                        ) {\r\n                            item.setIcon(\r\n                                'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\r\n                            );\r\n                        } else {\r\n                            item.setIcon(\r\n                                'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\r\n                            );\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        );\r\n    };\r\n\r\n    handleChangeGanivoIcon = () => {\r\n        ganivos.forEach((item) => {\r\n            item.setIcon(\r\n                'https://img.icons8.com/external-others-pike-picture/50/external-building-church-christianity-others-pike-picture-3.png'\r\n            );\r\n        });\r\n    };\r\n\r\n    handleChangeTilePineIcon = () => {\r\n        TilePines.forEach((item) => {\r\n            item.setIcon(\r\n                'https://img.icons8.com/external-others-pike-picture/50/external-building-church-christianity-others-pike-picture-3.png'\r\n            );\r\n        });\r\n    };\r\n\r\n    handleChangeTankIcon = () => {\r\n        tanks.forEach((item) => {\r\n            item.setIcon(\r\n                'https://img.icons8.com/external-others-pike-picture/50/external-building-church-christianity-others-pike-picture-3.png'\r\n            );\r\n        });\r\n    };\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}