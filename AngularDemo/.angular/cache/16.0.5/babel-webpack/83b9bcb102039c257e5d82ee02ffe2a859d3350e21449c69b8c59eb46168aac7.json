{"ast":null,"code":"import _asyncToGenerator from \"/home/Workspace/FPT/AngularDemo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from 'src/environments/environment.development';\nimport { Loader } from '@googlemaps/js-api-loader';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet map;\nconst VietNamCor = {\n  lat: 15.9031,\n  lng: 105.8067\n};\nlet loader = new Loader({\n  apiKey: environment.apiKey,\n  version: 'weekly'\n});\nconst circles = [];\nconst blueMarkers = [];\nconst markers = [];\nlet currentInfoWindow = null;\nclass AppComponent {\n  constructor(http) {\n    this.http = http;\n    this.successMarkers = [];\n    this.coordinate = [{\n      lat: Number,\n      lng: Number\n    }];\n    this.handleDrawHandClick = () => {\n      this.drawingManager.setDrawingMode(null);\n    };\n    this.handleDrawMarkerClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.MARKER);\n      google.maps.event.addListener(this.drawingManager, 'markercomplete', function (marker) {\n        marker.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');\n        markers.push(marker);\n        circles.forEach(item => {\n          const circleCenter = item.getCenter();\n          const circleRadius = item.getRadius();\n          const markerPosition = marker.getPosition();\n          if (markerPosition && circleCenter) {\n            if (google.maps.geometry.spherical.computeDistanceBetween(circleCenter, markerPosition) <= circleRadius) {\n              marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');\n            } else {\n              const lat = marker.getPosition()?.lat();\n              const lng = marker.getPosition()?.lng();\n              const isWater = /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator(function* () {\n                  yield detectWater(lat, lng);\n                });\n                return function isWater() {\n                  return _ref.apply(this, arguments);\n                };\n              }();\n              marker.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');\n            }\n          }\n        });\n        marker.addListener('rightclick', () => {\n          if (currentInfoWindow) {\n            currentInfoWindow.close();\n          }\n          const infowindow = new google.maps.InfoWindow({\n            content: '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' + '<div><input type=\"checkbox\" id=\"remove\">Remove</div>'\n          });\n          infowindow.open(map, marker);\n          currentInfoWindow = infowindow;\n          infowindow.addListener('domready', () => {\n            const editCheckbox = document.getElementById('edit');\n            const removeCheckbox = document.getElementById('remove');\n            if (marker.getDraggable()) {\n              editCheckbox?.setAttribute('checked', 'true');\n            } else {\n              editCheckbox?.removeAttribute('checked');\n            }\n            editCheckbox?.addEventListener('change', () => {\n              if (marker.getDraggable()) {\n                editCheckbox?.removeAttribute('checked');\n                marker.setDraggable(null);\n              } else {\n                editCheckbox.setAttribute('checked', 'true');\n                marker.setDraggable(true);\n              }\n            });\n            removeCheckbox?.addEventListener('change', () => {\n              marker.setMap(null);\n            });\n          });\n        });\n      });\n    };\n    this.handleDrawCircleClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.CIRCLE);\n      google.maps.event.addListener(this.drawingManager, 'circlecomplete', function (circle) {\n        circles.push(circle);\n        circle.addListener('bounds_changed', () => {\n          const circleCenter = circle.getCenter();\n          const circleRadius = circle.getRadius();\n          markers.forEach(item => {\n            const markerPosition = item.getPosition();\n            if (markerPosition && circleCenter) {\n              if (google.maps.geometry.spherical.computeDistanceBetween(circleCenter, markerPosition) <= circleRadius) {\n                item.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');\n              } else {\n                item.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');\n              }\n            }\n          });\n        });\n      });\n    };\n    this.handleClearCircleClick = () => {\n      circles.forEach(circle => {\n        circle.setMap(null);\n      });\n      circles.length = 0;\n    };\n    this.handleDrawShapeClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);\n      google.maps.event.addListener(this.drawingManager, 'polygoncomplete', function (polygon) {\n        polygon.addListener('rightclick', function (event) {\n          if (currentInfoWindow) {\n            currentInfoWindow.close();\n          }\n          const infowindow = new google.maps.InfoWindow({\n            content: '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' + '<div><input type=\"checkbox\" id=\"remove\">Remove</div>'\n          });\n          infowindow.setPosition(event.latLng);\n          infowindow.open(map);\n          currentInfoWindow = infowindow;\n          infowindow.addListener('domready', () => {\n            const editCheckbox = document.getElementById('edit');\n            const removeCheckbox = document.getElementById('remove');\n            if (polygon.getDraggable()) {\n              editCheckbox?.setAttribute('checked', 'true');\n            } else {\n              editCheckbox?.removeAttribute('checked');\n            }\n            editCheckbox?.addEventListener('change', () => {\n              if (polygon.getDraggable()) {\n                editCheckbox?.removeAttribute('checked');\n                polygon.setDraggable(null);\n              } else {\n                editCheckbox.setAttribute('checked', 'true');\n                polygon.setDraggable(true);\n              }\n            });\n            removeCheckbox?.addEventListener('change', () => {\n              polygon.setMap(null);\n              infowindow.close();\n            });\n          });\n        });\n      });\n    };\n    this.handleDrawLineClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYLINE);\n      google.maps.event.addListener(this.drawingManager, 'polylinecomplete', function (line) {\n        line.addListener('rightclick', function (event) {\n          if (currentInfoWindow) {\n            currentInfoWindow.close();\n          }\n          const infowindow = new google.maps.InfoWindow({\n            content: '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' + '<div><input type=\"checkbox\" id=\"remove\">Remove</div>'\n          });\n          infowindow.setPosition(event.latLng);\n          infowindow.open(map);\n          currentInfoWindow = infowindow;\n          infowindow.addListener('domready', () => {\n            const editCheckbox = document.getElementById('edit');\n            const removeCheckbox = document.getElementById('remove');\n            if (line.getDraggable()) {\n              editCheckbox?.setAttribute('checked', 'true');\n            } else {\n              editCheckbox?.removeAttribute('checked');\n            }\n            editCheckbox?.addEventListener('change', () => {\n              if (line.getDraggable()) {\n                editCheckbox?.removeAttribute('checked');\n                line.setDraggable(null);\n              } else {\n                editCheckbox.setAttribute('checked', 'true');\n                line.setDraggable(true);\n              }\n            });\n            removeCheckbox?.addEventListener('change', () => {\n              line.setMap(null);\n              infowindow.close();\n            });\n          });\n        });\n      });\n    };\n    this.handleDrawRectangleClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.RECTANGLE);\n      google.maps.event.addListener(this.drawingManager, 'rectanglecomplete', function (rectangle) {\n        rectangle.addListener('rightclick', function (event) {\n          if (currentInfoWindow) {\n            currentInfoWindow.close();\n          }\n          const infowindow = new google.maps.InfoWindow({\n            content: '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' + '<div><input type=\"checkbox\" id=\"remove\">Remove</div>'\n          });\n          infowindow.setPosition(event.latLng);\n          infowindow.open(map);\n          currentInfoWindow = infowindow;\n          infowindow.addListener('domready', () => {\n            const editCheckbox = document.getElementById('edit');\n            const removeCheckbox = document.getElementById('remove');\n            if (rectangle.getDraggable()) {\n              editCheckbox?.setAttribute('checked', 'true');\n            } else {\n              editCheckbox?.removeAttribute('checked');\n            }\n            editCheckbox?.addEventListener('change', () => {\n              if (rectangle.getDraggable()) {\n                editCheckbox?.removeAttribute('checked');\n                rectangle.setDraggable(null);\n              } else {\n                editCheckbox.setAttribute('checked', 'true');\n                rectangle.setDraggable(true);\n              }\n            });\n            removeCheckbox?.addEventListener('change', () => {\n              rectangle.setMap(null);\n              infowindow.close();\n            });\n          });\n        });\n      });\n    };\n    this.handleShowBlueMarkers = () => {\n      blueMarkers.forEach((item, index) => console.log(`item at index ${index}`));\n    };\n  }\n  ngOnInit() {\n    this.demo();\n  }\n  demo() {\n    var _this = this;\n    const readFile = () => {\n      this.http.get('assets/Book1.csv', {\n        responseType: 'text'\n      }).subscribe(data => {\n        this.result = data.split('\\n');\n        const markers = this.result.map((item, index) => {\n          this.coordinate.push({\n            lat: item.split(',')[0],\n            lng: item.split(',')[1]\n          });\n          const marker = new google.maps.Marker({\n            position: {\n              lat: Number(item.split(',')[0]),\n              lng: Number(item.split(',')[1])\n            },\n            map,\n            title: `Item index ${index}`\n          });\n          return marker;\n        });\n      }, error => console.log(error.error));\n    };\n    loader.load().then( /*#__PURE__*/_asyncToGenerator(function* () {\n      //* initial map element\n      const {\n        Map\n      } = yield google.maps.importLibrary('maps');\n      map = new Map(document.getElementById('map'), {\n        center: VietNamCor,\n        zoom: 8\n      });\n      _this.drawingManager = new google.maps.drawing.DrawingManager({\n        drawingMode: null,\n        drawingControl: false,\n        circleOptions: {\n          fillColor: '#ffff00',\n          fillOpacity: 1,\n          strokeWeight: 5,\n          clickable: false,\n          editable: true,\n          zIndex: 1\n        }\n      });\n      _this.drawingManager.setMap(map);\n    }));\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 24,\n  vars: 0,\n  consts: [[1, \"ms-4\", \"d-flex\", \"gap-3\"], [1, \"d-flex\", \"flex-column\", \"gap-3\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"dropdown\"], [\"type\", \"button\", \"data-bs-toggle\", \"dropdown\", \"aria-expanded\", \"false\", 1, \"btn\", \"btn-secondary\", \"dropdown-toggle\"], [1, \"dropdown-menu\"], [1, \"dropdown-item\", 3, \"click\"], [\"id\", \"map\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_2_listener() {\n        return ctx.handleDrawMarkerClick();\n      });\n      i0.ɵɵtext(3, \"Markers\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"button\", 4);\n      i0.ɵɵtext(6, \" Shapes \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"ul\", 5)(8, \"li\")(9, \"a\", 6);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_a_click_9_listener() {\n        return ctx.handleDrawHandClick();\n      });\n      i0.ɵɵtext(10, \"Hand\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"li\")(12, \"a\", 6);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_a_click_12_listener() {\n        return ctx.handleDrawCircleClick();\n      });\n      i0.ɵɵtext(13, \"Circle\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(14, \"li\")(15, \"a\", 6);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_a_click_15_listener() {\n        return ctx.handleDrawRectangleClick();\n      });\n      i0.ɵɵtext(16, \"Rectangle\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(17, \"li\")(18, \"a\", 6);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_a_click_18_listener() {\n        return ctx.handleDrawLineClick();\n      });\n      i0.ɵɵtext(19, \"Polyline\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(20, \"li\")(21, \"a\", 6);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_a_click_21_listener() {\n        return ctx.handleDrawShapeClick();\n      });\n      i0.ɵɵtext(22, \"Polygon\");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵelement(23, \"div\", 7);\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"#map[_ngcontent-%COMP%] {\\r\\n    height: 100dvh;\\r\\n    width: 100%;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxjQUFjO0lBQ2QsV0FBVztBQUNmIiwic291cmNlc0NvbnRlbnQiOlsiI21hcCB7XHJcbiAgICBoZWlnaHQ6IDEwMGR2aDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { AppComponent };","map":{"version":3,"names":["environment","Loader","map","VietNamCor","lat","lng","loader","apiKey","version","circles","blueMarkers","markers","currentInfoWindow","AppComponent","constructor","http","successMarkers","coordinate","Number","handleDrawHandClick","drawingManager","setDrawingMode","handleDrawMarkerClick","google","maps","drawing","OverlayType","MARKER","event","addListener","marker","setIcon","push","forEach","item","circleCenter","getCenter","circleRadius","getRadius","markerPosition","getPosition","geometry","spherical","computeDistanceBetween","isWater","_ref","_asyncToGenerator","detectWater","apply","arguments","close","infowindow","InfoWindow","content","open","editCheckbox","document","getElementById","removeCheckbox","getDraggable","setAttribute","removeAttribute","addEventListener","setDraggable","setMap","handleDrawCircleClick","CIRCLE","circle","handleClearCircleClick","length","handleDrawShapeClick","POLYGON","polygon","setPosition","latLng","handleDrawLineClick","POLYLINE","line","handleDrawRectangleClick","RECTANGLE","rectangle","handleShowBlueMarkers","index","console","log","ngOnInit","demo","_this","readFile","get","responseType","subscribe","data","result","split","Marker","position","title","error","load","then","Map","importLibrary","center","zoom","DrawingManager","drawingMode","drawingControl","circleOptions","fillColor","fillOpacity","strokeWeight","clickable","editable","zIndex","i0","ɵɵdirectiveInject","i1","HttpClient","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","AppComponent_Template_button_click_2_listener","ɵɵtext","ɵɵelementEnd","AppComponent_Template_a_click_9_listener","AppComponent_Template_a_click_12_listener","AppComponent_Template_a_click_15_listener","AppComponent_Template_a_click_18_listener","AppComponent_Template_a_click_21_listener","ɵɵelement"],"sources":["/home/Workspace/FPT/AngularDemo/src/app/app.component.ts","/home/Workspace/FPT/AngularDemo/src/app/app.component.html"],"sourcesContent":["import { environment } from 'src/environments/environment.development';\nimport { Component, OnInit } from '@angular/core';\nimport { Loader } from '@googlemaps/js-api-loader';\nimport * as _ from 'lodash';\nimport { HttpClient } from '@angular/common/http';\n\nlet map: google.maps.Map;\nconst VietNamCor = { lat: 15.9031, lng: 105.8067 };\n\nlet loader = new Loader({\n    apiKey: environment.apiKey,\n    version: 'weekly',\n});\n\nconst circles: Array<any> = [];\nconst blueMarkers: Array<any> = [];\nconst markers: Array<any> = [];\nlet currentInfoWindow: any = null;\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnInit {\n    constructor(private http: HttpClient) {}\n\n    result: any;\n    successMarkers: Array<Object> = [];\n    coordinate: Array<Object> = [\n        {\n            lat: Number,\n            lng: Number,\n        },\n    ];\n    drawingManager: any;\n\n    ngOnInit(): void {\n        this.demo();\n    }\n\n    demo() {\n        const readFile = () => {\n            this.http\n                .get('assets/Book1.csv', { responseType: 'text' })\n                .subscribe(\n                    (data: any) => {\n                        this.result = data.split('\\n');\n\n                        const markers = this.result.map(\n                            (item: any, index: number) => {\n                                this.coordinate.push({\n                                    lat: item.split(',')[0],\n                                    lng: item.split(',')[1],\n                                });\n\n                                const marker = new google.maps.Marker({\n                                    position: {\n                                        lat: Number(item.split(',')[0]),\n                                        lng: Number(item.split(',')[1]),\n                                    },\n                                    map,\n                                    title: `Item index ${index}`,\n                                });\n\n                                return marker;\n                            }\n                        );\n                    },\n                    (error: any) => console.log(error.error)\n                );\n        };\n\n        loader.load().then(async () => {\n            //* initial map element\n            const { Map } = (await google.maps.importLibrary(\n                'maps'\n            )) as google.maps.MapsLibrary;\n            map = new Map(document.getElementById('map') as HTMLElement, {\n                center: VietNamCor,\n                zoom: 8,\n            });\n\n            this.drawingManager = new google.maps.drawing.DrawingManager({\n                drawingMode: null,\n                drawingControl: false,\n                circleOptions: {\n                    fillColor: '#ffff00',\n                    fillOpacity: 1,\n                    strokeWeight: 5,\n                    clickable: false,\n                    editable: true,\n                    zIndex: 1,\n                },\n            });\n            this.drawingManager.setMap(map);\n        });\n    }\n\n    handleDrawHandClick = () => {\n        this.drawingManager.setDrawingMode(null);\n    };\n\n    handleDrawMarkerClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.MARKER\n        );\n\n        google.maps.event.addListener(\n            this.drawingManager,\n            'markercomplete',\n            function (marker: any) {\n                marker.setIcon(\n                    'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n                );\n                markers.push(marker);\n\n                circles.forEach((item) => {\n                    const circleCenter = item.getCenter();\n                    const circleRadius = item.getRadius();\n                    const markerPosition = marker.getPosition();\n\n                    if (markerPosition && circleCenter) {\n                        if (\n                            google.maps.geometry.spherical.computeDistanceBetween(\n                                circleCenter,\n                                markerPosition\n                            ) <= circleRadius\n                        ) {\n                            marker.setIcon(\n                                'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n                            );\n                        } else {\n                            const lat = marker.getPosition()?.lat();\n                            const lng = marker.getPosition()?.lng();\n\n                            const isWater = async () => { \n                                await detectWater(lat, lng)\n                            }\n                            marker.setIcon(\n                                'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n                            );\n                        }\n                    }\n                });\n\n                marker.addListener('rightclick', () => {\n                    if (currentInfoWindow) {\n                        currentInfoWindow.close();\n                    }\n                    const infowindow = new google.maps.InfoWindow({\n                        content:\n                            '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' +\n                            '<div><input type=\"checkbox\" id=\"remove\">Remove</div>',\n                    });\n\n                    infowindow.open(map, marker);\n                    currentInfoWindow = infowindow;\n\n                    infowindow.addListener('domready', () => {\n                        const editCheckbox = document.getElementById('edit');\n                        const removeCheckbox =\n                            document.getElementById('remove');\n\n                        if (marker.getDraggable()) {\n                            editCheckbox?.setAttribute('checked', 'true');\n                        } else {\n                            editCheckbox?.removeAttribute('checked');\n                        }\n\n                        editCheckbox?.addEventListener('change', () => {\n                            if (marker.getDraggable()) {\n                                editCheckbox?.removeAttribute('checked');\n                                marker.setDraggable(null);\n                            } else {\n                                editCheckbox.setAttribute('checked', 'true');\n                                marker.setDraggable(true);\n                            }\n                        });\n\n                        removeCheckbox?.addEventListener('change', () => {\n                            marker.setMap(null);\n                        });\n                    });\n                });\n            }\n        );\n    };\n\n    handleDrawCircleClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.CIRCLE\n        );\n\n        google.maps.event.addListener(\n            this.drawingManager,\n            'circlecomplete',\n            function (circle: any) {\n                circles.push(circle);\n\n                circle.addListener('bounds_changed', () => {\n                    const circleCenter = circle.getCenter();\n                    const circleRadius = circle.getRadius();\n\n                    markers.forEach((item) => {\n                        const markerPosition = item.getPosition();\n\n                        if (markerPosition && circleCenter) {\n                            if (\n                                google.maps.geometry.spherical.computeDistanceBetween(\n                                    circleCenter,\n                                    markerPosition\n                                ) <= circleRadius\n                            ) {\n                                item.setIcon(\n                                    'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n                                );\n                            } else {\n                                item.setIcon(\n                                    'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n                                );\n                            }\n                        }\n                    });\n                });\n            }\n        );\n    };\n\n    handleClearCircleClick = () => {\n        circles.forEach((circle) => {\n            circle.setMap(null);\n        });\n\n        circles.length = 0;\n    };\n\n    handleDrawShapeClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.POLYGON\n        );\n\n        google.maps.event.addListener(\n            this.drawingManager,\n            'polygoncomplete',\n            function (polygon: any) {\n                polygon.addListener('rightclick', function (event: any) {\n                    if (currentInfoWindow) {\n                        currentInfoWindow.close();\n                    }\n                    const infowindow = new google.maps.InfoWindow({\n                        content:\n                            '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' +\n                            '<div><input type=\"checkbox\" id=\"remove\">Remove</div>',\n                    });\n\n                    infowindow.setPosition(event.latLng);\n                    infowindow.open(map);\n                    currentInfoWindow = infowindow;\n\n                    infowindow.addListener('domready', () => {\n                        const editCheckbox = document.getElementById('edit');\n                        const removeCheckbox =\n                            document.getElementById('remove');\n\n                        if (polygon.getDraggable()) {\n                            editCheckbox?.setAttribute('checked', 'true');\n                        } else {\n                            editCheckbox?.removeAttribute('checked');\n                        }\n\n                        editCheckbox?.addEventListener('change', () => {\n                            if (polygon.getDraggable()) {\n                                editCheckbox?.removeAttribute('checked');\n                                polygon.setDraggable(null);\n                            } else {\n                                editCheckbox.setAttribute('checked', 'true');\n                                polygon.setDraggable(true);\n                            }\n                        });\n\n                        removeCheckbox?.addEventListener('change', () => {\n                            polygon.setMap(null);\n                            infowindow.close();\n                        });\n                    });\n                });\n            }\n        );\n    };\n    handleDrawLineClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.POLYLINE\n        );\n\n        google.maps.event.addListener(\n            this.drawingManager,\n            'polylinecomplete',\n            function (line: any) {\n                line.addListener('rightclick', function (event: any) {\n                    if (currentInfoWindow) {\n                        currentInfoWindow.close();\n                    }\n                    const infowindow = new google.maps.InfoWindow({\n                        content:\n                            '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' +\n                            '<div><input type=\"checkbox\" id=\"remove\">Remove</div>',\n                    });\n\n                    infowindow.setPosition(event.latLng);\n                    infowindow.open(map);\n                    currentInfoWindow = infowindow;\n\n                    infowindow.addListener('domready', () => {\n                        const editCheckbox = document.getElementById('edit');\n                        const removeCheckbox =\n                            document.getElementById('remove');\n\n                        if (line.getDraggable()) {\n                            editCheckbox?.setAttribute('checked', 'true');\n                        } else {\n                            editCheckbox?.removeAttribute('checked');\n                        }\n\n                        editCheckbox?.addEventListener('change', () => {\n                            if (line.getDraggable()) {\n                                editCheckbox?.removeAttribute('checked');\n                                line.setDraggable(null);\n                            } else {\n                                editCheckbox.setAttribute('checked', 'true');\n                                line.setDraggable(true);\n                            }\n                        });\n\n                        removeCheckbox?.addEventListener('change', () => {\n                            line.setMap(null);\n                            infowindow.close();\n                        });\n                    });\n                });\n            }\n        );\n    };\n    handleDrawRectangleClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.RECTANGLE\n        );\n\n        google.maps.event.addListener(\n            this.drawingManager,\n            'rectanglecomplete',\n            function (rectangle: any) {\n                rectangle.addListener('rightclick', function (event: any) {\n                    if (currentInfoWindow) {\n                        currentInfoWindow.close();\n                    }\n                    const infowindow = new google.maps.InfoWindow({\n                        content:\n                            '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' +\n                            '<div><input type=\"checkbox\" id=\"remove\">Remove</div>',\n                    });\n\n                    infowindow.setPosition(event.latLng);\n                    infowindow.open(map);\n                    currentInfoWindow = infowindow;\n\n                    infowindow.addListener('domready', () => {\n                        const editCheckbox = document.getElementById('edit');\n                        const removeCheckbox =\n                            document.getElementById('remove');\n\n                        if (rectangle.getDraggable()) {\n                            editCheckbox?.setAttribute('checked', 'true');\n                        } else {\n                            editCheckbox?.removeAttribute('checked');\n                        }\n\n                        editCheckbox?.addEventListener('change', () => {\n                            if (rectangle.getDraggable()) {\n                                editCheckbox?.removeAttribute('checked');\n                                rectangle.setDraggable(null);\n                            } else {\n                                editCheckbox.setAttribute('checked', 'true');\n                                rectangle.setDraggable(true);\n                            }\n                        });\n\n                        removeCheckbox?.addEventListener('change', () => {\n                            rectangle.setMap(null);\n                            infowindow.close();\n                        });\n                    });\n                });\n            }\n        );\n    };\n\n    handleShowBlueMarkers = () => {\n        blueMarkers.forEach((item, index) =>\n            console.log(`item at index ${index}`)\n        );\n    };\n}\n","<div class=\"ms-4 d-flex gap-3\">\n    <div class=\"d-flex flex-column gap-3\">\n        <button type=\"button\" class=\"btn btn-primary\" (click)=\"handleDrawMarkerClick()\">Markers</button>\n        <div class=\"dropdown\">\n            <button\n                class=\"btn btn-secondary dropdown-toggle\"\n                type=\"button\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\"\n            >\n                Shapes\n            </button>\n            <ul class=\"dropdown-menu\">\n                <li>\n                    <a\n                        class=\"dropdown-item\"\n                        (click)=\"handleDrawHandClick()\"\n                        >Hand</a\n                    >\n                </li>\n                <li>\n                    <a\n                        class=\"dropdown-item\"\n                        (click)=\"handleDrawCircleClick()\"\n                        >Circle</a\n                    >\n                </li>\n                <li>\n                    <a\n                        class=\"dropdown-item\"\n                        (click)=\"handleDrawRectangleClick()\"\n                        >Rectangle</a\n                    >\n                </li>\n                <li>\n                    <a\n                        class=\"dropdown-item\"\n                        (click)=\"handleDrawLineClick()\"\n                        >Polyline</a\n                    >\n                </li>\n                <li>\n                    <a\n                        class=\"dropdown-item\"\n                        (click)=\"handleDrawShapeClick()\"\n                        >Polygon</a\n                    >\n                </li>\n            </ul>\n        </div>\n    </div>\n    <div id=\"map\"></div>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}