{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/PC/Desktop/workspace/AngularDemo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from 'src/environments/environment.development';\nimport { Loader } from '@googlemaps/js-api-loader';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet map;\nconst VietNamCor = {\n  lat: 15.9031,\n  lng: 105.8067\n};\nconst flightPlanCoordinates = [{\n  lat: 37.772,\n  lng: -122.214\n}, {\n  lat: 21.291,\n  lng: -157.821\n}, {\n  lat: -18.142,\n  lng: 178.431\n}, {\n  lat: -27.467,\n  lng: 153.027\n}];\nconst triangleCoords = [{\n  lat: 23.393396,\n  lng: 102.14682\n}, {\n  lat: 22.719568,\n  lng: 105.776716\n}, {\n  lat: 8.383496,\n  lng: 104.938748\n}, {\n  lat: 8.383496,\n  lng: 102.14682\n}];\nconst VNlocations = [{\n  lat: 21.0278,\n  lng: 105.8342\n}, {\n  lat: 16.0544,\n  lng: 108.2022\n}, {\n  lat: 10.8231,\n  lng: 106.6297\n}, {\n  lat: 12.2388,\n  lng: 109.1967\n}, {\n  lat: 20.8449,\n  lng: 106.6881\n}, {\n  lat: 21.0283,\n  lng: 105.8537\n}, {\n  lat: 10.9656,\n  lng: 108.107\n}, {\n  lat: 21.4049,\n  lng: 103.2055\n}, {\n  lat: 10.0333,\n  lng: 105.7833\n}, {\n  lat: 16.4692,\n  lng: 107.5787\n}, {\n  lat: 13.9833,\n  lng: 108\n}, {\n  lat: 14.0583,\n  lng: 108.2772\n}, {\n  lat: 13.7665,\n  lng: 109.2237\n}, {\n  lat: 11.9325,\n  lng: 109.1967\n}, {\n  lat: 10.3833,\n  lng: 105.4167\n}, {\n  lat: 21.5942,\n  lng: 105.8481\n}, {\n  lat: 20.8172,\n  lng: 106.7244\n}, {\n  lat: 20.9544,\n  lng: 107.0806\n}, {\n  lat: 21.3281,\n  lng: 103.8733\n} // Yen Bai\n];\n\nlet loader = new Loader({\n  apiKey: environment.apiKey,\n  version: 'weekly'\n});\nconst circles = [];\nconst blueMarkers = [];\nlet currentInfoWindow = null;\nclass AppComponent {\n  constructor(http) {\n    this.http = http;\n    this.successMarkers = [];\n    this.coordinate = [{\n      lat: Number,\n      lng: Number\n    }];\n    this.handleDrawHandClick = () => {\n      this.drawingManager.setDrawingMode(null);\n    };\n    this.handleDrawMarkerClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.MARKER);\n    };\n    this.handleDrawCircleClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.CIRCLE);\n      google.maps.event.addListener(this.drawingManager, 'circlecomplete', function (circle) {\n        circles.push(circle);\n        console.log('big event');\n        circle.addListener('bounds_changed', () => {\n          const circleCenter = circle.getCenter();\n          const circleRadius = circle.getRadius();\n          VNlocations.map((item, index) => {\n            const marker = new google.maps.Marker({\n              position: item,\n              map,\n              title: `Item index ${index}`\n            });\n            const markerPosition = marker.getPosition();\n            if (markerPosition && circleCenter) {\n              if (google.maps.geometry.spherical.computeDistanceBetween(circleCenter, markerPosition) <= circleRadius) {\n                marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');\n                console.log('success');\n                blueMarkers.push(marker);\n              } else {\n                marker.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');\n              }\n            } else {\n              console.log(`Error before`);\n            }\n          });\n        });\n      });\n    };\n    this.handleClearCircleClick = () => {\n      circles.forEach(circle => {\n        circle.setMap(null);\n      });\n      circles.length = 0;\n    };\n    this.handleDrawShapeClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);\n    };\n    this.handleDrawLineClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYLINE);\n    };\n    this.handleDrawRectangleClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.RECTANGLE);\n    };\n    this.handleShowBlueMarkers = () => {\n      blueMarkers.forEach((item, index) => console.log(`item at index ${index}`));\n    };\n  }\n  ngOnInit() {\n    this.demo();\n  }\n  demo() {\n    var _this = this;\n    const detectWater = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (lat, lng) {\n        try {\n          const url = `https://isitwater-com.p.rapidapi.com/?latitude=${lat}&longitude=${lng}`;\n          const options = {\n            method: 'GET',\n            headers: {\n              'X-RapidAPI-Key': '911f81d9e3msh5f705b8931d758cp13855bjsn19b3ba12960e',\n              'X-RapidAPI-Host': 'isitwater-com.p.rapidapi.com'\n            }\n          };\n          const response = yield fetch(url, options);\n          const result = yield response.json();\n          console.log(result);\n          if (result.water) {\n            return alert('You clicked outside the land!');\n          }\n          return alert('You clicked inside the land!');\n        } catch (error) {\n          console.error(error);\n        }\n      });\n      return function detectWater(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    loader.load().then( /*#__PURE__*/_asyncToGenerator(function* () {\n      //* initial map element\n      const {\n        Map\n      } = yield google.maps.importLibrary('maps');\n      map = new Map(document.getElementById('map'), {\n        center: VietNamCor,\n        zoom: 8\n      });\n      //* create circle instance.\n      // const circle = new google.maps.Circle({\n      //     editable: true,\n      //     strokeColor: '#FF0000',\n      //     strokeOpacity: 0.8,\n      //     strokeWeight: 2,\n      //     fillColor: '#FF0000',\n      //     fillOpacity: 0.35,\n      //     map,\n      //     center: { lat: 16.463713, lng: 107.590866 },\n      //     radius: Math.sqrt(2) * 100000,\n      // });\n      //* Create the polygon instance\n      const polygon = new google.maps.Polygon({\n        paths: triangleCoords,\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.35\n      });\n      polygon.addListener('rightclick', () => {\n        polygon.setEditable(true);\n      });\n      //* Create marker instance\n      const markers = VNlocations.map((item, index) => {\n        const marker = new google.maps.Marker({\n          position: item,\n          map,\n          title: `Item index ${index}`\n        });\n        marker.addListener('rightclick', () => {\n          if (currentInfoWindow) {\n            currentInfoWindow.close();\n          }\n          const infowindow = new google.maps.InfoWindow({\n            content: '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' + '<div><input type=\"checkbox\" id=\"remove\">Remove</div>'\n          });\n          infowindow.open(map, marker);\n          currentInfoWindow = infowindow;\n          infowindow.addListener('domready', () => {\n            const editCheckbox = document.getElementById('edit');\n            const removeCheckbox = document.getElementById('remove');\n            if (editCheckbox?.classList.contains('dragTrue')) {\n              editCheckbox.setAttribute('checked', '');\n            } else {\n              editCheckbox?.removeAttribute('checked');\n            }\n            editCheckbox?.addEventListener('change', () => {\n              if (editCheckbox.classList.contains('dragTrue')) {\n                editCheckbox.classList.remove('dragTrue');\n                editCheckbox?.removeAttribute('checked');\n                infowindow.setOptions();\n                marker.setDraggable(false);\n                console.log(marker.setDraggable(false));\n              } else {\n                editCheckbox.classList.add('dragTrue');\n                editCheckbox.setAttribute('checked', 'true');\n                marker.setDraggable(true);\n                marker.get;\n              }\n            });\n            removeCheckbox?.addEventListener('change', () => {\n              marker.setMap(null);\n            });\n          });\n        });\n        // const demo1 = circle.getCenter();\n        // const demo2 = marker.getPosition();\n        // if (demo2 && demo1) {\n        //     if (\n        //         google.maps.geometry.spherical.computeDistanceBetween(\n        //             demo1,\n        //             demo2\n        //         ) <= circle.getRadius()\n        //     ) {\n        //         marker.setIcon(\n        //             'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n        //         );\n        //     } else {\n        //         marker.setIcon(\n        //             'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n        //         );\n        //     }\n        // } else {\n        //     console.log(`Error before`);\n        // }\n      });\n      // this.http\n      //     .get('assets/Book1.csv', { responseType: 'text' })\n      //     .subscribe(\n      //         (data: any) => {\n      //             this.result = data.split('\\n');\n      //             const markers = this.result.map(\n      //                 (item: any, index: number) => {\n      //                     // this.coordinate.push({\n      //                     //     lat: item.split(',')[0],\n      //                     //     lng: item.split(',')[1],\n      //                     // });\n      //                     const marker = new google.maps.Marker({\n      //                         position: {\n      //                             lat: Number(item.split(',')[0]),\n      //                             lng: Number(item.split(',')[1]),\n      //                         },\n      //                         map,\n      //                         title: `Item index ${index}`,\n      //                     });\n      //                     return marker;\n      //                 }\n      //             );\n      //         },\n      //         (error: any) => console.log(error.error)\n      //     );\n      //* Create polyline instance\n      // const poly = new google.maps.Polyline({\n      //     path: flightPlanCoordinates,\n      //     geodesic: true,\n      //     strokeColor: '#FF0000',\n      //     strokeOpacity: 1.0,\n      //     strokeWeight: 2,\n      // });\n      // circle.addListener('bounds_changed', () => {\n      //     VNlocations.map(\n      //         (item: { lat: number; lng: number }, index: number) => {\n      //             const marker = new google.maps.Marker({\n      //                 position: item,\n      //                 map,\n      //                 title: `Item index ${index}`,\n      //             });\n      //             const demo1 = circle.getCenter();\n      //             const demo2 = marker.getPosition();\n      //             if (demo2 && demo1) {\n      //                 if (\n      //                     google.maps.geometry.spherical.computeDistanceBetween(\n      //                         demo1,\n      //                         demo2\n      //                     ) <= circle.getRadius()\n      //                 ) {\n      //                     marker.setIcon(\n      //                         'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n      //                     );\n      //                 } else {\n      //                     marker.setIcon(\n      //                         'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n      //                     );\n      //                 }\n      //             } else {\n      //                 console.log(`Error before`);\n      //             }\n      //         }\n      //     );\n      // });\n      //! Add click event listener to map instance\n      // map.addListener('click', (e: any) => {\n      //     const lat = e.latLng.lat();\n      //     const lng = e.latLng.lng();\n      //     //! check if on water\n      //     detectWater(lat, lng);\n      // });\n      //! Add click event listener to marker instance\n      // marker.addListener('click', () => {\n      //     console.log('click event fired');\n      // });\n      // poly.setMap(map);\n      polygon.setMap(map);\n      _this.drawingManager = new google.maps.drawing.DrawingManager({\n        drawingMode: null,\n        drawingControl: false,\n        circleOptions: {\n          fillColor: '#ffff00',\n          fillOpacity: 1,\n          strokeWeight: 5,\n          clickable: false,\n          editable: true,\n          zIndex: 1\n        }\n      });\n      // google.maps.event.addListener(\n      //     this.drawingManager,\n      //     'circlecomplete',\n      //     function (circle: any) {\n      //         const circleCenter = circle.getCenter();\n      //         const circleRadius = circle.getRadius();\n      //         VNlocations.map(\n      //             (item: { lat: number; lng: number }, index: number) => {\n      //                 const marker = new google.maps.Marker({\n      //                     position: item,\n      //                     map,\n      //                     title: `Item index ${index}`,\n      //                 });\n      //                 const markerPosition = marker.getPosition();\n      //                 if (markerPosition && circleCenter) {\n      //                     if (\n      //                         google.maps.geometry.spherical.computeDistanceBetween(\n      //                             circleCenter,\n      //                             markerPosition\n      //                         ) <= circleRadius\n      //                     ) {\n      //                         marker.setIcon(\n      //                             'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n      //                         );\n      //                         blueMarkers.push(marker);\n      //                     } else {\n      //                         marker.setIcon(\n      //                             'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n      //                         );\n      //                     }\n      //                 } else {\n      //                     console.log(`Error before`);\n      //                 }\n      //             }\n      //         );\n      //     }\n      // );\n      _this.drawingManager.setMap(map);\n    }));\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 19,\n  vars: 0,\n  consts: [[1, \"ms-4\", \"d-flex\", \"gap-3\"], [1, \"d-flex\", \"flex-column\", \"gap-3\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn\", \"btn-info\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn\", \"btn-dark\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-dark\", 3, \"click\"], [\"id\", \"map\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_2_listener() {\n        return ctx.handleDrawHandClick();\n      });\n      i0.ɵɵtext(3, \" Hand \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_4_listener() {\n        return ctx.handleDrawMarkerClick();\n      });\n      i0.ɵɵtext(5, \" Add a Marker \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_6_listener() {\n        return ctx.handleDrawCircleClick();\n      });\n      i0.ɵɵtext(7, \" Draw a Circle \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_8_listener() {\n        return ctx.handleDrawShapeClick();\n      });\n      i0.ɵɵtext(9, \" Draw a Shape \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_10_listener() {\n        return ctx.handleDrawLineClick();\n      });\n      i0.ɵɵtext(11, \" Draw a Line \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_12_listener() {\n        return ctx.handleDrawRectangleClick();\n      });\n      i0.ɵɵtext(13, \" Draw a Rectangle \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_14_listener() {\n        return ctx.handleClearCircleClick();\n      });\n      i0.ɵɵtext(15, \" Clear Circle \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_16_listener() {\n        return ctx.handleShowBlueMarkers();\n      });\n      i0.ɵɵtext(17, \" Show current markers \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(18, \"div\", 7);\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"#map[_ngcontent-%COMP%] {\\r\\n    height: 100dvh;\\r\\n    width: 100%;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxjQUFjO0lBQ2QsV0FBVztBQUNmIiwic291cmNlc0NvbnRlbnQiOlsiI21hcCB7XHJcbiAgICBoZWlnaHQ6IDEwMGR2aDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { AppComponent };","map":{"version":3,"names":["environment","Loader","map","VietNamCor","lat","lng","flightPlanCoordinates","triangleCoords","VNlocations","loader","apiKey","version","circles","blueMarkers","currentInfoWindow","AppComponent","constructor","http","successMarkers","coordinate","Number","handleDrawHandClick","drawingManager","setDrawingMode","handleDrawMarkerClick","google","maps","drawing","OverlayType","MARKER","handleDrawCircleClick","CIRCLE","event","addListener","circle","push","console","log","circleCenter","getCenter","circleRadius","getRadius","item","index","marker","Marker","position","title","markerPosition","getPosition","geometry","spherical","computeDistanceBetween","setIcon","handleClearCircleClick","forEach","setMap","length","handleDrawShapeClick","POLYGON","handleDrawLineClick","POLYLINE","handleDrawRectangleClick","RECTANGLE","handleShowBlueMarkers","ngOnInit","demo","_this","detectWater","_ref","_asyncToGenerator","url","options","method","headers","response","fetch","result","json","water","alert","error","_x","_x2","apply","arguments","load","then","Map","importLibrary","document","getElementById","center","zoom","polygon","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","setEditable","markers","close","infowindow","InfoWindow","content","open","editCheckbox","removeCheckbox","classList","contains","setAttribute","removeAttribute","addEventListener","remove","setOptions","setDraggable","add","get","DrawingManager","drawingMode","drawingControl","circleOptions","clickable","editable","zIndex","i0","ɵɵdirectiveInject","i1","HttpClient","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","AppComponent_Template_button_click_2_listener","ɵɵtext","ɵɵelementEnd","AppComponent_Template_button_click_4_listener","AppComponent_Template_button_click_6_listener","AppComponent_Template_button_click_8_listener","AppComponent_Template_button_click_10_listener","AppComponent_Template_button_click_12_listener","AppComponent_Template_button_click_14_listener","AppComponent_Template_button_click_16_listener","ɵɵelement"],"sources":["C:\\Users\\PC\\Desktop\\workspace\\AngularDemo\\src\\app\\app.component.ts","C:\\Users\\PC\\Desktop\\workspace\\AngularDemo\\src\\app\\app.component.html"],"sourcesContent":["import { environment } from 'src/environments/environment.development';\nimport { Component, OnInit } from '@angular/core';\nimport { Loader } from '@googlemaps/js-api-loader';\nimport * as _ from 'lodash';\nimport { HttpClient } from '@angular/common/http';\n\nlet map: google.maps.Map;\nconst VietNamCor = { lat: 15.9031, lng: 105.8067 };\nconst flightPlanCoordinates = [\n    { lat: 37.772, lng: -122.214 },\n    { lat: 21.291, lng: -157.821 },\n    { lat: -18.142, lng: 178.431 },\n    { lat: -27.467, lng: 153.027 },\n];\n\nconst triangleCoords = [\n    { lat: 23.393396, lng: 102.14682 },\n    { lat: 22.719568, lng: 105.776716 },\n    { lat: 8.383496, lng: 104.938748 },\n    { lat: 8.383496, lng: 102.14682 },\n];\n\nconst VNlocations = [\n    { lat: 21.0278, lng: 105.8342 }, // Hanoi\n    { lat: 16.0544, lng: 108.2022 }, // Da Nang\n    { lat: 10.8231, lng: 106.6297 }, // Ho Chi Minh City\n    { lat: 12.2388, lng: 109.1967 }, // Nha Trang\n    { lat: 20.8449, lng: 106.6881 }, // Hai Phong\n    { lat: 21.0283, lng: 105.8537 }, // Bac Ninh\n    { lat: 10.9656, lng: 108.107 }, // Vung Tau\n    { lat: 21.4049, lng: 103.2055 }, // Lao Cai\n    { lat: 10.0333, lng: 105.7833 }, // Can Tho\n    { lat: 16.4692, lng: 107.5787 }, // Hue\n    { lat: 13.9833, lng: 108 }, // Quy Nhon\n    { lat: 14.0583, lng: 108.2772 }, // Tuy Hoa\n    { lat: 13.7665, lng: 109.2237 }, // Phan Rang-Thap Cham\n    { lat: 11.9325, lng: 109.1967 }, // Phan Thiet\n    { lat: 10.3833, lng: 105.4167 }, // Rach Gia\n    { lat: 21.5942, lng: 105.8481 }, // Vinh Yen\n    { lat: 20.8172, lng: 106.7244 }, // Ha Long\n    { lat: 20.9544, lng: 107.0806 }, // Thai Nguyen\n    { lat: 21.3281, lng: 103.8733 }, // Yen Bai\n];\n\nlet loader = new Loader({\n    apiKey: environment.apiKey,\n    version: 'weekly',\n});\n\nconst circles: Array<any> = [];\nconst blueMarkers: Array<any> = [];\nlet currentInfoWindow: any = null;\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnInit {\n    constructor(private http: HttpClient) {}\n\n    result: any;\n    successMarkers: Array<Object> = [];\n    coordinate: Array<Object> = [\n        {\n            lat: Number,\n            lng: Number,\n        },\n    ];\n    drawingManager: any;\n\n    ngOnInit(): void {\n        this.demo();\n    }\n\n    demo() {\n        const detectWater = async (lat: number, lng: number) => {\n            try {\n                const url = `https://isitwater-com.p.rapidapi.com/?latitude=${lat}&longitude=${lng}`;\n                const options = {\n                    method: 'GET',\n                    headers: {\n                        'X-RapidAPI-Key':\n                            '911f81d9e3msh5f705b8931d758cp13855bjsn19b3ba12960e',\n                        'X-RapidAPI-Host': 'isitwater-com.p.rapidapi.com',\n                    },\n                };\n                const response = await fetch(url, options);\n                const result = await response.json();\n                console.log(result);\n                if (result.water) {\n                    return alert('You clicked outside the land!');\n                }\n                return alert('You clicked inside the land!');\n            } catch (error) {\n                console.error(error);\n            }\n        };\n\n        loader.load().then(async () => {\n            //* initial map element\n            const { Map } = (await google.maps.importLibrary(\n                'maps'\n            )) as google.maps.MapsLibrary;\n            map = new Map(document.getElementById('map') as HTMLElement, {\n                center: VietNamCor,\n                zoom: 8,\n            });\n            //* create circle instance.\n            // const circle = new google.maps.Circle({\n            //     editable: true,\n            //     strokeColor: '#FF0000',\n            //     strokeOpacity: 0.8,\n            //     strokeWeight: 2,\n            //     fillColor: '#FF0000',\n            //     fillOpacity: 0.35,\n            //     map,\n            //     center: { lat: 16.463713, lng: 107.590866 },\n            //     radius: Math.sqrt(2) * 100000,\n            // });\n\n            //* Create the polygon instance\n            const polygon = new google.maps.Polygon({\n                paths: triangleCoords,\n                strokeColor: '#FF0000',\n                strokeOpacity: 0.8,\n                strokeWeight: 2,\n                fillColor: '#FF0000',\n                fillOpacity: 0.35,\n            });\n\n            polygon.addListener('rightclick', () => {\n                polygon.setEditable(true);\n            });\n\n            //* Create marker instance\n            const markers = VNlocations.map(\n                (item: { lat: number; lng: number }, index: number) => {\n                    const marker = new google.maps.Marker({\n                        position: item,\n                        map,\n                        title: `Item index ${index}`,\n                    });\n\n                    marker.addListener('rightclick', () => {\n                        if (currentInfoWindow) {\n                            currentInfoWindow.close();\n                        }\n                        const infowindow = new google.maps.InfoWindow({\n                            content:\n                                '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' +\n                                '<div><input type=\"checkbox\" id=\"remove\">Remove</div>',\n                        });\n                        infowindow.open(map, marker);\n                        currentInfoWindow = infowindow;\n\n                        infowindow.addListener('domready', () => {\n                            const editCheckbox =\n                                document.getElementById('edit');\n                            const removeCheckbox =\n                                document.getElementById('remove');\n\n                            if (editCheckbox?.classList.contains('dragTrue')) {\n                                editCheckbox.setAttribute('checked', '');\n                            } else {\n                                editCheckbox?.removeAttribute('checked');\n                            }\n\n                            editCheckbox?.addEventListener('change', () => {\n                                if (\n                                    editCheckbox.classList.contains('dragTrue')\n                                ) {\n                                    editCheckbox.classList.remove('dragTrue');\n                                    editCheckbox?.removeAttribute('checked');\n                                    infowindow.setOptions();\n                                    marker.setDraggable(false);\n                                    console.log(marker.setDraggable(false));\n                                } else {\n                                    editCheckbox.classList.add('dragTrue');\n                                    editCheckbox.setAttribute(\n                                        'checked',\n                                        'true'\n                                    );\n                                    marker.setDraggable(true);\n                                    marker.get\n                                }\n                            });\n\n                            removeCheckbox?.addEventListener('change', () => {\n                                marker.setMap(null);\n                            });\n                        });\n                    });\n                    // const demo1 = circle.getCenter();\n                    // const demo2 = marker.getPosition();\n\n                    // if (demo2 && demo1) {\n                    //     if (\n                    //         google.maps.geometry.spherical.computeDistanceBetween(\n                    //             demo1,\n                    //             demo2\n                    //         ) <= circle.getRadius()\n                    //     ) {\n                    //         marker.setIcon(\n                    //             'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n                    //         );\n                    //     } else {\n                    //         marker.setIcon(\n                    //             'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n                    //         );\n                    //     }\n                    // } else {\n                    //     console.log(`Error before`);\n                    // }\n                }\n            );\n\n            // this.http\n            //     .get('assets/Book1.csv', { responseType: 'text' })\n            //     .subscribe(\n            //         (data: any) => {\n            //             this.result = data.split('\\n');\n\n            //             const markers = this.result.map(\n            //                 (item: any, index: number) => {\n            //                     // this.coordinate.push({\n            //                     //     lat: item.split(',')[0],\n            //                     //     lng: item.split(',')[1],\n            //                     // });\n\n            //                     const marker = new google.maps.Marker({\n            //                         position: {\n            //                             lat: Number(item.split(',')[0]),\n            //                             lng: Number(item.split(',')[1]),\n            //                         },\n            //                         map,\n            //                         title: `Item index ${index}`,\n            //                     });\n\n            //                     return marker;\n            //                 }\n            //             );\n            //         },\n            //         (error: any) => console.log(error.error)\n            //     );\n\n            //* Create polyline instance\n            // const poly = new google.maps.Polyline({\n            //     path: flightPlanCoordinates,\n            //     geodesic: true,\n            //     strokeColor: '#FF0000',\n            //     strokeOpacity: 1.0,\n            //     strokeWeight: 2,\n            // });\n\n            // circle.addListener('bounds_changed', () => {\n            //     VNlocations.map(\n            //         (item: { lat: number; lng: number }, index: number) => {\n            //             const marker = new google.maps.Marker({\n            //                 position: item,\n            //                 map,\n            //                 title: `Item index ${index}`,\n            //             });\n            //             const demo1 = circle.getCenter();\n            //             const demo2 = marker.getPosition();\n\n            //             if (demo2 && demo1) {\n            //                 if (\n            //                     google.maps.geometry.spherical.computeDistanceBetween(\n            //                         demo1,\n            //                         demo2\n            //                     ) <= circle.getRadius()\n            //                 ) {\n            //                     marker.setIcon(\n            //                         'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n            //                     );\n            //                 } else {\n            //                     marker.setIcon(\n            //                         'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n            //                     );\n            //                 }\n            //             } else {\n            //                 console.log(`Error before`);\n            //             }\n            //         }\n            //     );\n            // });\n\n            //! Add click event listener to map instance\n            // map.addListener('click', (e: any) => {\n            //     const lat = e.latLng.lat();\n            //     const lng = e.latLng.lng();\n\n            //     //! check if on water\n            //     detectWater(lat, lng);\n            // });\n\n            //! Add click event listener to marker instance\n            // marker.addListener('click', () => {\n            //     console.log('click event fired');\n            // });\n\n            // poly.setMap(map);\n            polygon.setMap(map);\n\n            this.drawingManager = new google.maps.drawing.DrawingManager({\n                drawingMode: null,\n                drawingControl: false,\n                circleOptions: {\n                    fillColor: '#ffff00',\n                    fillOpacity: 1,\n                    strokeWeight: 5,\n                    clickable: false,\n                    editable: true,\n                    zIndex: 1,\n                },\n            });\n\n            // google.maps.event.addListener(\n            //     this.drawingManager,\n            //     'circlecomplete',\n            //     function (circle: any) {\n            //         const circleCenter = circle.getCenter();\n            //         const circleRadius = circle.getRadius();\n            //         VNlocations.map(\n            //             (item: { lat: number; lng: number }, index: number) => {\n            //                 const marker = new google.maps.Marker({\n            //                     position: item,\n            //                     map,\n            //                     title: `Item index ${index}`,\n            //                 });\n            //                 const markerPosition = marker.getPosition();\n\n            //                 if (markerPosition && circleCenter) {\n            //                     if (\n            //                         google.maps.geometry.spherical.computeDistanceBetween(\n            //                             circleCenter,\n            //                             markerPosition\n            //                         ) <= circleRadius\n            //                     ) {\n            //                         marker.setIcon(\n            //                             'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n            //                         );\n            //                         blueMarkers.push(marker);\n            //                     } else {\n            //                         marker.setIcon(\n            //                             'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n            //                         );\n            //                     }\n            //                 } else {\n            //                     console.log(`Error before`);\n            //                 }\n            //             }\n            //         );\n            //     }\n            // );\n            this.drawingManager.setMap(map);\n        });\n    }\n\n    handleDrawHandClick = () => {\n        this.drawingManager.setDrawingMode(null);\n    };\n\n    handleDrawMarkerClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.MARKER\n        );\n    };\n\n    handleDrawCircleClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.CIRCLE\n        );\n\n        google.maps.event.addListener(\n            this.drawingManager,\n            'circlecomplete',\n            function (circle: any) {\n                circles.push(circle);\n                console.log('big event');\n                circle.addListener('bounds_changed', () => {\n                    const circleCenter = circle.getCenter();\n                    const circleRadius = circle.getRadius();\n                    VNlocations.map(\n                        (item: { lat: number; lng: number }, index: number) => {\n                            const marker = new google.maps.Marker({\n                                position: item,\n                                map,\n                                title: `Item index ${index}`,\n                            });\n                            const markerPosition = marker.getPosition();\n\n                            if (markerPosition && circleCenter) {\n                                if (\n                                    google.maps.geometry.spherical.computeDistanceBetween(\n                                        circleCenter,\n                                        markerPosition\n                                    ) <= circleRadius\n                                ) {\n                                    marker.setIcon(\n                                        'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n                                    );\n                                    console.log('success');\n                                    blueMarkers.push(marker);\n                                } else {\n                                    marker.setIcon(\n                                        'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n                                    );\n                                }\n                            } else {\n                                console.log(`Error before`);\n                            }\n                        }\n                    );\n                });\n            }\n        );\n    };\n\n    handleClearCircleClick = () => {\n        circles.forEach((circle) => {\n            circle.setMap(null);\n        });\n\n        circles.length = 0;\n    };\n\n    handleDrawShapeClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.POLYGON\n        );\n    };\n    handleDrawLineClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.POLYLINE\n        );\n    };\n    handleDrawRectangleClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.RECTANGLE\n        );\n    };\n\n    handleShowBlueMarkers = () => {\n        blueMarkers.forEach((item, index) =>\n            console.log(`item at index ${index}`)\n        );\n    };\n}\n","<div class=\"ms-4 d-flex gap-3\">\n    <div class=\"d-flex flex-column gap-3\">\n        <button\n            (click)=\"handleDrawHandClick()\"\n            type=\"button\"\n            class=\"btn btn-primary\"\n        >\n            Hand\n        </button>\n        <button\n            (click)=\"handleDrawMarkerClick()\"\n            type=\"button\"\n            class=\"btn btn-secondary\"\n        >\n            Add a Marker\n        </button>\n        <button\n            (click)=\"handleDrawCircleClick()\"\n            type=\"button\"\n            class=\"btn btn-primary\"\n        >\n            Draw a Circle\n        </button>\n        <button\n            (click)=\"handleDrawShapeClick()\"\n            type=\"button\"\n            class=\"btn btn btn-info\"\n        >\n            Draw a Shape\n        </button>\n        <button\n            (click)=\"handleDrawLineClick()\"\n            type=\"button\"\n            class=\"btn btn btn-dark\"\n        >\n            Draw a Line\n        </button>\n        <button\n            (click)=\"handleDrawRectangleClick()\"\n            type=\"button\"\n            class=\"btn btn-dark\"\n        >\n            Draw a Rectangle\n        </button>\n        <button\n            (click)=\"handleClearCircleClick()\"\n            type=\"button\"\n            class=\"btn btn-dark\"\n        >\n            Clear Circle\n        </button>\n        <button\n            (click)=\"handleShowBlueMarkers()\"\n            type=\"button\"\n            class=\"btn btn-dark\"\n        >\n            Show current markers\n        </button>\n    </div>\n    <div id=\"map\"></div>\n</div>\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,0CAA0C;AAEtE,SAASC,MAAM,QAAQ,2BAA2B;;;AAIlD,IAAIC,GAAoB;AACxB,MAAMC,UAAU,GAAG;EAAEC,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAQ,CAAE;AAClD,MAAMC,qBAAqB,GAAG,CAC1B;EAAEF,GAAG,EAAE,MAAM;EAAEC,GAAG,EAAE,CAAC;AAAO,CAAE,EAC9B;EAAED,GAAG,EAAE,MAAM;EAAEC,GAAG,EAAE,CAAC;AAAO,CAAE,EAC9B;EAAED,GAAG,EAAE,CAAC,MAAM;EAAEC,GAAG,EAAE;AAAO,CAAE,EAC9B;EAAED,GAAG,EAAE,CAAC,MAAM;EAAEC,GAAG,EAAE;AAAO,CAAE,CACjC;AAED,MAAME,cAAc,GAAG,CACnB;EAAEH,GAAG,EAAE,SAAS;EAAEC,GAAG,EAAE;AAAS,CAAE,EAClC;EAAED,GAAG,EAAE,SAAS;EAAEC,GAAG,EAAE;AAAU,CAAE,EACnC;EAAED,GAAG,EAAE,QAAQ;EAAEC,GAAG,EAAE;AAAU,CAAE,EAClC;EAAED,GAAG,EAAE,QAAQ;EAAEC,GAAG,EAAE;AAAS,CAAE,CACpC;AAED,MAAMG,WAAW,GAAG,CAChB;EAAEJ,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAQ,CAAE,EAC/B;EAAED,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAQ,CAAE,EAC/B;EAAED,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAQ,CAAE,EAC/B;EAAED,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAQ,CAAE,EAC/B;EAAED,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAQ,CAAE,EAC/B;EAAED,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAQ,CAAE,EAC/B;EAAED,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAO,CAAE,EAC9B;EAAED,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAQ,CAAE,EAC/B;EAAED,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAQ,CAAE,EAC/B;EAAED,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAQ,CAAE,EAC/B;EAAED,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAG,CAAE,EAC1B;EAAED,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAQ,CAAE,EAC/B;EAAED,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAQ,CAAE,EAC/B;EAAED,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAQ,CAAE,EAC/B;EAAED,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAQ,CAAE,EAC/B;EAAED,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAQ,CAAE,EAC/B;EAAED,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAQ,CAAE,EAC/B;EAAED,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAQ,CAAE,EAC/B;EAAED,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAQ,CAAE,CAAE;AAAA,CACpC;;AAED,IAAII,MAAM,GAAG,IAAIR,MAAM,CAAC;EACpBS,MAAM,EAAEV,WAAW,CAACU,MAAM;EAC1BC,OAAO,EAAE;CACZ,CAAC;AAEF,MAAMC,OAAO,GAAe,EAAE;AAC9B,MAAMC,WAAW,GAAe,EAAE;AAClC,IAAIC,iBAAiB,GAAQ,IAAI;AACjC,MAKaC,YAAY;EACrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAGxB,KAAAC,cAAc,GAAkB,EAAE;IAClC,KAAAC,UAAU,GAAkB,CACxB;MACIf,GAAG,EAAEgB,MAAM;MACXf,GAAG,EAAEe;KACR,CACJ;IAoSD,KAAAC,mBAAmB,GAAG,MAAK;MACvB,IAAI,CAACC,cAAc,CAACC,cAAc,CAAC,IAAI,CAAC;IAC5C,CAAC;IAED,KAAAC,qBAAqB,GAAG,MAAK;MACzB,IAAI,CAACF,cAAc,CAACC,cAAc,CAC9BE,MAAM,CAACC,IAAI,CAACC,OAAO,CAACC,WAAW,CAACC,MAAM,CACzC;IACL,CAAC;IAED,KAAAC,qBAAqB,GAAG,MAAK;MACzB,IAAI,CAACR,cAAc,CAACC,cAAc,CAC9BE,MAAM,CAACC,IAAI,CAACC,OAAO,CAACC,WAAW,CAACG,MAAM,CACzC;MAEDN,MAAM,CAACC,IAAI,CAACM,KAAK,CAACC,WAAW,CACzB,IAAI,CAACX,cAAc,EACnB,gBAAgB,EAChB,UAAUY,MAAW;QACjBtB,OAAO,CAACuB,IAAI,CAACD,MAAM,CAAC;QACpBE,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;QACxBH,MAAM,CAACD,WAAW,CAAC,gBAAgB,EAAE,MAAK;UACtC,MAAMK,YAAY,GAAGJ,MAAM,CAACK,SAAS,EAAE;UACvC,MAAMC,YAAY,GAAGN,MAAM,CAACO,SAAS,EAAE;UACvCjC,WAAW,CAACN,GAAG,CACX,CAACwC,IAAkC,EAAEC,KAAa,KAAI;YAClD,MAAMC,MAAM,GAAG,IAAInB,MAAM,CAACC,IAAI,CAACmB,MAAM,CAAC;cAClCC,QAAQ,EAAEJ,IAAI;cACdxC,GAAG;cACH6C,KAAK,EAAE,cAAcJ,KAAK;aAC7B,CAAC;YACF,MAAMK,cAAc,GAAGJ,MAAM,CAACK,WAAW,EAAE;YAE3C,IAAID,cAAc,IAAIV,YAAY,EAAE;cAChC,IACIb,MAAM,CAACC,IAAI,CAACwB,QAAQ,CAACC,SAAS,CAACC,sBAAsB,CACjDd,YAAY,EACZU,cAAc,CACjB,IAAIR,YAAY,EACnB;gBACEI,MAAM,CAACS,OAAO,CACV,uDAAuD,CAC1D;gBACDjB,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;gBACtBxB,WAAW,CAACsB,IAAI,CAACS,MAAM,CAAC;eAC3B,MAAM;gBACHA,MAAM,CAACS,OAAO,CACV,sDAAsD,CACzD;;aAER,MAAM;cACHjB,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;;UAEnC,CAAC,CACJ;QACL,CAAC,CAAC;MACN,CAAC,CACJ;IACL,CAAC;IAED,KAAAiB,sBAAsB,GAAG,MAAK;MAC1B1C,OAAO,CAAC2C,OAAO,CAAErB,MAAM,IAAI;QACvBA,MAAM,CAACsB,MAAM,CAAC,IAAI,CAAC;MACvB,CAAC,CAAC;MAEF5C,OAAO,CAAC6C,MAAM,GAAG,CAAC;IACtB,CAAC;IAED,KAAAC,oBAAoB,GAAG,MAAK;MACxB,IAAI,CAACpC,cAAc,CAACC,cAAc,CAC9BE,MAAM,CAACC,IAAI,CAACC,OAAO,CAACC,WAAW,CAAC+B,OAAO,CAC1C;IACL,CAAC;IACD,KAAAC,mBAAmB,GAAG,MAAK;MACvB,IAAI,CAACtC,cAAc,CAACC,cAAc,CAC9BE,MAAM,CAACC,IAAI,CAACC,OAAO,CAACC,WAAW,CAACiC,QAAQ,CAC3C;IACL,CAAC;IACD,KAAAC,wBAAwB,GAAG,MAAK;MAC5B,IAAI,CAACxC,cAAc,CAACC,cAAc,CAC9BE,MAAM,CAACC,IAAI,CAACC,OAAO,CAACC,WAAW,CAACmC,SAAS,CAC5C;IACL,CAAC;IAED,KAAAC,qBAAqB,GAAG,MAAK;MACzBnD,WAAW,CAAC0C,OAAO,CAAC,CAACb,IAAI,EAAEC,KAAK,KAC5BP,OAAO,CAACC,GAAG,CAAC,iBAAiBM,KAAK,EAAE,CAAC,CACxC;IACL,CAAC;EArYsC;EAYvCsB,QAAQA,CAAA;IACJ,IAAI,CAACC,IAAI,EAAE;EACf;EAEAA,IAAIA,CAAA;IAAA,IAAAC,KAAA;IACA,MAAMC,WAAW;MAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOlE,GAAW,EAAEC,GAAW,EAAI;QACnD,IAAI;UACA,MAAMkE,GAAG,GAAG,kDAAkDnE,GAAG,cAAcC,GAAG,EAAE;UACpF,MAAMmE,OAAO,GAAG;YACZC,MAAM,EAAE,KAAK;YACbC,OAAO,EAAE;cACL,gBAAgB,EACZ,oDAAoD;cACxD,iBAAiB,EAAE;;WAE1B;UACD,MAAMC,QAAQ,SAASC,KAAK,CAACL,GAAG,EAAEC,OAAO,CAAC;UAC1C,MAAMK,MAAM,SAASF,QAAQ,CAACG,IAAI,EAAE;UACpC1C,OAAO,CAACC,GAAG,CAACwC,MAAM,CAAC;UACnB,IAAIA,MAAM,CAACE,KAAK,EAAE;YACd,OAAOC,KAAK,CAAC,+BAA+B,CAAC;;UAEjD,OAAOA,KAAK,CAAC,8BAA8B,CAAC;SAC/C,CAAC,OAAOC,KAAK,EAAE;UACZ7C,OAAO,CAAC6C,KAAK,CAACA,KAAK,CAAC;;MAE5B,CAAC;MAAA,gBArBKb,WAAWA,CAAAc,EAAA,EAAAC,GAAA;QAAA,OAAAd,IAAA,CAAAe,KAAA,OAAAC,SAAA;MAAA;IAAA,GAqBhB;IAED5E,MAAM,CAAC6E,IAAI,EAAE,CAACC,IAAI,eAAAjB,iBAAA,CAAC,aAAW;MAC1B;MACA,MAAM;QAAEkB;MAAG,CAAE,SAAU/D,MAAM,CAACC,IAAI,CAAC+D,aAAa,CAC5C,MAAM,CACmB;MAC7BvF,GAAG,GAAG,IAAIsF,GAAG,CAACE,QAAQ,CAACC,cAAc,CAAC,KAAK,CAAgB,EAAE;QACzDC,MAAM,EAAEzF,UAAU;QAClB0F,IAAI,EAAE;OACT,CAAC;MACF;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA,MAAMC,OAAO,GAAG,IAAIrE,MAAM,CAACC,IAAI,CAACqE,OAAO,CAAC;QACpCC,KAAK,EAAEzF,cAAc;QACrB0F,WAAW,EAAE,SAAS;QACtBC,aAAa,EAAE,GAAG;QAClBC,YAAY,EAAE,CAAC;QACfC,SAAS,EAAE,SAAS;QACpBC,WAAW,EAAE;OAChB,CAAC;MAEFP,OAAO,CAAC7D,WAAW,CAAC,YAAY,EAAE,MAAK;QACnC6D,OAAO,CAACQ,WAAW,CAAC,IAAI,CAAC;MAC7B,CAAC,CAAC;MAEF;MACA,MAAMC,OAAO,GAAG/F,WAAW,CAACN,GAAG,CAC3B,CAACwC,IAAkC,EAAEC,KAAa,KAAI;QAClD,MAAMC,MAAM,GAAG,IAAInB,MAAM,CAACC,IAAI,CAACmB,MAAM,CAAC;UAClCC,QAAQ,EAAEJ,IAAI;UACdxC,GAAG;UACH6C,KAAK,EAAE,cAAcJ,KAAK;SAC7B,CAAC;QAEFC,MAAM,CAACX,WAAW,CAAC,YAAY,EAAE,MAAK;UAClC,IAAInB,iBAAiB,EAAE;YACnBA,iBAAiB,CAAC0F,KAAK,EAAE;;UAE7B,MAAMC,UAAU,GAAG,IAAIhF,MAAM,CAACC,IAAI,CAACgF,UAAU,CAAC;YAC1CC,OAAO,EACH,kDAAkD,GAClD;WACP,CAAC;UACFF,UAAU,CAACG,IAAI,CAAC1G,GAAG,EAAE0C,MAAM,CAAC;UAC5B9B,iBAAiB,GAAG2F,UAAU;UAE9BA,UAAU,CAACxE,WAAW,CAAC,UAAU,EAAE,MAAK;YACpC,MAAM4E,YAAY,GACdnB,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;YACnC,MAAMmB,cAAc,GAChBpB,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC;YAErC,IAAIkB,YAAY,EAAEE,SAAS,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE;cAC9CH,YAAY,CAACI,YAAY,CAAC,SAAS,EAAE,EAAE,CAAC;aAC3C,MAAM;cACHJ,YAAY,EAAEK,eAAe,CAAC,SAAS,CAAC;;YAG5CL,YAAY,EAAEM,gBAAgB,CAAC,QAAQ,EAAE,MAAK;cAC1C,IACIN,YAAY,CAACE,SAAS,CAACC,QAAQ,CAAC,UAAU,CAAC,EAC7C;gBACEH,YAAY,CAACE,SAAS,CAACK,MAAM,CAAC,UAAU,CAAC;gBACzCP,YAAY,EAAEK,eAAe,CAAC,SAAS,CAAC;gBACxCT,UAAU,CAACY,UAAU,EAAE;gBACvBzE,MAAM,CAAC0E,YAAY,CAAC,KAAK,CAAC;gBAC1BlF,OAAO,CAACC,GAAG,CAACO,MAAM,CAAC0E,YAAY,CAAC,KAAK,CAAC,CAAC;eAC1C,MAAM;gBACHT,YAAY,CAACE,SAAS,CAACQ,GAAG,CAAC,UAAU,CAAC;gBACtCV,YAAY,CAACI,YAAY,CACrB,SAAS,EACT,MAAM,CACT;gBACDrE,MAAM,CAAC0E,YAAY,CAAC,IAAI,CAAC;gBACzB1E,MAAM,CAAC4E,GAAG;;YAElB,CAAC,CAAC;YAEFV,cAAc,EAAEK,gBAAgB,CAAC,QAAQ,EAAE,MAAK;cAC5CvE,MAAM,CAACY,MAAM,CAAC,IAAI,CAAC;YACvB,CAAC,CAAC;UACN,CAAC,CAAC;QACN,CAAC,CAAC;QACF;QACA;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACJ,CAAC,CACJ;MAED;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MAEA;MACA;MACA;MAEA;MACA;MACA;MACA;MAEA;MACAsC,OAAO,CAACtC,MAAM,CAACtD,GAAG,CAAC;MAEnBiE,KAAI,CAAC7C,cAAc,GAAG,IAAIG,MAAM,CAACC,IAAI,CAACC,OAAO,CAAC8F,cAAc,CAAC;QACzDC,WAAW,EAAE,IAAI;QACjBC,cAAc,EAAE,KAAK;QACrBC,aAAa,EAAE;UACXxB,SAAS,EAAE,SAAS;UACpBC,WAAW,EAAE,CAAC;UACdF,YAAY,EAAE,CAAC;UACf0B,SAAS,EAAE,KAAK;UAChBC,QAAQ,EAAE,IAAI;UACdC,MAAM,EAAE;;OAEf,CAAC;MAEF;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA5D,KAAI,CAAC7C,cAAc,CAACkC,MAAM,CAACtD,GAAG,CAAC;IACnC,CAAC,EAAC;EACN;;AA5SSa,YAAY,C;mBAAZA,YAAY,EAAAiH,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAZpH,YAAY,C;QAAZA,YAAY;EAAAqH,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,sBAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCzDzBV,EAAA,CAAAY,cAAA,aAA+B;MAGnBZ,EAAA,CAAAa,UAAA,mBAAAC,8CAAA;QAAA,OAASH,GAAA,CAAAtH,mBAAA,EAAqB;MAAA,EAAC;MAI/B2G,EAAA,CAAAe,MAAA,aACJ;MAAAf,EAAA,CAAAgB,YAAA,EAAS;MACThB,EAAA,CAAAY,cAAA,gBAIC;MAHGZ,EAAA,CAAAa,UAAA,mBAAAI,8CAAA;QAAA,OAASN,GAAA,CAAAnH,qBAAA,EAAuB;MAAA,EAAC;MAIjCwG,EAAA,CAAAe,MAAA,qBACJ;MAAAf,EAAA,CAAAgB,YAAA,EAAS;MACThB,EAAA,CAAAY,cAAA,gBAIC;MAHGZ,EAAA,CAAAa,UAAA,mBAAAK,8CAAA;QAAA,OAASP,GAAA,CAAA7G,qBAAA,EAAuB;MAAA,EAAC;MAIjCkG,EAAA,CAAAe,MAAA,sBACJ;MAAAf,EAAA,CAAAgB,YAAA,EAAS;MACThB,EAAA,CAAAY,cAAA,gBAIC;MAHGZ,EAAA,CAAAa,UAAA,mBAAAM,8CAAA;QAAA,OAASR,GAAA,CAAAjF,oBAAA,EAAsB;MAAA,EAAC;MAIhCsE,EAAA,CAAAe,MAAA,qBACJ;MAAAf,EAAA,CAAAgB,YAAA,EAAS;MACThB,EAAA,CAAAY,cAAA,iBAIC;MAHGZ,EAAA,CAAAa,UAAA,mBAAAO,+CAAA;QAAA,OAAST,GAAA,CAAA/E,mBAAA,EAAqB;MAAA,EAAC;MAI/BoE,EAAA,CAAAe,MAAA,qBACJ;MAAAf,EAAA,CAAAgB,YAAA,EAAS;MACThB,EAAA,CAAAY,cAAA,iBAIC;MAHGZ,EAAA,CAAAa,UAAA,mBAAAQ,+CAAA;QAAA,OAASV,GAAA,CAAA7E,wBAAA,EAA0B;MAAA,EAAC;MAIpCkE,EAAA,CAAAe,MAAA,0BACJ;MAAAf,EAAA,CAAAgB,YAAA,EAAS;MACThB,EAAA,CAAAY,cAAA,iBAIC;MAHGZ,EAAA,CAAAa,UAAA,mBAAAS,+CAAA;QAAA,OAASX,GAAA,CAAArF,sBAAA,EAAwB;MAAA,EAAC;MAIlC0E,EAAA,CAAAe,MAAA,sBACJ;MAAAf,EAAA,CAAAgB,YAAA,EAAS;MACThB,EAAA,CAAAY,cAAA,iBAIC;MAHGZ,EAAA,CAAAa,UAAA,mBAAAU,+CAAA;QAAA,OAASZ,GAAA,CAAA3E,qBAAA,EAAuB;MAAA,EAAC;MAIjCgE,EAAA,CAAAe,MAAA,8BACJ;MAAAf,EAAA,CAAAgB,YAAA,EAAS;MAEbhB,EAAA,CAAAwB,SAAA,cAAoB;MACxBxB,EAAA,CAAAgB,YAAA,EAAM;;;;;SDHOjI,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}