{"ast":null,"code":"import _asyncToGenerator from \"/home/Workspace/FPT/AngularDemo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from 'src/environments/environment.development';\nimport { Loader } from '@googlemaps/js-api-loader';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet map;\nconst VietNamCor = {\n  lat: 15.9031,\n  lng: 105.8067\n};\nlet loader = new Loader({\n  apiKey: environment.apiKey,\n  version: 'weekly'\n});\nconst circles = [];\nconst blueMarkers = [];\nconst markers = [];\nlet currentInfoWindow = null;\nclass AppComponent {\n  constructor(http) {\n    this.http = http;\n    this.successMarkers = [];\n    this.coordinate = [{\n      lat: Number,\n      lng: Number\n    }];\n    this.detectWater = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (lat, lng) {\n        try {\n          const url = `https://isitwater-com.p.rapidapi.com/?latitude=${lat}&longitude=${lng}`;\n          const options = {\n            method: 'GET',\n            headers: {\n              'X-RapidAPI-Key': '911f81d9e3msh5f705b8931d758cp13855bjsn19b3ba12960e',\n              'X-RapidAPI-Host': 'isitwater-com.p.rapidapi.com'\n            }\n          };\n          const response = yield fetch(url, options);\n          const result = yield response.json();\n          if (result.water) {\n            return true;\n          }\n          return false;\n        } catch (error) {\n          console.error(error);\n          return undefined;\n        }\n      });\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    this.detectMarkersInCircle = (circleCenter, circleRadius) => {\n      markers.forEach(item => {\n        const markerPosition = item.getPosition();\n        if (markerPosition && circleCenter) {\n          if (google.maps.geometry.spherical.computeDistanceBetween(circleCenter, markerPosition) <= circleRadius) {\n            item.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');\n          } else {\n            item.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');\n          }\n        }\n      });\n    };\n    this.readFile = () => {\n      this.http.get('assets/Book1.csv', {\n        responseType: 'text'\n      }).subscribe(data => {\n        this.result = data.split('\\n');\n        const markers = this.result.map((item, index) => {\n          this.coordinate.push({\n            lat: item.split(',')[0],\n            lng: item.split(',')[1]\n          });\n          const marker = new google.maps.Marker({\n            position: {\n              lat: Number(item.split(',')[0]),\n              lng: Number(item.split(',')[1])\n            },\n            map,\n            title: `Item index ${index}`\n          });\n          return marker;\n        });\n      }, error => console.log(error.error));\n    };\n    this.handleDrawHandClick = () => {\n      this.drawingManager.setDrawingMode(null);\n    };\n    this.handleDrawMarkerClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.MARKER);\n      google.maps.event.addListener(this.drawingManager, 'markercomplete', function (marker) {\n        marker.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');\n        markers.push(marker);\n        marker.addListener('rightclick', () => {\n          if (currentInfoWindow) {\n            currentInfoWindow.close();\n          }\n          const infowindow = new google.maps.InfoWindow({\n            content: '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' + '<div><input type=\"checkbox\" id=\"remove\">Remove</div>'\n          });\n          infowindow.open(map, marker);\n          currentInfoWindow = infowindow;\n          infowindow.addListener('domready', () => {\n            const editCheckbox = document.getElementById('edit');\n            const removeCheckbox = document.getElementById('remove');\n            if (marker.getDraggable()) {\n              editCheckbox?.setAttribute('checked', 'true');\n            } else {\n              editCheckbox?.removeAttribute('checked');\n            }\n            editCheckbox?.addEventListener('change', () => {\n              if (marker.getDraggable()) {\n                editCheckbox?.removeAttribute('checked');\n                marker.setDraggable(null);\n              } else {\n                editCheckbox.setAttribute('checked', 'true');\n                marker.setDraggable(true);\n              }\n            });\n            removeCheckbox?.addEventListener('change', () => {\n              marker.setMap(null);\n            });\n          });\n        });\n      });\n    };\n    this.handleDrawCircleClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.CIRCLE);\n      google.maps.event.addListener(this.drawingManager, 'circlecomplete', function (circle) {\n        circles.push(circle);\n        const circleCenter = circle.getCenter();\n        const circleRadius = circle.getRadius();\n      });\n    };\n    this.handleClearCircleClick = () => {\n      circles.forEach(circle => {\n        circle.setMap(null);\n      });\n      circles.length = 0;\n    };\n    this.handleDrawShapeClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);\n      google.maps.event.addListener(this.drawingManager, 'polygoncomplete', function (polygon) {\n        polygon.addListener('rightclick', function (event) {\n          if (currentInfoWindow) {\n            currentInfoWindow.close();\n          }\n          const infowindow = new google.maps.InfoWindow({\n            content: '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' + '<div><input type=\"checkbox\" id=\"remove\">Remove</div>'\n          });\n          infowindow.setPosition(event.latLng);\n          infowindow.open(map);\n          currentInfoWindow = infowindow;\n          infowindow.addListener('domready', () => {\n            const editCheckbox = document.getElementById('edit');\n            const removeCheckbox = document.getElementById('remove');\n            if (polygon.getDraggable()) {\n              editCheckbox?.setAttribute('checked', 'true');\n            } else {\n              editCheckbox?.removeAttribute('checked');\n            }\n            editCheckbox?.addEventListener('change', () => {\n              if (polygon.getDraggable()) {\n                editCheckbox?.removeAttribute('checked');\n                polygon.setDraggable(null);\n              } else {\n                editCheckbox.setAttribute('checked', 'true');\n                polygon.setDraggable(true);\n              }\n            });\n            removeCheckbox?.addEventListener('change', () => {\n              polygon.setMap(null);\n              infowindow.close();\n            });\n          });\n        });\n      });\n    };\n    this.handleDrawLineClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYLINE);\n      google.maps.event.addListener(this.drawingManager, 'polylinecomplete', function (line) {\n        line.addListener('rightclick', function (event) {\n          if (currentInfoWindow) {\n            currentInfoWindow.close();\n          }\n          const infowindow = new google.maps.InfoWindow({\n            content: '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' + '<div><input type=\"checkbox\" id=\"remove\">Remove</div>'\n          });\n          infowindow.setPosition(event.latLng);\n          infowindow.open(map);\n          currentInfoWindow = infowindow;\n          infowindow.addListener('domready', () => {\n            const editCheckbox = document.getElementById('edit');\n            const removeCheckbox = document.getElementById('remove');\n            if (line.getDraggable()) {\n              editCheckbox?.setAttribute('checked', 'true');\n            } else {\n              editCheckbox?.removeAttribute('checked');\n            }\n            editCheckbox?.addEventListener('change', () => {\n              if (line.getDraggable()) {\n                editCheckbox?.removeAttribute('checked');\n                line.setDraggable(null);\n              } else {\n                editCheckbox.setAttribute('checked', 'true');\n                line.setDraggable(true);\n              }\n            });\n            removeCheckbox?.addEventListener('change', () => {\n              line.setMap(null);\n              infowindow.close();\n            });\n          });\n        });\n      });\n    };\n    this.handleDrawRectangleClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.RECTANGLE);\n      google.maps.event.addListener(this.drawingManager, 'rectanglecomplete', function (rectangle) {\n        rectangle.addListener('rightclick', function (event) {\n          if (currentInfoWindow) {\n            currentInfoWindow.close();\n          }\n          const infowindow = new google.maps.InfoWindow({\n            content: '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' + '<div><input type=\"checkbox\" id=\"remove\">Remove</div>'\n          });\n          infowindow.setPosition(event.latLng);\n          infowindow.open(map);\n          currentInfoWindow = infowindow;\n          infowindow.addListener('domready', () => {\n            const editCheckbox = document.getElementById('edit');\n            const removeCheckbox = document.getElementById('remove');\n            if (rectangle.getDraggable()) {\n              editCheckbox?.setAttribute('checked', 'true');\n            } else {\n              editCheckbox?.removeAttribute('checked');\n            }\n            editCheckbox?.addEventListener('change', () => {\n              if (rectangle.getDraggable()) {\n                editCheckbox?.removeAttribute('checked');\n                rectangle.setDraggable(null);\n              } else {\n                editCheckbox.setAttribute('checked', 'true');\n                rectangle.setDraggable(true);\n              }\n            });\n            removeCheckbox?.addEventListener('change', () => {\n              rectangle.setMap(null);\n              infowindow.close();\n            });\n          });\n        });\n      });\n    };\n    this.handleShowBlueMarkers = () => {\n      blueMarkers.forEach((item, index) => console.log(`item at index ${index}`));\n    };\n  }\n  ngOnInit() {\n    this.demo();\n  }\n  demo() {\n    var _this = this;\n    loader.load().then( /*#__PURE__*/_asyncToGenerator(function* () {\n      //* initial map element\n      const {\n        Map\n      } = yield google.maps.importLibrary('maps');\n      map = new Map(document.getElementById('map'), {\n        center: VietNamCor,\n        zoom: 8\n      });\n      _this.drawingManager = new google.maps.drawing.DrawingManager({\n        drawingMode: null,\n        drawingControl: false,\n        circleOptions: {\n          fillColor: '#ffff00',\n          fillOpacity: 1,\n          strokeWeight: 5,\n          clickable: false,\n          editable: true,\n          zIndex: 1\n        }\n      });\n      _this.drawingManager.setMap(map);\n    }));\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 24,\n  vars: 0,\n  consts: [[1, \"ms-4\", \"d-flex\", \"gap-3\"], [1, \"d-flex\", \"flex-column\", \"gap-3\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"dropdown\"], [\"type\", \"button\", \"data-bs-toggle\", \"dropdown\", \"aria-expanded\", \"false\", 1, \"btn\", \"btn-secondary\", \"dropdown-toggle\"], [1, \"dropdown-menu\"], [1, \"dropdown-item\", 3, \"click\"], [\"id\", \"map\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_2_listener() {\n        return ctx.handleDrawMarkerClick();\n      });\n      i0.ɵɵtext(3, \"Markers\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"button\", 4);\n      i0.ɵɵtext(6, \" Shapes \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"ul\", 5)(8, \"li\")(9, \"a\", 6);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_a_click_9_listener() {\n        return ctx.handleDrawHandClick();\n      });\n      i0.ɵɵtext(10, \"Hand\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"li\")(12, \"a\", 6);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_a_click_12_listener() {\n        return ctx.handleDrawCircleClick();\n      });\n      i0.ɵɵtext(13, \"Circle\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(14, \"li\")(15, \"a\", 6);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_a_click_15_listener() {\n        return ctx.handleDrawRectangleClick();\n      });\n      i0.ɵɵtext(16, \"Rectangle\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(17, \"li\")(18, \"a\", 6);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_a_click_18_listener() {\n        return ctx.handleDrawLineClick();\n      });\n      i0.ɵɵtext(19, \"Polyline\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(20, \"li\")(21, \"a\", 6);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_a_click_21_listener() {\n        return ctx.handleDrawShapeClick();\n      });\n      i0.ɵɵtext(22, \"Polygon\");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵelement(23, \"div\", 7);\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"#map[_ngcontent-%COMP%] {\\r\\n    height: 100dvh;\\r\\n    width: 100%;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxjQUFjO0lBQ2QsV0FBVztBQUNmIiwic291cmNlc0NvbnRlbnQiOlsiI21hcCB7XHJcbiAgICBoZWlnaHQ6IDEwMGR2aDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { AppComponent };","map":{"version":3,"names":["environment","Loader","map","VietNamCor","lat","lng","loader","apiKey","version","circles","blueMarkers","markers","currentInfoWindow","AppComponent","constructor","http","successMarkers","coordinate","Number","detectWater","_ref","_asyncToGenerator","url","options","method","headers","response","fetch","result","json","water","error","console","undefined","_x","_x2","apply","arguments","detectMarkersInCircle","circleCenter","circleRadius","forEach","item","markerPosition","getPosition","google","maps","geometry","spherical","computeDistanceBetween","setIcon","readFile","get","responseType","subscribe","data","split","index","push","marker","Marker","position","title","log","handleDrawHandClick","drawingManager","setDrawingMode","handleDrawMarkerClick","drawing","OverlayType","MARKER","event","addListener","close","infowindow","InfoWindow","content","open","editCheckbox","document","getElementById","removeCheckbox","getDraggable","setAttribute","removeAttribute","addEventListener","setDraggable","setMap","handleDrawCircleClick","CIRCLE","circle","getCenter","getRadius","handleClearCircleClick","length","handleDrawShapeClick","POLYGON","polygon","setPosition","latLng","handleDrawLineClick","POLYLINE","line","handleDrawRectangleClick","RECTANGLE","rectangle","handleShowBlueMarkers","ngOnInit","demo","_this","load","then","Map","importLibrary","center","zoom","DrawingManager","drawingMode","drawingControl","circleOptions","fillColor","fillOpacity","strokeWeight","clickable","editable","zIndex","i0","ɵɵdirectiveInject","i1","HttpClient","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","AppComponent_Template_button_click_2_listener","ɵɵtext","ɵɵelementEnd","AppComponent_Template_a_click_9_listener","AppComponent_Template_a_click_12_listener","AppComponent_Template_a_click_15_listener","AppComponent_Template_a_click_18_listener","AppComponent_Template_a_click_21_listener","ɵɵelement"],"sources":["/home/Workspace/FPT/AngularDemo/src/app/app.component.ts","/home/Workspace/FPT/AngularDemo/src/app/app.component.html"],"sourcesContent":["import { environment } from 'src/environments/environment.development';\nimport { Component, OnInit } from '@angular/core';\nimport { Loader } from '@googlemaps/js-api-loader';\nimport * as _ from 'lodash';\nimport { HttpClient } from '@angular/common/http';\n\nlet map: google.maps.Map;\nconst VietNamCor = { lat: 15.9031, lng: 105.8067 };\n\nlet loader = new Loader({\n    apiKey: environment.apiKey,\n    version: 'weekly',\n});\n\nconst circles: Array<any> = [];\nconst blueMarkers: Array<any> = [];\nconst markers: Array<any> = [];\nlet currentInfoWindow: any = null;\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnInit {\n    constructor(private http: HttpClient) {}\n\n    result: any;\n    successMarkers: Array<Object> = [];\n    coordinate: Array<Object> = [\n        {\n            lat: Number,\n            lng: Number,\n        },\n    ];\n    drawingManager: any;\n\n    ngOnInit(): void {\n        this.demo();\n    }\n\n    detectWater = async (lat?: number, lng?: number) => {\n        try {\n            const url = `https://isitwater-com.p.rapidapi.com/?latitude=${lat}&longitude=${lng}`;\n            const options = {\n                method: 'GET',\n                headers: {\n                    'X-RapidAPI-Key':\n                        '911f81d9e3msh5f705b8931d758cp13855bjsn19b3ba12960e',\n                    'X-RapidAPI-Host': 'isitwater-com.p.rapidapi.com',\n                },\n            };\n            const response = await fetch(url, options);\n            const result = await response.json();\n            if (result.water) {\n                return true;\n            }\n            return false;\n        } catch (error) {\n            console.error(error);\n            return undefined;\n        }\n    };\n\n    detectMarkersInCircle = (circleCenter: any, circleRadius: any) => {\n        markers.forEach((item) => {\n            const markerPosition = item.getPosition();\n\n            if (markerPosition && circleCenter) {\n                if (\n                    google.maps.geometry.spherical.computeDistanceBetween(\n                        circleCenter,\n                        markerPosition\n                    ) <= circleRadius\n                ) {\n                    item.setIcon(\n                        'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n                    );\n                } else {\n                    item.setIcon(\n                        'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n                    );\n                }\n            }\n        });\n    };\n\n    readFile = () => {\n        this.http.get('assets/Book1.csv', { responseType: 'text' }).subscribe(\n            (data: any) => {\n                this.result = data.split('\\n');\n\n                const markers = this.result.map((item: any, index: number) => {\n                    this.coordinate.push({\n                        lat: item.split(',')[0],\n                        lng: item.split(',')[1],\n                    });\n\n                    const marker = new google.maps.Marker({\n                        position: {\n                            lat: Number(item.split(',')[0]),\n                            lng: Number(item.split(',')[1]),\n                        },\n                        map,\n                        title: `Item index ${index}`,\n                    });\n\n                    return marker;\n                });\n            },\n            (error: any) => console.log(error.error)\n        );\n    };\n\n    demo() {\n        loader.load().then(async () => {\n            //* initial map element\n            const { Map } = (await google.maps.importLibrary(\n                'maps'\n            )) as google.maps.MapsLibrary;\n            map = new Map(document.getElementById('map') as HTMLElement, {\n                center: VietNamCor,\n                zoom: 8,\n            });\n\n            this.drawingManager = new google.maps.drawing.DrawingManager({\n                drawingMode: null,\n                drawingControl: false,\n                circleOptions: {\n                    fillColor: '#ffff00',\n                    fillOpacity: 1,\n                    strokeWeight: 5,\n                    clickable: false,\n                    editable: true,\n                    zIndex: 1,\n                },\n            });\n            this.drawingManager.setMap(map);\n        });\n    }\n\n    handleDrawHandClick = () => {\n        this.drawingManager.setDrawingMode(null);\n    };\n\n    handleDrawMarkerClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.MARKER\n        );\n\n        google.maps.event.addListener(\n            this.drawingManager,\n            'markercomplete',\n            function (marker: any) {\n                marker.setIcon(\n                    'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n                );\n                markers.push(marker);\n\n                marker.addListener('rightclick', () => {\n                    if (currentInfoWindow) {\n                        currentInfoWindow.close();\n                    }\n                    const infowindow = new google.maps.InfoWindow({\n                        content:\n                            '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' +\n                            '<div><input type=\"checkbox\" id=\"remove\">Remove</div>',\n                    });\n\n                    infowindow.open(map, marker);\n                    currentInfoWindow = infowindow;\n\n                    infowindow.addListener('domready', () => {\n                        const editCheckbox = document.getElementById('edit');\n                        const removeCheckbox =\n                            document.getElementById('remove');\n\n                        if (marker.getDraggable()) {\n                            editCheckbox?.setAttribute('checked', 'true');\n                        } else {\n                            editCheckbox?.removeAttribute('checked');\n                        }\n\n                        editCheckbox?.addEventListener('change', () => {\n                            if (marker.getDraggable()) {\n                                editCheckbox?.removeAttribute('checked');\n                                marker.setDraggable(null);\n                            } else {\n                                editCheckbox.setAttribute('checked', 'true');\n                                marker.setDraggable(true);\n                            }\n                        });\n\n                        removeCheckbox?.addEventListener('change', () => {\n                            marker.setMap(null);\n                        });\n                    });\n                });\n            }\n        );\n    };\n\n    handleDrawCircleClick = () => {\n        \n\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.CIRCLE\n        );\n\n        google.maps.event.addListener(\n            this.drawingManager,\n            'circlecomplete',\n            function (circle: any) {\n                circles.push(circle);\n\n                const circleCenter = circle.getCenter();\n                const circleRadius = circle.getRadius();\n            }\n        );\n    };\n\n    handleClearCircleClick = () => {\n        circles.forEach((circle) => {\n            circle.setMap(null);\n        });\n\n        circles.length = 0;\n    };\n\n    handleDrawShapeClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.POLYGON\n        );\n\n        google.maps.event.addListener(\n            this.drawingManager,\n            'polygoncomplete',\n            function (polygon: any) {\n                polygon.addListener('rightclick', function (event: any) {\n                    if (currentInfoWindow) {\n                        currentInfoWindow.close();\n                    }\n                    const infowindow = new google.maps.InfoWindow({\n                        content:\n                            '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' +\n                            '<div><input type=\"checkbox\" id=\"remove\">Remove</div>',\n                    });\n\n                    infowindow.setPosition(event.latLng);\n                    infowindow.open(map);\n                    currentInfoWindow = infowindow;\n\n                    infowindow.addListener('domready', () => {\n                        const editCheckbox = document.getElementById('edit');\n                        const removeCheckbox =\n                            document.getElementById('remove');\n\n                        if (polygon.getDraggable()) {\n                            editCheckbox?.setAttribute('checked', 'true');\n                        } else {\n                            editCheckbox?.removeAttribute('checked');\n                        }\n\n                        editCheckbox?.addEventListener('change', () => {\n                            if (polygon.getDraggable()) {\n                                editCheckbox?.removeAttribute('checked');\n                                polygon.setDraggable(null);\n                            } else {\n                                editCheckbox.setAttribute('checked', 'true');\n                                polygon.setDraggable(true);\n                            }\n                        });\n\n                        removeCheckbox?.addEventListener('change', () => {\n                            polygon.setMap(null);\n                            infowindow.close();\n                        });\n                    });\n                });\n            }\n        );\n    };\n\n    handleDrawLineClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.POLYLINE\n        );\n\n        google.maps.event.addListener(\n            this.drawingManager,\n            'polylinecomplete',\n            function (line: any) {\n                line.addListener('rightclick', function (event: any) {\n                    if (currentInfoWindow) {\n                        currentInfoWindow.close();\n                    }\n                    const infowindow = new google.maps.InfoWindow({\n                        content:\n                            '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' +\n                            '<div><input type=\"checkbox\" id=\"remove\">Remove</div>',\n                    });\n\n                    infowindow.setPosition(event.latLng);\n                    infowindow.open(map);\n                    currentInfoWindow = infowindow;\n\n                    infowindow.addListener('domready', () => {\n                        const editCheckbox = document.getElementById('edit');\n                        const removeCheckbox =\n                            document.getElementById('remove');\n\n                        if (line.getDraggable()) {\n                            editCheckbox?.setAttribute('checked', 'true');\n                        } else {\n                            editCheckbox?.removeAttribute('checked');\n                        }\n\n                        editCheckbox?.addEventListener('change', () => {\n                            if (line.getDraggable()) {\n                                editCheckbox?.removeAttribute('checked');\n                                line.setDraggable(null);\n                            } else {\n                                editCheckbox.setAttribute('checked', 'true');\n                                line.setDraggable(true);\n                            }\n                        });\n\n                        removeCheckbox?.addEventListener('change', () => {\n                            line.setMap(null);\n                            infowindow.close();\n                        });\n                    });\n                });\n            }\n        );\n    };\n    handleDrawRectangleClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.RECTANGLE\n        );\n\n        google.maps.event.addListener(\n            this.drawingManager,\n            'rectanglecomplete',\n            function (rectangle: any) {\n                rectangle.addListener('rightclick', function (event: any) {\n                    if (currentInfoWindow) {\n                        currentInfoWindow.close();\n                    }\n                    const infowindow = new google.maps.InfoWindow({\n                        content:\n                            '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' +\n                            '<div><input type=\"checkbox\" id=\"remove\">Remove</div>',\n                    });\n\n                    infowindow.setPosition(event.latLng);\n                    infowindow.open(map);\n                    currentInfoWindow = infowindow;\n\n                    infowindow.addListener('domready', () => {\n                        const editCheckbox = document.getElementById('edit');\n                        const removeCheckbox =\n                            document.getElementById('remove');\n\n                        if (rectangle.getDraggable()) {\n                            editCheckbox?.setAttribute('checked', 'true');\n                        } else {\n                            editCheckbox?.removeAttribute('checked');\n                        }\n\n                        editCheckbox?.addEventListener('change', () => {\n                            if (rectangle.getDraggable()) {\n                                editCheckbox?.removeAttribute('checked');\n                                rectangle.setDraggable(null);\n                            } else {\n                                editCheckbox.setAttribute('checked', 'true');\n                                rectangle.setDraggable(true);\n                            }\n                        });\n\n                        removeCheckbox?.addEventListener('change', () => {\n                            rectangle.setMap(null);\n                            infowindow.close();\n                        });\n                    });\n                });\n            }\n        );\n    };\n\n    handleShowBlueMarkers = () => {\n        blueMarkers.forEach((item, index) =>\n            console.log(`item at index ${index}`)\n        );\n    };\n}\n","<div class=\"ms-4 d-flex gap-3\">\n    <div class=\"d-flex flex-column gap-3\">\n        <button type=\"button\" class=\"btn btn-primary\" (click)=\"handleDrawMarkerClick()\">Markers</button>\n        <div class=\"dropdown\">\n            <button\n                class=\"btn btn-secondary dropdown-toggle\"\n                type=\"button\"\n                data-bs-toggle=\"dropdown\"\n                aria-expanded=\"false\"\n            >\n                Shapes\n            </button>\n            <ul class=\"dropdown-menu\">\n                <li>\n                    <a\n                        class=\"dropdown-item\"\n                        (click)=\"handleDrawHandClick()\"\n                        >Hand</a\n                    >\n                </li>\n                <li>\n                    <a\n                        class=\"dropdown-item\"\n                        (click)=\"handleDrawCircleClick()\"\n                        >Circle</a\n                    >\n                </li>\n                <li>\n                    <a\n                        class=\"dropdown-item\"\n                        (click)=\"handleDrawRectangleClick()\"\n                        >Rectangle</a\n                    >\n                </li>\n                <li>\n                    <a\n                        class=\"dropdown-item\"\n                        (click)=\"handleDrawLineClick()\"\n                        >Polyline</a\n                    >\n                </li>\n                <li>\n                    <a\n                        class=\"dropdown-item\"\n                        (click)=\"handleDrawShapeClick()\"\n                        >Polygon</a\n                    >\n                </li>\n            </ul>\n        </div>\n    </div>\n    <div id=\"map\"></div>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}