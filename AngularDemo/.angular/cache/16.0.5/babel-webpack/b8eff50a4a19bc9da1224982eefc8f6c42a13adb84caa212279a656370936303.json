{"ast":null,"code":"import equal from 'fast-deep-equal';\nimport SuperCluster from 'supercluster';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\n/**\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass MarkerUtils {\n  static isAdvancedMarkerAvailable(map) {\n    return google.maps.marker && map.getMapCapabilities().isAdvancedMarkersAvailable === true;\n  }\n  static isAdvancedMarker(marker) {\n    return google.maps.marker && marker instanceof google.maps.marker.AdvancedMarkerElement;\n  }\n  static setMap(marker, map) {\n    if (this.isAdvancedMarker(marker)) {\n      marker.map = map;\n    } else {\n      marker.setMap(map);\n    }\n  }\n  static getPosition(marker) {\n    // SuperClusterAlgorithm.calculate expects a LatLng instance so we fake it for Adv Markers\n    if (this.isAdvancedMarker(marker)) {\n      if (marker.position) {\n        if (marker.position instanceof google.maps.LatLng) {\n          return marker.position;\n        }\n        // since we can't cast to LatLngLiteral for reasons =(\n        if (marker.position.lat && marker.position.lng) {\n          return new google.maps.LatLng(marker.position.lat, marker.position.lng);\n        }\n      }\n      return new google.maps.LatLng(null);\n    }\n    return marker.getPosition();\n  }\n  static getVisible(marker) {\n    if (this.isAdvancedMarker(marker)) {\n      /**\n       * Always return true for Advanced Markers because the clusterer\n       * uses getVisible as a way to count legacy markers not as an actual\n       * indicator of visibility for some reason. Even when markers are hidden\n       * Marker.getVisible returns `true` and this is used to set the marker count\n       * on the cluster. See the behavior of Cluster.count\n       */\n      return true;\n    }\n    return marker.getVisible();\n  }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Cluster {\n  constructor({\n    markers,\n    position\n  }) {\n    this.markers = markers;\n    if (position) {\n      if (position instanceof google.maps.LatLng) {\n        this._position = position;\n      } else {\n        this._position = new google.maps.LatLng(position);\n      }\n    }\n  }\n  get bounds() {\n    if (this.markers.length === 0 && !this._position) {\n      return;\n    }\n    const bounds = new google.maps.LatLngBounds(this._position, this._position);\n    for (const marker of this.markers) {\n      bounds.extend(MarkerUtils.getPosition(marker));\n    }\n    return bounds;\n  }\n  get position() {\n    return this._position || this.bounds.getCenter();\n  }\n  /**\n   * Get the count of **visible** markers.\n   */\n  get count() {\n    return this.markers.filter(m => MarkerUtils.getVisible(m)).length;\n  }\n  /**\n   * Add a marker to the cluster.\n   */\n  push(marker) {\n    this.markers.push(marker);\n  }\n  /**\n   * Cleanup references and remove marker from map.\n   */\n  delete() {\n    if (this.marker) {\n      MarkerUtils.setMap(this.marker, null);\n      this.marker = undefined;\n    }\n    this.markers.length = 0;\n  }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns the markers visible in a padded map viewport\n *\n * @param map\n * @param mapCanvasProjection\n * @param markers The list of marker to filter\n * @param viewportPaddingPixels The padding in pixel\n * @returns The list of markers in the padded viewport\n */\nconst filterMarkersToPaddedViewport = (map, mapCanvasProjection, markers, viewportPaddingPixels) => {\n  const extendedMapBounds = extendBoundsToPaddedViewport(map.getBounds(), mapCanvasProjection, viewportPaddingPixels);\n  return markers.filter(marker => extendedMapBounds.contains(MarkerUtils.getPosition(marker)));\n};\n/**\n * Extends a bounds by a number of pixels in each direction\n */\nconst extendBoundsToPaddedViewport = (bounds, projection, numPixels) => {\n  const {\n    northEast,\n    southWest\n  } = latLngBoundsToPixelBounds(bounds, projection);\n  const extendedPixelBounds = extendPixelBounds({\n    northEast,\n    southWest\n  }, numPixels);\n  return pixelBoundsToLatLngBounds(extendedPixelBounds, projection);\n};\n/**\n * Returns the distance between 2 positions.\n *\n * @hidden\n */\nconst distanceBetweenPoints = (p1, p2) => {\n  const R = 6371; // Radius of the Earth in km\n  const dLat = (p2.lat - p1.lat) * Math.PI / 180;\n  const dLon = (p2.lng - p1.lng) * Math.PI / 180;\n  const sinDLat = Math.sin(dLat / 2);\n  const sinDLon = Math.sin(dLon / 2);\n  const a = sinDLat * sinDLat + Math.cos(p1.lat * Math.PI / 180) * Math.cos(p2.lat * Math.PI / 180) * sinDLon * sinDLon;\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c;\n};\n/**\n * Converts a LatLng bound to pixels.\n *\n * @hidden\n */\nconst latLngBoundsToPixelBounds = (bounds, projection) => {\n  return {\n    northEast: projection.fromLatLngToDivPixel(bounds.getNorthEast()),\n    southWest: projection.fromLatLngToDivPixel(bounds.getSouthWest())\n  };\n};\n/**\n * Extends a pixel bounds by numPixels in all directions.\n *\n * @hidden\n */\nconst extendPixelBounds = ({\n  northEast,\n  southWest\n}, numPixels) => {\n  northEast.x += numPixels;\n  northEast.y -= numPixels;\n  southWest.x -= numPixels;\n  southWest.y += numPixels;\n  return {\n    northEast,\n    southWest\n  };\n};\n/**\n * @hidden\n */\nconst pixelBoundsToLatLngBounds = ({\n  northEast,\n  southWest\n}, projection) => {\n  const sw = projection.fromDivPixelToLatLng(southWest);\n  const ne = projection.fromDivPixelToLatLng(northEast);\n  return new google.maps.LatLngBounds(sw, ne);\n};\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @hidden\n */\nclass AbstractAlgorithm {\n  constructor({\n    maxZoom = 16\n  }) {\n    this.maxZoom = maxZoom;\n  }\n  /**\n   * Helper function to bypass clustering based upon some map state such as\n   * zoom, number of markers, etc.\n   *\n   * ```typescript\n   *  cluster({markers, map}: AlgorithmInput): Cluster[] {\n   *    if (shouldBypassClustering(map)) {\n   *      return this.noop({markers})\n   *    }\n   * }\n   * ```\n   */\n  noop({\n    markers\n  }) {\n    return noop(markers);\n  }\n}\n/**\n * Abstract viewport algorithm proves a class to filter markers by a padded\n * viewport. This is a common optimization.\n *\n * @hidden\n */\nclass AbstractViewportAlgorithm extends AbstractAlgorithm {\n  constructor(_a) {\n    var {\n        viewportPadding = 60\n      } = _a,\n      options = __rest(_a, [\"viewportPadding\"]);\n    super(options);\n    this.viewportPadding = 60;\n    this.viewportPadding = viewportPadding;\n  }\n  calculate({\n    markers,\n    map,\n    mapCanvasProjection\n  }) {\n    if (map.getZoom() >= this.maxZoom) {\n      return {\n        clusters: this.noop({\n          markers\n        }),\n        changed: false\n      };\n    }\n    return {\n      clusters: this.cluster({\n        markers: filterMarkersToPaddedViewport(map, mapCanvasProjection, markers, this.viewportPadding),\n        map,\n        mapCanvasProjection\n      })\n    };\n  }\n}\n/**\n * @hidden\n */\nconst noop = markers => {\n  const clusters = markers.map(marker => new Cluster({\n    position: MarkerUtils.getPosition(marker),\n    markers: [marker]\n  }));\n  return clusters;\n};\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The default Grid algorithm historically used in Google Maps marker\n * clustering.\n *\n * The Grid algorithm does not implement caching and markers may flash as the\n * viewport changes. Instead use {@link SuperClusterAlgorithm}.\n */\nclass GridAlgorithm extends AbstractViewportAlgorithm {\n  constructor(_a) {\n    var {\n        maxDistance = 40000,\n        gridSize = 40\n      } = _a,\n      options = __rest(_a, [\"maxDistance\", \"gridSize\"]);\n    super(options);\n    this.clusters = [];\n    this.maxDistance = maxDistance;\n    this.gridSize = gridSize;\n    this.state = {\n      zoom: null\n    };\n  }\n  calculate({\n    markers,\n    map,\n    mapCanvasProjection\n  }) {\n    const state = {\n      zoom: map.getZoom()\n    };\n    let changed = false;\n    if (this.state.zoom > this.maxZoom && state.zoom > this.maxZoom) ;else {\n      changed = !equal(this.state, state);\n    }\n    this.state = state;\n    if (map.getZoom() >= this.maxZoom) {\n      return {\n        clusters: this.noop({\n          markers\n        }),\n        changed\n      };\n    }\n    return {\n      clusters: this.cluster({\n        markers: filterMarkersToPaddedViewport(map, mapCanvasProjection, markers, this.viewportPadding),\n        map,\n        mapCanvasProjection\n      })\n    };\n  }\n  cluster({\n    markers,\n    map,\n    mapCanvasProjection\n  }) {\n    this.clusters = [];\n    markers.forEach(marker => {\n      this.addToClosestCluster(marker, map, mapCanvasProjection);\n    });\n    return this.clusters;\n  }\n  addToClosestCluster(marker, map, projection) {\n    let maxDistance = this.maxDistance; // Some large number\n    let cluster = null;\n    for (let i = 0; i < this.clusters.length; i++) {\n      const candidate = this.clusters[i];\n      const distance = distanceBetweenPoints(candidate.bounds.getCenter().toJSON(), MarkerUtils.getPosition(marker).toJSON());\n      if (distance < maxDistance) {\n        maxDistance = distance;\n        cluster = candidate;\n      }\n    }\n    if (cluster && extendBoundsToPaddedViewport(cluster.bounds, projection, this.gridSize).contains(MarkerUtils.getPosition(marker))) {\n      cluster.push(marker);\n    } else {\n      const cluster = new Cluster({\n        markers: [marker]\n      });\n      this.clusters.push(cluster);\n    }\n  }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Noop algorithm does not generate any clusters or filter markers by the an extended viewport.\n */\nclass NoopAlgorithm extends AbstractAlgorithm {\n  constructor(_a) {\n    var options = __rest(_a, []);\n    super(options);\n  }\n  calculate({\n    markers,\n    map,\n    mapCanvasProjection\n  }) {\n    return {\n      clusters: this.cluster({\n        markers,\n        map,\n        mapCanvasProjection\n      }),\n      changed: false\n    };\n  }\n  cluster(input) {\n    return this.noop(input);\n  }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A very fast JavaScript algorithm for geospatial point clustering using KD trees.\n *\n * @see https://www.npmjs.com/package/supercluster for more information on options.\n */\nclass SuperClusterAlgorithm extends AbstractAlgorithm {\n  constructor(_a) {\n    var {\n        maxZoom,\n        radius = 60\n      } = _a,\n      options = __rest(_a, [\"maxZoom\", \"radius\"]);\n    super({\n      maxZoom\n    });\n    this.superCluster = new SuperCluster(Object.assign({\n      maxZoom: this.maxZoom,\n      radius\n    }, options));\n    this.state = {\n      zoom: null\n    };\n  }\n  calculate(input) {\n    let changed = false;\n    const state = {\n      zoom: input.map.getZoom()\n    };\n    if (!equal(input.markers, this.markers)) {\n      changed = true;\n      // TODO use proxy to avoid copy?\n      this.markers = [...input.markers];\n      const points = this.markers.map(marker => {\n        const position = MarkerUtils.getPosition(marker);\n        const coordinates = [position.lng(), position.lat()];\n        return {\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates\n          },\n          properties: {\n            marker\n          }\n        };\n      });\n      this.superCluster.load(points);\n    }\n    if (!changed) {\n      if (this.state.zoom <= this.maxZoom || state.zoom <= this.maxZoom) {\n        changed = !equal(this.state, state);\n      }\n    }\n    this.state = state;\n    if (changed) {\n      this.clusters = this.cluster(input);\n    }\n    return {\n      clusters: this.clusters,\n      changed\n    };\n  }\n  cluster({\n    map\n  }) {\n    return this.superCluster.getClusters([-180, -90, 180, 90], Math.round(map.getZoom())).map(feature => this.transformCluster(feature));\n  }\n  transformCluster({\n    geometry: {\n      coordinates: [lng, lat]\n    },\n    properties\n  }) {\n    if (properties.cluster) {\n      return new Cluster({\n        markers: this.superCluster.getLeaves(properties.cluster_id, Infinity).map(leaf => leaf.properties.marker),\n        position: {\n          lat,\n          lng\n        }\n      });\n    }\n    const marker = properties.marker;\n    return new Cluster({\n      markers: [marker],\n      position: MarkerUtils.getPosition(marker)\n    });\n  }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides statistics on all clusters in the current render cycle for use in {@link Renderer.render}.\n */\nclass ClusterStats {\n  constructor(markers, clusters) {\n    this.markers = {\n      sum: markers.length\n    };\n    const clusterMarkerCounts = clusters.map(a => a.count);\n    const clusterMarkerSum = clusterMarkerCounts.reduce((a, b) => a + b, 0);\n    this.clusters = {\n      count: clusters.length,\n      markers: {\n        mean: clusterMarkerSum / clusters.length,\n        sum: clusterMarkerSum,\n        min: Math.min(...clusterMarkerCounts),\n        max: Math.max(...clusterMarkerCounts)\n      }\n    };\n  }\n}\nclass DefaultRenderer {\n  /**\n   * The default render function for the library used by {@link MarkerClusterer}.\n   *\n   * Currently set to use the following:\n   *\n   * ```typescript\n   * // change color if this cluster has more markers than the mean cluster\n   * const color =\n   *   count > Math.max(10, stats.clusters.markers.mean)\n   *     ? \"#ff0000\"\n   *     : \"#0000ff\";\n   *\n   * // create svg url with fill color\n   * const svg = window.btoa(`\n   * <svg fill=\"${color}\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 240 240\">\n   *   <circle cx=\"120\" cy=\"120\" opacity=\".6\" r=\"70\" />\n   *   <circle cx=\"120\" cy=\"120\" opacity=\".3\" r=\"90\" />\n   *   <circle cx=\"120\" cy=\"120\" opacity=\".2\" r=\"110\" />\n   *   <circle cx=\"120\" cy=\"120\" opacity=\".1\" r=\"130\" />\n   * </svg>`);\n   *\n   * // create marker using svg icon\n   * return new google.maps.Marker({\n   *   position,\n   *   icon: {\n   *     url: `data:image/svg+xml;base64,${svg}`,\n   *     scaledSize: new google.maps.Size(45, 45),\n   *   },\n   *   label: {\n   *     text: String(count),\n   *     color: \"rgba(255,255,255,0.9)\",\n   *     fontSize: \"12px\",\n   *   },\n   *   // adjust zIndex to be above other markers\n   *   zIndex: 1000 + count,\n   * });\n   * ```\n   */\n  render({\n    count,\n    position\n  }, stats, map) {\n    // change color if this cluster has more markers than the mean cluster\n    const color = count > Math.max(10, stats.clusters.markers.mean) ? \"#ff0000\" : \"#0000ff\";\n    // create svg literal with fill color\n    const svg = `<svg fill=\"${color}\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 240 240\" width=\"50\" height=\"50\">\n<circle cx=\"120\" cy=\"120\" opacity=\".6\" r=\"70\" />\n<circle cx=\"120\" cy=\"120\" opacity=\".3\" r=\"90\" />\n<circle cx=\"120\" cy=\"120\" opacity=\".2\" r=\"110\" />\n<text x=\"50%\" y=\"50%\" style=\"fill:#fff\" text-anchor=\"middle\" font-size=\"50\" dominant-baseline=\"middle\" font-family=\"roboto,arial,sans-serif\">${count}</text>\n</svg>`;\n    const title = `Cluster of ${count} markers`,\n      // adjust zIndex to be above other markers\n      zIndex = Number(google.maps.Marker.MAX_ZINDEX) + count;\n    if (MarkerUtils.isAdvancedMarkerAvailable(map)) {\n      // create cluster SVG element\n      const div = document.createElement(\"div\");\n      div.innerHTML = svg;\n      const svgEl = div.firstElementChild;\n      svgEl.setAttribute(\"transform\", \"translate(0 25)\");\n      const clusterOptions = {\n        map,\n        position,\n        zIndex,\n        title,\n        content: svgEl\n      };\n      return new google.maps.marker.AdvancedMarkerElement(clusterOptions);\n    }\n    const clusterOptions = {\n      position,\n      zIndex,\n      title,\n      icon: {\n        url: `data:image/svg+xml;base64,${btoa(svg)}`,\n        anchor: new google.maps.Point(25, 25)\n      }\n    };\n    return new google.maps.Marker(clusterOptions);\n  }\n}\n\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Extends an object's prototype by another's.\n *\n * @param type1 The Type to be extended.\n * @param type2 The Type to extend with.\n * @ignore\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction extend(type1, type2) {\n  /* istanbul ignore next */\n  // eslint-disable-next-line prefer-const\n  for (let property in type2.prototype) {\n    type1.prototype[property] = type2.prototype[property];\n  }\n}\n/**\n * @ignore\n */\nclass OverlayViewSafe {\n  constructor() {\n    // MarkerClusterer implements google.maps.OverlayView interface. We use the\n    // extend function to extend MarkerClusterer with google.maps.OverlayView\n    // because it might not always be available when the code is defined so we\n    // look for it at the last possible moment. If it doesn't exist now then\n    // there is no point going ahead :)\n    extend(OverlayViewSafe, google.maps.OverlayView);\n  }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar MarkerClustererEvents;\n(function (MarkerClustererEvents) {\n  MarkerClustererEvents[\"CLUSTERING_BEGIN\"] = \"clusteringbegin\";\n  MarkerClustererEvents[\"CLUSTERING_END\"] = \"clusteringend\";\n  MarkerClustererEvents[\"CLUSTER_CLICK\"] = \"click\";\n})(MarkerClustererEvents || (MarkerClustererEvents = {}));\nconst defaultOnClusterClickHandler = (_, cluster, map) => {\n  map.fitBounds(cluster.bounds);\n};\n/**\n * MarkerClusterer creates and manages per-zoom-level clusters for large amounts\n * of markers. See {@link MarkerClustererOptions} for more details.\n *\n */\nclass MarkerClusterer extends OverlayViewSafe {\n  constructor({\n    map,\n    markers = [],\n    algorithmOptions = {},\n    algorithm = new SuperClusterAlgorithm(algorithmOptions),\n    renderer = new DefaultRenderer(),\n    onClusterClick = defaultOnClusterClickHandler\n  }) {\n    super();\n    this.markers = [...markers];\n    this.clusters = [];\n    this.algorithm = algorithm;\n    this.renderer = renderer;\n    this.onClusterClick = onClusterClick;\n    if (map) {\n      this.setMap(map);\n    }\n  }\n  addMarker(marker, noDraw) {\n    if (this.markers.includes(marker)) {\n      return;\n    }\n    this.markers.push(marker);\n    if (!noDraw) {\n      this.render();\n    }\n  }\n  addMarkers(markers, noDraw) {\n    markers.forEach(marker => {\n      this.addMarker(marker, true);\n    });\n    if (!noDraw) {\n      this.render();\n    }\n  }\n  removeMarker(marker, noDraw) {\n    const index = this.markers.indexOf(marker);\n    if (index === -1) {\n      // Marker is not in our list of markers, so do nothing:\n      return false;\n    }\n    MarkerUtils.setMap(marker, null);\n    this.markers.splice(index, 1); // Remove the marker from the list of managed markers\n    if (!noDraw) {\n      this.render();\n    }\n    return true;\n  }\n  removeMarkers(markers, noDraw) {\n    let removed = false;\n    markers.forEach(marker => {\n      removed = this.removeMarker(marker, true) || removed;\n    });\n    if (removed && !noDraw) {\n      this.render();\n    }\n    return removed;\n  }\n  clearMarkers(noDraw) {\n    this.markers.length = 0;\n    if (!noDraw) {\n      this.render();\n    }\n  }\n  /**\n   * Recalculates and draws all the marker clusters.\n   */\n  render() {\n    const map = this.getMap();\n    if (map instanceof google.maps.Map && map.getProjection()) {\n      google.maps.event.trigger(this, MarkerClustererEvents.CLUSTERING_BEGIN, this);\n      const {\n        clusters,\n        changed\n      } = this.algorithm.calculate({\n        markers: this.markers,\n        map,\n        mapCanvasProjection: this.getProjection()\n      });\n      // allow algorithms to return flag on whether the clusters/markers have changed\n      if (changed || changed == undefined) {\n        // reset visibility of markers and clusters\n        this.reset();\n        // store new clusters\n        this.clusters = clusters;\n        this.renderClusters();\n      }\n      google.maps.event.trigger(this, MarkerClustererEvents.CLUSTERING_END, this);\n    }\n  }\n  onAdd() {\n    this.idleListener = this.getMap().addListener(\"idle\", this.render.bind(this));\n    this.render();\n  }\n  onRemove() {\n    google.maps.event.removeListener(this.idleListener);\n    this.reset();\n  }\n  reset() {\n    this.markers.forEach(marker => MarkerUtils.setMap(marker, null));\n    this.clusters.forEach(cluster => cluster.delete());\n    this.clusters = [];\n  }\n  renderClusters() {\n    // generate stats to pass to renderers\n    const stats = new ClusterStats(this.markers, this.clusters);\n    const map = this.getMap();\n    this.clusters.forEach(cluster => {\n      if (cluster.markers.length === 1) {\n        cluster.marker = cluster.markers[0];\n      } else {\n        cluster.marker = this.renderer.render(cluster, stats, map);\n        if (this.onClusterClick) {\n          cluster.marker.addListener(\"click\", /* istanbul ignore next */\n          event => {\n            google.maps.event.trigger(this, MarkerClustererEvents.CLUSTER_CLICK, cluster);\n            this.onClusterClick(event, cluster, map);\n          });\n        }\n      }\n      MarkerUtils.setMap(cluster.marker, map);\n    });\n  }\n}\nexport { AbstractAlgorithm, AbstractViewportAlgorithm, Cluster, ClusterStats, DefaultRenderer, GridAlgorithm, MarkerClusterer, MarkerClustererEvents, NoopAlgorithm, SuperClusterAlgorithm, defaultOnClusterClickHandler, distanceBetweenPoints, extendBoundsToPaddedViewport, extendPixelBounds, filterMarkersToPaddedViewport, noop, pixelBoundsToLatLngBounds };","map":{"version":3,"names":["equal","SuperCluster","__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","MarkerUtils","isAdvancedMarkerAvailable","map","google","maps","marker","getMapCapabilities","isAdvancedMarkersAvailable","isAdvancedMarker","AdvancedMarkerElement","setMap","getPosition","position","LatLng","lat","lng","getVisible","Cluster","constructor","markers","_position","bounds","LatLngBounds","extend","getCenter","count","filter","m","push","delete","undefined","filterMarkersToPaddedViewport","mapCanvasProjection","viewportPaddingPixels","extendedMapBounds","extendBoundsToPaddedViewport","getBounds","contains","projection","numPixels","northEast","southWest","latLngBoundsToPixelBounds","extendedPixelBounds","extendPixelBounds","pixelBoundsToLatLngBounds","distanceBetweenPoints","p1","p2","R","dLat","Math","PI","dLon","sinDLat","sin","sinDLon","a","cos","c","atan2","sqrt","fromLatLngToDivPixel","getNorthEast","getSouthWest","x","y","sw","fromDivPixelToLatLng","ne","AbstractAlgorithm","maxZoom","noop","AbstractViewportAlgorithm","_a","viewportPadding","options","calculate","getZoom","clusters","changed","cluster","GridAlgorithm","maxDistance","gridSize","state","zoom","forEach","addToClosestCluster","candidate","distance","toJSON","NoopAlgorithm","input","SuperClusterAlgorithm","radius","superCluster","assign","points","coordinates","type","geometry","properties","load","getClusters","round","feature","transformCluster","getLeaves","cluster_id","Infinity","leaf","ClusterStats","sum","clusterMarkerCounts","clusterMarkerSum","reduce","b","mean","min","max","DefaultRenderer","render","stats","color","svg","title","zIndex","Number","Marker","MAX_ZINDEX","div","document","createElement","innerHTML","svgEl","firstElementChild","setAttribute","clusterOptions","content","icon","url","btoa","anchor","Point","type1","type2","property","OverlayViewSafe","OverlayView","MarkerClustererEvents","defaultOnClusterClickHandler","_","fitBounds","MarkerClusterer","algorithmOptions","algorithm","renderer","onClusterClick","addMarker","noDraw","includes","addMarkers","removeMarker","index","splice","removeMarkers","removed","clearMarkers","getMap","Map","getProjection","event","trigger","CLUSTERING_BEGIN","reset","renderClusters","CLUSTERING_END","onAdd","idleListener","addListener","bind","onRemove","removeListener","CLUSTER_CLICK"],"sources":["C:/Users/PC/Desktop/workspace/AngularDemo/node_modules/@googlemaps/markerclusterer/dist/index.esm.js"],"sourcesContent":["import equal from 'fast-deep-equal';\nimport SuperCluster from 'supercluster';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\n/**\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass MarkerUtils {\n    static isAdvancedMarkerAvailable(map) {\n        return (google.maps.marker &&\n            map.getMapCapabilities().isAdvancedMarkersAvailable === true);\n    }\n    static isAdvancedMarker(marker) {\n        return (google.maps.marker &&\n            marker instanceof google.maps.marker.AdvancedMarkerElement);\n    }\n    static setMap(marker, map) {\n        if (this.isAdvancedMarker(marker)) {\n            marker.map = map;\n        }\n        else {\n            marker.setMap(map);\n        }\n    }\n    static getPosition(marker) {\n        // SuperClusterAlgorithm.calculate expects a LatLng instance so we fake it for Adv Markers\n        if (this.isAdvancedMarker(marker)) {\n            if (marker.position) {\n                if (marker.position instanceof google.maps.LatLng) {\n                    return marker.position;\n                }\n                // since we can't cast to LatLngLiteral for reasons =(\n                if (marker.position.lat && marker.position.lng) {\n                    return new google.maps.LatLng(marker.position.lat, marker.position.lng);\n                }\n            }\n            return new google.maps.LatLng(null);\n        }\n        return marker.getPosition();\n    }\n    static getVisible(marker) {\n        if (this.isAdvancedMarker(marker)) {\n            /**\n             * Always return true for Advanced Markers because the clusterer\n             * uses getVisible as a way to count legacy markers not as an actual\n             * indicator of visibility for some reason. Even when markers are hidden\n             * Marker.getVisible returns `true` and this is used to set the marker count\n             * on the cluster. See the behavior of Cluster.count\n             */\n            return true;\n        }\n        return marker.getVisible();\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Cluster {\n    constructor({ markers, position }) {\n        this.markers = markers;\n        if (position) {\n            if (position instanceof google.maps.LatLng) {\n                this._position = position;\n            }\n            else {\n                this._position = new google.maps.LatLng(position);\n            }\n        }\n    }\n    get bounds() {\n        if (this.markers.length === 0 && !this._position) {\n            return;\n        }\n        const bounds = new google.maps.LatLngBounds(this._position, this._position);\n        for (const marker of this.markers) {\n            bounds.extend(MarkerUtils.getPosition(marker));\n        }\n        return bounds;\n    }\n    get position() {\n        return this._position || this.bounds.getCenter();\n    }\n    /**\n     * Get the count of **visible** markers.\n     */\n    get count() {\n        return this.markers.filter((m) => MarkerUtils.getVisible(m)).length;\n    }\n    /**\n     * Add a marker to the cluster.\n     */\n    push(marker) {\n        this.markers.push(marker);\n    }\n    /**\n     * Cleanup references and remove marker from map.\n     */\n    delete() {\n        if (this.marker) {\n            MarkerUtils.setMap(this.marker, null);\n            this.marker = undefined;\n        }\n        this.markers.length = 0;\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns the markers visible in a padded map viewport\n *\n * @param map\n * @param mapCanvasProjection\n * @param markers The list of marker to filter\n * @param viewportPaddingPixels The padding in pixel\n * @returns The list of markers in the padded viewport\n */\nconst filterMarkersToPaddedViewport = (map, mapCanvasProjection, markers, viewportPaddingPixels) => {\n    const extendedMapBounds = extendBoundsToPaddedViewport(map.getBounds(), mapCanvasProjection, viewportPaddingPixels);\n    return markers.filter((marker) => extendedMapBounds.contains(MarkerUtils.getPosition(marker)));\n};\n/**\n * Extends a bounds by a number of pixels in each direction\n */\nconst extendBoundsToPaddedViewport = (bounds, projection, numPixels) => {\n    const { northEast, southWest } = latLngBoundsToPixelBounds(bounds, projection);\n    const extendedPixelBounds = extendPixelBounds({ northEast, southWest }, numPixels);\n    return pixelBoundsToLatLngBounds(extendedPixelBounds, projection);\n};\n/**\n * Returns the distance between 2 positions.\n *\n * @hidden\n */\nconst distanceBetweenPoints = (p1, p2) => {\n    const R = 6371; // Radius of the Earth in km\n    const dLat = ((p2.lat - p1.lat) * Math.PI) / 180;\n    const dLon = ((p2.lng - p1.lng) * Math.PI) / 180;\n    const sinDLat = Math.sin(dLat / 2);\n    const sinDLon = Math.sin(dLon / 2);\n    const a = sinDLat * sinDLat +\n        Math.cos((p1.lat * Math.PI) / 180) *\n            Math.cos((p2.lat * Math.PI) / 180) *\n            sinDLon *\n            sinDLon;\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n};\n/**\n * Converts a LatLng bound to pixels.\n *\n * @hidden\n */\nconst latLngBoundsToPixelBounds = (bounds, projection) => {\n    return {\n        northEast: projection.fromLatLngToDivPixel(bounds.getNorthEast()),\n        southWest: projection.fromLatLngToDivPixel(bounds.getSouthWest()),\n    };\n};\n/**\n * Extends a pixel bounds by numPixels in all directions.\n *\n * @hidden\n */\nconst extendPixelBounds = ({ northEast, southWest }, numPixels) => {\n    northEast.x += numPixels;\n    northEast.y -= numPixels;\n    southWest.x -= numPixels;\n    southWest.y += numPixels;\n    return { northEast, southWest };\n};\n/**\n * @hidden\n */\nconst pixelBoundsToLatLngBounds = ({ northEast, southWest }, projection) => {\n    const sw = projection.fromDivPixelToLatLng(southWest);\n    const ne = projection.fromDivPixelToLatLng(northEast);\n    return new google.maps.LatLngBounds(sw, ne);\n};\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @hidden\n */\nclass AbstractAlgorithm {\n    constructor({ maxZoom = 16 }) {\n        this.maxZoom = maxZoom;\n    }\n    /**\n     * Helper function to bypass clustering based upon some map state such as\n     * zoom, number of markers, etc.\n     *\n     * ```typescript\n     *  cluster({markers, map}: AlgorithmInput): Cluster[] {\n     *    if (shouldBypassClustering(map)) {\n     *      return this.noop({markers})\n     *    }\n     * }\n     * ```\n     */\n    noop({ markers, }) {\n        return noop(markers);\n    }\n}\n/**\n * Abstract viewport algorithm proves a class to filter markers by a padded\n * viewport. This is a common optimization.\n *\n * @hidden\n */\nclass AbstractViewportAlgorithm extends AbstractAlgorithm {\n    constructor(_a) {\n        var { viewportPadding = 60 } = _a, options = __rest(_a, [\"viewportPadding\"]);\n        super(options);\n        this.viewportPadding = 60;\n        this.viewportPadding = viewportPadding;\n    }\n    calculate({ markers, map, mapCanvasProjection, }) {\n        if (map.getZoom() >= this.maxZoom) {\n            return {\n                clusters: this.noop({\n                    markers,\n                }),\n                changed: false,\n            };\n        }\n        return {\n            clusters: this.cluster({\n                markers: filterMarkersToPaddedViewport(map, mapCanvasProjection, markers, this.viewportPadding),\n                map,\n                mapCanvasProjection,\n            }),\n        };\n    }\n}\n/**\n * @hidden\n */\nconst noop = (markers) => {\n    const clusters = markers.map((marker) => new Cluster({\n        position: MarkerUtils.getPosition(marker),\n        markers: [marker],\n    }));\n    return clusters;\n};\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The default Grid algorithm historically used in Google Maps marker\n * clustering.\n *\n * The Grid algorithm does not implement caching and markers may flash as the\n * viewport changes. Instead use {@link SuperClusterAlgorithm}.\n */\nclass GridAlgorithm extends AbstractViewportAlgorithm {\n    constructor(_a) {\n        var { maxDistance = 40000, gridSize = 40 } = _a, options = __rest(_a, [\"maxDistance\", \"gridSize\"]);\n        super(options);\n        this.clusters = [];\n        this.maxDistance = maxDistance;\n        this.gridSize = gridSize;\n        this.state = { zoom: null };\n    }\n    calculate({ markers, map, mapCanvasProjection, }) {\n        const state = { zoom: map.getZoom() };\n        let changed = false;\n        if (this.state.zoom > this.maxZoom && state.zoom > this.maxZoom) ;\n        else {\n            changed = !equal(this.state, state);\n        }\n        this.state = state;\n        if (map.getZoom() >= this.maxZoom) {\n            return {\n                clusters: this.noop({\n                    markers,\n                }),\n                changed,\n            };\n        }\n        return {\n            clusters: this.cluster({\n                markers: filterMarkersToPaddedViewport(map, mapCanvasProjection, markers, this.viewportPadding),\n                map,\n                mapCanvasProjection,\n            }),\n        };\n    }\n    cluster({ markers, map, mapCanvasProjection, }) {\n        this.clusters = [];\n        markers.forEach((marker) => {\n            this.addToClosestCluster(marker, map, mapCanvasProjection);\n        });\n        return this.clusters;\n    }\n    addToClosestCluster(marker, map, projection) {\n        let maxDistance = this.maxDistance; // Some large number\n        let cluster = null;\n        for (let i = 0; i < this.clusters.length; i++) {\n            const candidate = this.clusters[i];\n            const distance = distanceBetweenPoints(candidate.bounds.getCenter().toJSON(), MarkerUtils.getPosition(marker).toJSON());\n            if (distance < maxDistance) {\n                maxDistance = distance;\n                cluster = candidate;\n            }\n        }\n        if (cluster &&\n            extendBoundsToPaddedViewport(cluster.bounds, projection, this.gridSize).contains(MarkerUtils.getPosition(marker))) {\n            cluster.push(marker);\n        }\n        else {\n            const cluster = new Cluster({ markers: [marker] });\n            this.clusters.push(cluster);\n        }\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Noop algorithm does not generate any clusters or filter markers by the an extended viewport.\n */\nclass NoopAlgorithm extends AbstractAlgorithm {\n    constructor(_a) {\n        var options = __rest(_a, []);\n        super(options);\n    }\n    calculate({ markers, map, mapCanvasProjection, }) {\n        return {\n            clusters: this.cluster({ markers, map, mapCanvasProjection }),\n            changed: false,\n        };\n    }\n    cluster(input) {\n        return this.noop(input);\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A very fast JavaScript algorithm for geospatial point clustering using KD trees.\n *\n * @see https://www.npmjs.com/package/supercluster for more information on options.\n */\nclass SuperClusterAlgorithm extends AbstractAlgorithm {\n    constructor(_a) {\n        var { maxZoom, radius = 60 } = _a, options = __rest(_a, [\"maxZoom\", \"radius\"]);\n        super({ maxZoom });\n        this.superCluster = new SuperCluster(Object.assign({ maxZoom: this.maxZoom, radius }, options));\n        this.state = { zoom: null };\n    }\n    calculate(input) {\n        let changed = false;\n        const state = { zoom: input.map.getZoom() };\n        if (!equal(input.markers, this.markers)) {\n            changed = true;\n            // TODO use proxy to avoid copy?\n            this.markers = [...input.markers];\n            const points = this.markers.map((marker) => {\n                const position = MarkerUtils.getPosition(marker);\n                const coordinates = [position.lng(), position.lat()];\n                return {\n                    type: \"Feature\",\n                    geometry: {\n                        type: \"Point\",\n                        coordinates,\n                    },\n                    properties: { marker },\n                };\n            });\n            this.superCluster.load(points);\n        }\n        if (!changed) {\n            if (this.state.zoom <= this.maxZoom || state.zoom <= this.maxZoom) {\n                changed = !equal(this.state, state);\n            }\n        }\n        this.state = state;\n        if (changed) {\n            this.clusters = this.cluster(input);\n        }\n        return { clusters: this.clusters, changed };\n    }\n    cluster({ map }) {\n        return this.superCluster\n            .getClusters([-180, -90, 180, 90], Math.round(map.getZoom()))\n            .map((feature) => this.transformCluster(feature));\n    }\n    transformCluster({ geometry: { coordinates: [lng, lat], }, properties, }) {\n        if (properties.cluster) {\n            return new Cluster({\n                markers: this.superCluster\n                    .getLeaves(properties.cluster_id, Infinity)\n                    .map((leaf) => leaf.properties.marker),\n                position: { lat, lng },\n            });\n        }\n        const marker = properties.marker;\n        return new Cluster({\n            markers: [marker],\n            position: MarkerUtils.getPosition(marker),\n        });\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides statistics on all clusters in the current render cycle for use in {@link Renderer.render}.\n */\nclass ClusterStats {\n    constructor(markers, clusters) {\n        this.markers = { sum: markers.length };\n        const clusterMarkerCounts = clusters.map((a) => a.count);\n        const clusterMarkerSum = clusterMarkerCounts.reduce((a, b) => a + b, 0);\n        this.clusters = {\n            count: clusters.length,\n            markers: {\n                mean: clusterMarkerSum / clusters.length,\n                sum: clusterMarkerSum,\n                min: Math.min(...clusterMarkerCounts),\n                max: Math.max(...clusterMarkerCounts),\n            },\n        };\n    }\n}\nclass DefaultRenderer {\n    /**\n     * The default render function for the library used by {@link MarkerClusterer}.\n     *\n     * Currently set to use the following:\n     *\n     * ```typescript\n     * // change color if this cluster has more markers than the mean cluster\n     * const color =\n     *   count > Math.max(10, stats.clusters.markers.mean)\n     *     ? \"#ff0000\"\n     *     : \"#0000ff\";\n     *\n     * // create svg url with fill color\n     * const svg = window.btoa(`\n     * <svg fill=\"${color}\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 240 240\">\n     *   <circle cx=\"120\" cy=\"120\" opacity=\".6\" r=\"70\" />\n     *   <circle cx=\"120\" cy=\"120\" opacity=\".3\" r=\"90\" />\n     *   <circle cx=\"120\" cy=\"120\" opacity=\".2\" r=\"110\" />\n     *   <circle cx=\"120\" cy=\"120\" opacity=\".1\" r=\"130\" />\n     * </svg>`);\n     *\n     * // create marker using svg icon\n     * return new google.maps.Marker({\n     *   position,\n     *   icon: {\n     *     url: `data:image/svg+xml;base64,${svg}`,\n     *     scaledSize: new google.maps.Size(45, 45),\n     *   },\n     *   label: {\n     *     text: String(count),\n     *     color: \"rgba(255,255,255,0.9)\",\n     *     fontSize: \"12px\",\n     *   },\n     *   // adjust zIndex to be above other markers\n     *   zIndex: 1000 + count,\n     * });\n     * ```\n     */\n    render({ count, position }, stats, map) {\n        // change color if this cluster has more markers than the mean cluster\n        const color = count > Math.max(10, stats.clusters.markers.mean) ? \"#ff0000\" : \"#0000ff\";\n        // create svg literal with fill color\n        const svg = `<svg fill=\"${color}\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 240 240\" width=\"50\" height=\"50\">\n<circle cx=\"120\" cy=\"120\" opacity=\".6\" r=\"70\" />\n<circle cx=\"120\" cy=\"120\" opacity=\".3\" r=\"90\" />\n<circle cx=\"120\" cy=\"120\" opacity=\".2\" r=\"110\" />\n<text x=\"50%\" y=\"50%\" style=\"fill:#fff\" text-anchor=\"middle\" font-size=\"50\" dominant-baseline=\"middle\" font-family=\"roboto,arial,sans-serif\">${count}</text>\n</svg>`;\n        const title = `Cluster of ${count} markers`, \n        // adjust zIndex to be above other markers\n        zIndex = Number(google.maps.Marker.MAX_ZINDEX) + count;\n        if (MarkerUtils.isAdvancedMarkerAvailable(map)) {\n            // create cluster SVG element\n            const div = document.createElement(\"div\");\n            div.innerHTML = svg;\n            const svgEl = div.firstElementChild;\n            svgEl.setAttribute(\"transform\", \"translate(0 25)\");\n            const clusterOptions = {\n                map,\n                position,\n                zIndex,\n                title,\n                content: svgEl,\n            };\n            return new google.maps.marker.AdvancedMarkerElement(clusterOptions);\n        }\n        const clusterOptions = {\n            position,\n            zIndex,\n            title,\n            icon: {\n                url: `data:image/svg+xml;base64,${btoa(svg)}`,\n                anchor: new google.maps.Point(25, 25),\n            },\n        };\n        return new google.maps.Marker(clusterOptions);\n    }\n}\n\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Extends an object's prototype by another's.\n *\n * @param type1 The Type to be extended.\n * @param type2 The Type to extend with.\n * @ignore\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction extend(type1, type2) {\n    /* istanbul ignore next */\n    // eslint-disable-next-line prefer-const\n    for (let property in type2.prototype) {\n        type1.prototype[property] = type2.prototype[property];\n    }\n}\n/**\n * @ignore\n */\nclass OverlayViewSafe {\n    constructor() {\n        // MarkerClusterer implements google.maps.OverlayView interface. We use the\n        // extend function to extend MarkerClusterer with google.maps.OverlayView\n        // because it might not always be available when the code is defined so we\n        // look for it at the last possible moment. If it doesn't exist now then\n        // there is no point going ahead :)\n        extend(OverlayViewSafe, google.maps.OverlayView);\n    }\n}\n\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar MarkerClustererEvents;\n(function (MarkerClustererEvents) {\n    MarkerClustererEvents[\"CLUSTERING_BEGIN\"] = \"clusteringbegin\";\n    MarkerClustererEvents[\"CLUSTERING_END\"] = \"clusteringend\";\n    MarkerClustererEvents[\"CLUSTER_CLICK\"] = \"click\";\n})(MarkerClustererEvents || (MarkerClustererEvents = {}));\nconst defaultOnClusterClickHandler = (_, cluster, map) => {\n    map.fitBounds(cluster.bounds);\n};\n/**\n * MarkerClusterer creates and manages per-zoom-level clusters for large amounts\n * of markers. See {@link MarkerClustererOptions} for more details.\n *\n */\nclass MarkerClusterer extends OverlayViewSafe {\n    constructor({ map, markers = [], algorithmOptions = {}, algorithm = new SuperClusterAlgorithm(algorithmOptions), renderer = new DefaultRenderer(), onClusterClick = defaultOnClusterClickHandler, }) {\n        super();\n        this.markers = [...markers];\n        this.clusters = [];\n        this.algorithm = algorithm;\n        this.renderer = renderer;\n        this.onClusterClick = onClusterClick;\n        if (map) {\n            this.setMap(map);\n        }\n    }\n    addMarker(marker, noDraw) {\n        if (this.markers.includes(marker)) {\n            return;\n        }\n        this.markers.push(marker);\n        if (!noDraw) {\n            this.render();\n        }\n    }\n    addMarkers(markers, noDraw) {\n        markers.forEach((marker) => {\n            this.addMarker(marker, true);\n        });\n        if (!noDraw) {\n            this.render();\n        }\n    }\n    removeMarker(marker, noDraw) {\n        const index = this.markers.indexOf(marker);\n        if (index === -1) {\n            // Marker is not in our list of markers, so do nothing:\n            return false;\n        }\n        MarkerUtils.setMap(marker, null);\n        this.markers.splice(index, 1); // Remove the marker from the list of managed markers\n        if (!noDraw) {\n            this.render();\n        }\n        return true;\n    }\n    removeMarkers(markers, noDraw) {\n        let removed = false;\n        markers.forEach((marker) => {\n            removed = this.removeMarker(marker, true) || removed;\n        });\n        if (removed && !noDraw) {\n            this.render();\n        }\n        return removed;\n    }\n    clearMarkers(noDraw) {\n        this.markers.length = 0;\n        if (!noDraw) {\n            this.render();\n        }\n    }\n    /**\n     * Recalculates and draws all the marker clusters.\n     */\n    render() {\n        const map = this.getMap();\n        if (map instanceof google.maps.Map && map.getProjection()) {\n            google.maps.event.trigger(this, MarkerClustererEvents.CLUSTERING_BEGIN, this);\n            const { clusters, changed } = this.algorithm.calculate({\n                markers: this.markers,\n                map,\n                mapCanvasProjection: this.getProjection(),\n            });\n            // allow algorithms to return flag on whether the clusters/markers have changed\n            if (changed || changed == undefined) {\n                // reset visibility of markers and clusters\n                this.reset();\n                // store new clusters\n                this.clusters = clusters;\n                this.renderClusters();\n            }\n            google.maps.event.trigger(this, MarkerClustererEvents.CLUSTERING_END, this);\n        }\n    }\n    onAdd() {\n        this.idleListener = this.getMap().addListener(\"idle\", this.render.bind(this));\n        this.render();\n    }\n    onRemove() {\n        google.maps.event.removeListener(this.idleListener);\n        this.reset();\n    }\n    reset() {\n        this.markers.forEach((marker) => MarkerUtils.setMap(marker, null));\n        this.clusters.forEach((cluster) => cluster.delete());\n        this.clusters = [];\n    }\n    renderClusters() {\n        // generate stats to pass to renderers\n        const stats = new ClusterStats(this.markers, this.clusters);\n        const map = this.getMap();\n        this.clusters.forEach((cluster) => {\n            if (cluster.markers.length === 1) {\n                cluster.marker = cluster.markers[0];\n            }\n            else {\n                cluster.marker = this.renderer.render(cluster, stats, map);\n                if (this.onClusterClick) {\n                    cluster.marker.addListener(\"click\", \n                    /* istanbul ignore next */\n                    (event) => {\n                        google.maps.event.trigger(this, MarkerClustererEvents.CLUSTER_CLICK, cluster);\n                        this.onClusterClick(event, cluster, map);\n                    });\n                }\n            }\n            MarkerUtils.setMap(cluster.marker, map);\n        });\n    }\n}\n\nexport { AbstractAlgorithm, AbstractViewportAlgorithm, Cluster, ClusterStats, DefaultRenderer, GridAlgorithm, MarkerClusterer, MarkerClustererEvents, NoopAlgorithm, SuperClusterAlgorithm, defaultOnClusterClickHandler, distanceBetweenPoints, extendBoundsToPaddedViewport, extendPixelBounds, filterMarkersToPaddedViewport, noop, pixelBoundsToLatLngBounds };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}