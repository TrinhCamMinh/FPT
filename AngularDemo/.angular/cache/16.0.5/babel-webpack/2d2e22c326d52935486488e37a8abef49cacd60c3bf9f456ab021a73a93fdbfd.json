{"ast":null,"code":"import _asyncToGenerator from \"/home/Workspace/FPT/AngularDemo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from 'src/environments/environment.development';\nimport { Loader } from '@googlemaps/js-api-loader';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet map;\nconst VietNamCor = {\n  lat: 15.9031,\n  lng: 105.8067\n};\nconst flightPlanCoordinates = [{\n  lat: 37.772,\n  lng: -122.214\n}, {\n  lat: 21.291,\n  lng: -157.821\n}, {\n  lat: -18.142,\n  lng: 178.431\n}, {\n  lat: -27.467,\n  lng: 153.027\n}];\nconst triangleCoords = [{\n  lat: 23.393396,\n  lng: 102.14682\n}, {\n  lat: 22.719568,\n  lng: 105.776716\n}, {\n  lat: 8.383496,\n  lng: 104.938748\n}, {\n  lat: 8.383496,\n  lng: 102.14682\n}];\nconst VNlocations = [{\n  lat: 21.0278,\n  lng: 105.8342\n}, {\n  lat: 16.0544,\n  lng: 108.2022\n}, {\n  lat: 10.8231,\n  lng: 106.6297\n}, {\n  lat: 12.2388,\n  lng: 109.1967\n}, {\n  lat: 20.8449,\n  lng: 106.6881\n}, {\n  lat: 21.0283,\n  lng: 105.8537\n}, {\n  lat: 10.9656,\n  lng: 108.107\n}, {\n  lat: 21.4049,\n  lng: 103.2055\n}, {\n  lat: 10.0333,\n  lng: 105.7833\n}, {\n  lat: 16.4692,\n  lng: 107.5787\n}, {\n  lat: 13.9833,\n  lng: 108\n}, {\n  lat: 14.0583,\n  lng: 108.2772\n}, {\n  lat: 13.7665,\n  lng: 109.2237\n}, {\n  lat: 11.9325,\n  lng: 109.1967\n}, {\n  lat: 10.3833,\n  lng: 105.4167\n}, {\n  lat: 21.5942,\n  lng: 105.8481\n}, {\n  lat: 20.8172,\n  lng: 106.7244\n}, {\n  lat: 20.9544,\n  lng: 107.0806\n}, {\n  lat: 21.3281,\n  lng: 103.8733\n} // Yen Bai\n];\n\nlet loader = new Loader({\n  apiKey: environment.apiKey,\n  version: 'weekly'\n});\nconst circles = [];\nconst blueMarkers = [];\nlet currentInfoWindow = null;\nclass AppComponent {\n  constructor(http) {\n    this.http = http;\n    this.successMarkers = [];\n    this.coordinate = [{\n      lat: Number,\n      lng: Number\n    }];\n  }\n  ngOnInit() {\n    this.demo();\n  }\n  demo() {\n    var _this = this;\n    const detectWater = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (lat, lng) {\n        try {\n          const url = `https://isitwater-com.p.rapidapi.com/?latitude=${lat}&longitude=${lng}`;\n          const options = {\n            method: 'GET',\n            headers: {\n              'X-RapidAPI-Key': '911f81d9e3msh5f705b8931d758cp13855bjsn19b3ba12960e',\n              'X-RapidAPI-Host': 'isitwater-com.p.rapidapi.com'\n            }\n          };\n          const response = yield fetch(url, options);\n          const result = yield response.json();\n          if (result.water) {\n            return true;\n          }\n          return false;\n        } catch (error) {\n          console.error(error);\n          return undefined;\n        }\n      });\n      return function detectWater(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    loader.load().then( /*#__PURE__*/_asyncToGenerator(function* () {\n      //* initial map element\n      const {\n        Map\n      } = yield google.maps.importLibrary('maps');\n      map = new Map(document.getElementById('map'), {\n        center: VietNamCor,\n        zoom: 8\n      });\n      //* create circle instance.\n      const circle1 = new google.maps.Circle({\n        editable: true,\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.35,\n        map,\n        center: {\n          lat: 16.463713,\n          lng: 107.590866\n        },\n        radius: Math.sqrt(2) * 100000\n      });\n      const circle2 = new google.maps.Circle({\n        editable: true,\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.35,\n        map,\n        center: {\n          lat: 13.9833,\n          lng: 108\n        },\n        radius: Math.sqrt(2) * 100000\n      });\n      //* Create the polygon instance\n      // const polygon = new google.maps.Polygon({\n      //     paths: triangleCoords,\n      //     strokeColor: '#FF0000',\n      //     strokeOpacity: 0.8,\n      //     strokeWeight: 2,\n      //     fillColor: '#FF0000',\n      //     fillOpacity: 0.35,\n      // });\n      // const rectangle = new google.maps.Rectangle({\n      //     strokeColor: '#FF0000',\n      //     strokeOpacity: 0.8,\n      //     strokeWeight: 2,\n      //     fillColor: '#FF0000',\n      //     fillOpacity: 0.35,\n      //     map,\n      //     bounds: {\n      //         north: 23.393395,\n      //         south: 8.559559,\n      //         east: 109.464211,\n      //         west: 102.144033,\n      //     },\n      // });\n      // rectangle.addListener('rightclick', () => {\n      //     rectangle.setEditable(true);\n      // });\n      // polygon.addListener('rightclick', () => {\n      //     polygon.setEditable(true);\n      // });\n      // polygon.addListener('bounds_changed', () => {\n      //     console.log('event fired');\n      // });\n      //* Create marker instance\n      const markers = VNlocations.map((item, index) => {\n        const marker = new google.maps.Marker({\n          position: item,\n          map,\n          title: `Item index ${index}`\n        });\n        marker.addListener('rightclick', () => {\n          if (currentInfoWindow) {\n            currentInfoWindow.close();\n          }\n          const infowindow = new google.maps.InfoWindow({\n            content: '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' + '<div><input type=\"checkbox\" id=\"remove\">Remove</div>'\n          });\n          infowindow.open(map, marker);\n          currentInfoWindow = infowindow;\n          infowindow.addListener('domready', () => {\n            const editCheckbox = document.getElementById('edit');\n            const removeCheckbox = document.getElementById('remove');\n            if (marker.getDraggable()) {\n              editCheckbox?.setAttribute('checked', 'true');\n            } else {\n              editCheckbox?.removeAttribute('checked');\n            }\n            editCheckbox?.addEventListener('change', () => {\n              if (marker.getDraggable()) {\n                editCheckbox?.removeAttribute('checked');\n                marker.setDraggable(false);\n              } else {\n                editCheckbox.setAttribute('checked', 'true');\n                marker.setDraggable(true);\n              }\n            });\n            removeCheckbox?.addEventListener('change', () => {\n              marker.setMap(null);\n            });\n            marker.addListener('dragend', /*#__PURE__*/_asyncToGenerator(function* () {\n              const lat = marker.getPosition()?.lat();\n              const lng = marker.getPosition()?.lng();\n              const isWater = yield detectWater(lat, lng);\n              if (isWater) {\n                marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');\n              } else {\n                marker.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');\n              }\n            }));\n          });\n        });\n        // const demo1 = circle.getCenter();\n        // const demo2 = marker.getPosition();\n        // if (demo2 && demo1) {\n        //     if (\n        //         google.maps.geometry.spherical.computeDistanceBetween(\n        //             demo1,\n        //             demo2\n        //         ) <= circle.getRadius()\n        //     ) {\n        //         marker.setIcon(\n        //             'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n        //         );\n        //     } else {\n        //         marker.setIcon(\n        //             'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n        //         );\n        //     }\n        // } else {\n        //     console.log(`Error before`);\n        // }\n        return marker;\n      });\n      // rectangle.addListener('bounds_changed', () => {\n      //     const rectangleBound = rectangle.getBounds();\n      //     markers.forEach((item, index) => {\n      //         const itemPosition = item.getPosition();\n      //         if (\n      //             itemPosition &&\n      //             rectangleBound?.contains(itemPosition)\n      //         ) {\n      //             item.setIcon(\n      //                 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n      //             );\n      //         } else {\n      //             item.setIcon(\n      //                 'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n      //             );\n      //         }\n      //     });\n      // });\n      // this.http\n      //     .get('assets/Book1.csv', { responseType: 'text' })\n      //     .subscribe(\n      //         (data: any) => {\n      //             this.result = data.split('\\n');\n      //             const markers = this.result.map(\n      //                 (item: any, index: number) => {\n      // this.coordinate.push({\n      //     lat: item.split(',')[0],\n      //     lng: item.split(',')[1],\n      // });\n      //                     const marker = new google.maps.Marker({\n      //                         position: {\n      //                             lat: Number(item.split(',')[0]),\n      //                             lng: Number(item.split(',')[1]),\n      //                         },\n      //                         map,\n      //                         title: `Item index ${index}`,\n      //                     });\n      //                     return marker;\n      //                 }\n      //             );\n      //         },\n      //         (error: any) => console.log(error.error)\n      //     );\n      //* Create polyline instance\n      // const poly = new google.maps.Polyline({\n      //     path: flightPlanCoordinates,\n      //     geodesic: true,\n      //     strokeColor: '#FF0000',\n      //     strokeOpacity: 1.0,\n      //     strokeWeight: 2,\n      // });\n      // circle.addListener('bounds_changed', () => {\n      //     VNlocations.map(\n      //         (item: { lat: number; lng: number }, index: number) => {\n      //             const marker = new google.maps.Marker({\n      //                 position: item,\n      //                 map,\n      //                 title: `Item index ${index}`,\n      //             });\n      //             const demo1 = circle.getCenter();\n      //             const demo2 = marker.getPosition();\n      //             if (demo2 && demo1) {\n      //                 if (\n      //                     google.maps.geometry.spherical.computeDistanceBetween(\n      //                         demo1,\n      //                         demo2\n      //                     ) <= circle.getRadius()\n      //                 ) {\n      //                     marker.setIcon(\n      //                         'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n      //                     );\n      //                 } else {\n      //                     marker.setIcon(\n      //                         'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n      //                     );\n      //                 }\n      //             } else {\n      //                 console.log(`Error before`);\n      //             }\n      //         }\n      //     );\n      // });\n      //! Add click event listener to map instance\n      map.addListener('click', e => {\n        const lat = e.latLng.lat();\n        const lng = e.latLng.lng();\n        //     //! check if on water\n        //     detectWater(lat, lng);\n        // });\n        //! Add click event listener to marker instance\n        // marker.addListener('click', () => {\n        //     console.log('click event fired');\n        // });\n        // poly.setMap(map);\n        // polygon.setMap(map);\n        _this.drawingManager = new google.maps.drawing.DrawingManager({\n          drawingMode: null,\n          drawingControl: false,\n          circleOptions: {\n            fillColor: '#ffff00',\n            fillOpacity: 1,\n            strokeWeight: 5,\n            clickable: false,\n            editable: true,\n            zIndex: 1\n          }\n        });\n        // google.maps.event.addListener(\n        //     this.drawingManager,\n        //     'circlecomplete',\n        //     function (circle: any) {\n        //         const circleCenter = circle.getCenter();\n        //         const circleRadius = circle.getRadius();\n        //         VNlocations.map(\n        //             (item: { lat: number; lng: number }, index: number) => {\n        //                 const marker = new google.maps.Marker({\n        //                     position: item,\n        //                     map,\n        //                     title: `Item index ${index}`,\n        //                 });\n        //                 const markerPosition = marker.getPosition();\n        //                 if (markerPosition && circleCenter) {\n        //                     if (\n        //                         google.maps.geometry.spherical.computeDistanceBetween(\n        //                             circleCenter,\n        //                             markerPosition\n        //                         ) <= circleRadius\n        //                     ) {\n        //                         marker.setIcon(\n        //                             'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n        //                         );\n        //                         blueMarkers.push(marker);\n        //                     } else {\n        //                         marker.setIcon(\n        //                             'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n        //                         );\n        //                     }\n        //                 } else {\n        //                     console.log(`Error before`);\n        //                 }\n        //             }\n        //         );\n        //     }\n        // );\n        _this.drawingManager.setMap(map);\n      });\n    }), handleDrawHandClick = () => {\n      this.drawingManager.setDrawingMode(null);\n    });\n    handleDrawMarkerClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.MARKER);\n      google.maps.event.addListener(this.drawingManager, 'markercomplete', function (marker) {\n        marker.addListener('rightclick', () => {\n          if (currentInfoWindow) {\n            currentInfoWindow.close();\n          }\n          const infowindow = new google.maps.InfoWindow({\n            content: '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' + '<div><input type=\"checkbox\" id=\"remove\">Remove</div>'\n          });\n          infowindow.open(map, marker);\n          currentInfoWindow = infowindow;\n          infowindow.addListener('domready', () => {\n            const editCheckbox = document.getElementById('edit');\n            const removeCheckbox = document.getElementById('remove');\n            if (marker.getDraggable()) {\n              editCheckbox?.setAttribute('checked', 'true');\n            } else {\n              editCheckbox?.removeAttribute('checked');\n            }\n            editCheckbox?.addEventListener('change', () => {\n              if (marker.getDraggable()) {\n                editCheckbox?.removeAttribute('checked');\n                marker.setDraggable(null);\n              } else {\n                editCheckbox.setAttribute('checked', 'true');\n                marker.setDraggable(true);\n              }\n            });\n            removeCheckbox?.addEventListener('change', () => {\n              marker.setMap(null);\n            });\n          });\n        });\n      });\n    };\n    handleDrawCircleClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.CIRCLE);\n      google.maps.event.addListener(this.drawingManager, 'circlecomplete', function (circle) {\n        circles.push(circle);\n        circle.addListener('rightclick', function () {\n          console.log('Right click triggered');\n        });\n        circle.addListener('bounds_changed', () => {\n          const circleCenter = circle.getCenter();\n          const circleRadius = circle.getRadius();\n          VNlocations.map((item, index) => {\n            const marker = new google.maps.Marker({\n              position: item,\n              map,\n              title: `Item index ${index}`\n            });\n            const markerPosition = marker.getPosition();\n            if (markerPosition && circleCenter) {\n              if (google.maps.geometry.spherical.computeDistanceBetween(circleCenter, markerPosition) <= circleRadius) {\n                marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');\n                blueMarkers.push(marker);\n              } else {\n                marker.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');\n              }\n            } else {\n              console.log(`Error before`);\n            }\n          });\n        });\n      });\n    };\n    handleClearCircleClick = () => {\n      circles.forEach(circle => {\n        circle.setMap(null);\n      });\n      circles.length = 0;\n    };\n    handleDrawShapeClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);\n      google.maps.event.addListener(this.drawingManager, 'polygoncomplete', function (polygon) {\n        polygon.addListener('rightclick', function (event) {\n          if (currentInfoWindow) {\n            currentInfoWindow.close();\n          }\n          const infowindow = new google.maps.InfoWindow({\n            content: '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' + '<div><input type=\"checkbox\" id=\"remove\">Remove</div>'\n          });\n          infowindow.setPosition(event.latLng);\n          infowindow.open(map);\n          currentInfoWindow = infowindow;\n          infowindow.addListener('domready', () => {\n            const editCheckbox = document.getElementById('edit');\n            const removeCheckbox = document.getElementById('remove');\n            if (polygon.getDraggable()) {\n              editCheckbox?.setAttribute('checked', 'true');\n            } else {\n              editCheckbox?.removeAttribute('checked');\n            }\n            editCheckbox?.addEventListener('change', () => {\n              if (polygon.getDraggable()) {\n                editCheckbox?.removeAttribute('checked');\n                polygon.setDraggable(null);\n              } else {\n                editCheckbox.setAttribute('checked', 'true');\n                polygon.setDraggable(true);\n              }\n            });\n            removeCheckbox?.addEventListener('change', () => {\n              polygon.setMap(null);\n              infowindow.close();\n            });\n          });\n        });\n      });\n    };\n    handleDrawLineClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYLINE);\n      google.maps.event.addListener(this.drawingManager, 'polylinecomplete', function (line) {\n        line.addListener('rightclick', function (event) {\n          if (currentInfoWindow) {\n            currentInfoWindow.close();\n          }\n          const infowindow = new google.maps.InfoWindow({\n            content: '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' + '<div><input type=\"checkbox\" id=\"remove\">Remove</div>'\n          });\n          infowindow.setPosition(event.latLng);\n          infowindow.open(map);\n          currentInfoWindow = infowindow;\n          infowindow.addListener('domready', () => {\n            const editCheckbox = document.getElementById('edit');\n            const removeCheckbox = document.getElementById('remove');\n            if (line.getDraggable()) {\n              editCheckbox?.setAttribute('checked', 'true');\n            } else {\n              editCheckbox?.removeAttribute('checked');\n            }\n            editCheckbox?.addEventListener('change', () => {\n              if (line.getDraggable()) {\n                editCheckbox?.removeAttribute('checked');\n                line.setDraggable(null);\n              } else {\n                editCheckbox.setAttribute('checked', 'true');\n                line.setDraggable(true);\n              }\n            });\n            removeCheckbox?.addEventListener('change', () => {\n              line.setMap(null);\n              infowindow.close();\n            });\n          });\n        });\n      });\n    };\n    handleDrawRectangleClick = () => {\n      this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.RECTANGLE);\n      google.maps.event.addListener(this.drawingManager, 'rectanglecomplete', function (rectangle) {\n        rectangle.addListener('rightclick', function (event) {\n          if (currentInfoWindow) {\n            currentInfoWindow.close();\n          }\n          const infowindow = new google.maps.InfoWindow({\n            content: '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' + '<div><input type=\"checkbox\" id=\"remove\">Remove</div>'\n          });\n          infowindow.setPosition(event.latLng);\n          infowindow.open(map);\n          currentInfoWindow = infowindow;\n          infowindow.addListener('domready', () => {\n            const editCheckbox = document.getElementById('edit');\n            const removeCheckbox = document.getElementById('remove');\n            if (rectangle.getDraggable()) {\n              editCheckbox?.setAttribute('checked', 'true');\n            } else {\n              editCheckbox?.removeAttribute('checked');\n            }\n            editCheckbox?.addEventListener('change', () => {\n              if (rectangle.getDraggable()) {\n                editCheckbox?.removeAttribute('checked');\n                rectangle.setDraggable(null);\n              } else {\n                editCheckbox.setAttribute('checked', 'true');\n                rectangle.setDraggable(true);\n              }\n            });\n            removeCheckbox?.addEventListener('change', () => {\n              rectangle.setMap(null);\n              infowindow.close();\n            });\n          });\n        });\n      });\n    };\n    handleShowBlueMarkers = () => {\n      blueMarkers.forEach((item, index) => console.log(`item at index ${index}`));\n    };\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 19,\n  vars: 0,\n  consts: [[1, \"ms-4\", \"d-flex\", \"gap-3\"], [1, \"d-flex\", \"flex-column\", \"gap-3\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn\", \"btn-info\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn\", \"btn-dark\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-dark\", 3, \"click\"], [\"id\", \"map\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_2_listener() {\n        return ctx.handleDrawHandClick();\n      });\n      i0.ɵɵtext(3, \" Hand \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_4_listener() {\n        return ctx.handleDrawMarkerClick();\n      });\n      i0.ɵɵtext(5, \" Add a Marker \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_6_listener() {\n        return ctx.handleDrawCircleClick();\n      });\n      i0.ɵɵtext(7, \" Draw a Circle \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_8_listener() {\n        return ctx.handleDrawShapeClick();\n      });\n      i0.ɵɵtext(9, \" Draw a Shape \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_10_listener() {\n        return ctx.handleDrawLineClick();\n      });\n      i0.ɵɵtext(11, \" Draw a Line \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_12_listener() {\n        return ctx.handleDrawRectangleClick();\n      });\n      i0.ɵɵtext(13, \" Draw a Rectangle \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_14_listener() {\n        return ctx.handleClearCircleClick();\n      });\n      i0.ɵɵtext(15, \" Clear Circle \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_16_listener() {\n        return ctx.handleShowBlueMarkers();\n      });\n      i0.ɵɵtext(17, \" Show current markers \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(18, \"div\", 7);\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"#map[_ngcontent-%COMP%] {\\r\\n    height: 100dvh;\\r\\n    width: 100%;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxjQUFjO0lBQ2QsV0FBVztBQUNmIiwic291cmNlc0NvbnRlbnQiOlsiI21hcCB7XHJcbiAgICBoZWlnaHQ6IDEwMGR2aDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { AppComponent };","map":{"version":3,"names":["environment","Loader","map","VietNamCor","lat","lng","flightPlanCoordinates","triangleCoords","VNlocations","loader","apiKey","version","circles","blueMarkers","currentInfoWindow","AppComponent","constructor","http","successMarkers","coordinate","Number","ngOnInit","demo","_this","detectWater","_ref","_asyncToGenerator","url","options","method","headers","response","fetch","result","json","water","error","console","undefined","_x","_x2","apply","arguments","load","then","Map","google","maps","importLibrary","document","getElementById","center","zoom","circle1","Circle","editable","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","radius","Math","sqrt","circle2","markers","item","index","marker","Marker","position","title","addListener","close","infowindow","InfoWindow","content","open","editCheckbox","removeCheckbox","getDraggable","setAttribute","removeAttribute","addEventListener","setDraggable","setMap","getPosition","isWater","setIcon","e","latLng","drawingManager","drawing","DrawingManager","drawingMode","drawingControl","circleOptions","clickable","zIndex","handleDrawHandClick","setDrawingMode","handleDrawMarkerClick","OverlayType","MARKER","event","handleDrawCircleClick","CIRCLE","circle","push","log","circleCenter","getCenter","circleRadius","getRadius","markerPosition","geometry","spherical","computeDistanceBetween","handleClearCircleClick","forEach","length","handleDrawShapeClick","POLYGON","polygon","setPosition","handleDrawLineClick","POLYLINE","line","handleDrawRectangleClick","RECTANGLE","rectangle","handleShowBlueMarkers","i0","ɵɵdirectiveInject","i1","HttpClient","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","AppComponent_Template_button_click_2_listener","ɵɵtext","ɵɵelementEnd","AppComponent_Template_button_click_4_listener","AppComponent_Template_button_click_6_listener","AppComponent_Template_button_click_8_listener","AppComponent_Template_button_click_10_listener","AppComponent_Template_button_click_12_listener","AppComponent_Template_button_click_14_listener","AppComponent_Template_button_click_16_listener","ɵɵelement"],"sources":["/home/Workspace/FPT/AngularDemo/src/app/app.component.ts","/home/Workspace/FPT/AngularDemo/src/app/app.component.html"],"sourcesContent":["import { environment } from 'src/environments/environment.development';\nimport { Component, OnInit } from '@angular/core';\nimport { Loader } from '@googlemaps/js-api-loader';\nimport * as _ from 'lodash';\nimport { HttpClient } from '@angular/common/http';\n\nlet map: google.maps.Map;\nconst VietNamCor = { lat: 15.9031, lng: 105.8067 };\nconst flightPlanCoordinates = [\n    { lat: 37.772, lng: -122.214 },\n    { lat: 21.291, lng: -157.821 },\n    { lat: -18.142, lng: 178.431 },\n    { lat: -27.467, lng: 153.027 },\n];\n\nconst triangleCoords = [\n    { lat: 23.393396, lng: 102.14682 },\n    { lat: 22.719568, lng: 105.776716 },\n    { lat: 8.383496, lng: 104.938748 },\n    { lat: 8.383496, lng: 102.14682 },\n];\n\nconst VNlocations = [\n    { lat: 21.0278, lng: 105.8342 }, // Hanoi\n    { lat: 16.0544, lng: 108.2022 }, // Da Nang\n    { lat: 10.8231, lng: 106.6297 }, // Ho Chi Minh City\n    { lat: 12.2388, lng: 109.1967 }, // Nha Trang\n    { lat: 20.8449, lng: 106.6881 }, // Hai Phong\n    { lat: 21.0283, lng: 105.8537 }, // Bac Ninh\n    { lat: 10.9656, lng: 108.107 }, // Vung Tau\n    { lat: 21.4049, lng: 103.2055 }, // Lao Cai\n    { lat: 10.0333, lng: 105.7833 }, // Can Tho\n    { lat: 16.4692, lng: 107.5787 }, // Hue\n    { lat: 13.9833, lng: 108 }, // Quy Nhon\n    { lat: 14.0583, lng: 108.2772 }, // Tuy Hoa\n    { lat: 13.7665, lng: 109.2237 }, // Phan Rang-Thap Cham\n    { lat: 11.9325, lng: 109.1967 }, // Phan Thiet\n    { lat: 10.3833, lng: 105.4167 }, // Rach Gia\n    { lat: 21.5942, lng: 105.8481 }, // Vinh Yen\n    { lat: 20.8172, lng: 106.7244 }, // Ha Long\n    { lat: 20.9544, lng: 107.0806 }, // Thai Nguyen\n    { lat: 21.3281, lng: 103.8733 }, // Yen Bai\n];\n\nlet loader = new Loader({\n    apiKey: environment.apiKey,\n    version: 'weekly',\n});\n\nconst circles: Array<any> = [];\nconst blueMarkers: Array<any> = [];\nlet currentInfoWindow: any = null;\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnInit {\n    constructor(private http: HttpClient) {}\n\n    result: any;\n    successMarkers: Array<Object> = [];\n    coordinate: Array<Object> = [\n        {\n            lat: Number,\n            lng: Number,\n        },\n    ];\n    drawingManager: any;\n\n    ngOnInit(): void {\n        this.demo();\n    }\n\n    demo() {\n        const detectWater = async (lat?: number, lng?: number) => {\n            try {\n                const url = `https://isitwater-com.p.rapidapi.com/?latitude=${lat}&longitude=${lng}`;\n                const options = {\n                    method: 'GET',\n                    headers: {\n                        'X-RapidAPI-Key':\n                            '911f81d9e3msh5f705b8931d758cp13855bjsn19b3ba12960e',\n                        'X-RapidAPI-Host': 'isitwater-com.p.rapidapi.com',\n                    },\n                };\n                const response = await fetch(url, options);\n                const result = await response.json();\n                if (result.water) {\n                    return true;\n                }\n                return false;\n            } catch (error) {\n                console.error(error);\n                return undefined;\n            }\n        };\n\n        loader.load().then(async () => {\n            //* initial map element\n            const { Map } = (await google.maps.importLibrary(\n                'maps'\n            )) as google.maps.MapsLibrary;\n            map = new Map(document.getElementById('map') as HTMLElement, {\n                center: VietNamCor,\n                zoom: 8,\n            });\n            //* create circle instance.\n            const circle1 = new google.maps.Circle({\n                editable: true,\n                strokeColor: '#FF0000',\n                strokeOpacity: 0.8,\n                strokeWeight: 2,\n                fillColor: '#FF0000',\n                fillOpacity: 0.35,\n                map,\n                center: { lat: 16.463713, lng: 107.590866 },\n                radius: Math.sqrt(2) * 100000,\n            });\n            const circle2 = new google.maps.Circle({\n                editable: true,\n                strokeColor: '#FF0000',\n                strokeOpacity: 0.8,\n                strokeWeight: 2,\n                fillColor: '#FF0000',\n                fillOpacity: 0.35,\n                map,\n                center: { lat: 13.9833, lng: 108 },\n                radius: Math.sqrt(2) * 100000,\n            });\n\n            //* Create the polygon instance\n            // const polygon = new google.maps.Polygon({\n            //     paths: triangleCoords,\n            //     strokeColor: '#FF0000',\n            //     strokeOpacity: 0.8,\n            //     strokeWeight: 2,\n            //     fillColor: '#FF0000',\n            //     fillOpacity: 0.35,\n            // });\n\n            // const rectangle = new google.maps.Rectangle({\n            //     strokeColor: '#FF0000',\n            //     strokeOpacity: 0.8,\n            //     strokeWeight: 2,\n            //     fillColor: '#FF0000',\n            //     fillOpacity: 0.35,\n            //     map,\n            //     bounds: {\n            //         north: 23.393395,\n            //         south: 8.559559,\n            //         east: 109.464211,\n            //         west: 102.144033,\n            //     },\n            // });\n\n            // rectangle.addListener('rightclick', () => {\n            //     rectangle.setEditable(true);\n            // });\n\n            // polygon.addListener('rightclick', () => {\n            //     polygon.setEditable(true);\n            // });\n\n            // polygon.addListener('bounds_changed', () => {\n            //     console.log('event fired');\n            // });\n\n            //* Create marker instance\n            const markers = VNlocations.map(\n                (item: { lat: number; lng: number }, index: number) => {\n                    const marker = new google.maps.Marker({\n                        position: item,\n                        map,\n                        title: `Item index ${index}`,\n                    });\n\n                    marker.addListener('rightclick', () => {\n                        if (currentInfoWindow) {\n                            currentInfoWindow.close();\n                        }\n                        const infowindow = new google.maps.InfoWindow({\n                            content:\n                                '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' +\n                                '<div><input type=\"checkbox\" id=\"remove\">Remove</div>',\n                        });\n                        infowindow.open(map, marker);\n                        currentInfoWindow = infowindow;\n\n                        infowindow.addListener('domready', () => {\n                            const editCheckbox =\n                                document.getElementById('edit');\n                            const removeCheckbox =\n                                document.getElementById('remove');\n\n                            if (marker.getDraggable()) {\n                                editCheckbox?.setAttribute('checked', 'true');\n                            } else {\n                                editCheckbox?.removeAttribute('checked');\n                            }\n\n                            editCheckbox?.addEventListener('change', () => {\n                                if (marker.getDraggable()) {\n                                    editCheckbox?.removeAttribute('checked');\n                                    marker.setDraggable(false);\n                                } else {\n                                    editCheckbox.setAttribute(\n                                        'checked',\n                                        'true'\n                                    );\n                                    marker.setDraggable(true);\n                                }\n                            });\n\n                            removeCheckbox?.addEventListener('change', () => {\n                                marker.setMap(null);\n                            });\n\n                            marker.addListener('dragend', async () => {\n                                const lat = marker.getPosition()?.lat();\n                                const lng = marker.getPosition()?.lng();\n\n                                const isWater = await detectWater(lat, lng);\n\n                                if (isWater) {\n                                    marker.setIcon(\n                                        'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n                                    );\n                                } else {\n                                    marker.setIcon(\n                                        'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n                                    );\n                                }\n                            });\n                        });\n                    });\n                    // const demo1 = circle.getCenter();\n                    // const demo2 = marker.getPosition();\n\n                    // if (demo2 && demo1) {\n                    //     if (\n                    //         google.maps.geometry.spherical.computeDistanceBetween(\n                    //             demo1,\n                    //             demo2\n                    //         ) <= circle.getRadius()\n                    //     ) {\n                    //         marker.setIcon(\n                    //             'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n                    //         );\n                    //     } else {\n                    //         marker.setIcon(\n                    //             'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n                    //         );\n                    //     }\n                    // } else {\n                    //     console.log(`Error before`);\n                    // }\n                    return marker;\n                }\n            );\n\n            // rectangle.addListener('bounds_changed', () => {\n            //     const rectangleBound = rectangle.getBounds();\n            //     markers.forEach((item, index) => {\n            //         const itemPosition = item.getPosition();\n            //         if (\n            //             itemPosition &&\n            //             rectangleBound?.contains(itemPosition)\n            //         ) {\n            //             item.setIcon(\n            //                 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n            //             );\n            //         } else {\n            //             item.setIcon(\n            //                 'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n            //             );\n            //         }\n            //     });\n            // });\n\n            // this.http\n            //     .get('assets/Book1.csv', { responseType: 'text' })\n            //     .subscribe(\n            //         (data: any) => {\n            //             this.result = data.split('\\n');\n\n            //             const markers = this.result.map(\n            //                 (item: any, index: number) => {\n            // this.coordinate.push({\n            //     lat: item.split(',')[0],\n            //     lng: item.split(',')[1],\n            // });\n\n            //                     const marker = new google.maps.Marker({\n            //                         position: {\n            //                             lat: Number(item.split(',')[0]),\n            //                             lng: Number(item.split(',')[1]),\n            //                         },\n            //                         map,\n            //                         title: `Item index ${index}`,\n            //                     });\n\n            //                     return marker;\n            //                 }\n            //             );\n            //         },\n            //         (error: any) => console.log(error.error)\n            //     );\n\n            //* Create polyline instance\n            // const poly = new google.maps.Polyline({\n            //     path: flightPlanCoordinates,\n            //     geodesic: true,\n            //     strokeColor: '#FF0000',\n            //     strokeOpacity: 1.0,\n            //     strokeWeight: 2,\n            // });\n\n            // circle.addListener('bounds_changed', () => {\n            //     VNlocations.map(\n            //         (item: { lat: number; lng: number }, index: number) => {\n            //             const marker = new google.maps.Marker({\n            //                 position: item,\n            //                 map,\n            //                 title: `Item index ${index}`,\n            //             });\n            //             const demo1 = circle.getCenter();\n            //             const demo2 = marker.getPosition();\n\n            //             if (demo2 && demo1) {\n            //                 if (\n            //                     google.maps.geometry.spherical.computeDistanceBetween(\n            //                         demo1,\n            //                         demo2\n            //                     ) <= circle.getRadius()\n            //                 ) {\n            //                     marker.setIcon(\n            //                         'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n            //                     );\n            //                 } else {\n            //                     marker.setIcon(\n            //                         'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n            //                     );\n            //                 }\n            //             } else {\n            //                 console.log(`Error before`);\n            //             }\n            //         }\n            //     );\n            // });\n\n            //! Add click event listener to map instance\n            map.addListener('click', (e: any) => {\n                const lat = e.latLng.lat();\n                const lng = e.latLng.lng();\n\n            //     //! check if on water\n            //     detectWater(lat, lng);\n            // });\n\n            //! Add click event listener to marker instance\n            // marker.addListener('click', () => {\n            //     console.log('click event fired');\n            // });\n\n            // poly.setMap(map);\n            // polygon.setMap(map);\n\n            this.drawingManager = new google.maps.drawing.DrawingManager({\n                drawingMode: null,\n                drawingControl: false,\n                circleOptions: {\n                    fillColor: '#ffff00',\n                    fillOpacity: 1,\n                    strokeWeight: 5,\n                    clickable: false,\n                    editable: true,\n                    zIndex: 1,\n                },\n            });\n\n            // google.maps.event.addListener(\n            //     this.drawingManager,\n            //     'circlecomplete',\n            //     function (circle: any) {\n            //         const circleCenter = circle.getCenter();\n            //         const circleRadius = circle.getRadius();\n            //         VNlocations.map(\n            //             (item: { lat: number; lng: number }, index: number) => {\n            //                 const marker = new google.maps.Marker({\n            //                     position: item,\n            //                     map,\n            //                     title: `Item index ${index}`,\n            //                 });\n            //                 const markerPosition = marker.getPosition();\n\n            //                 if (markerPosition && circleCenter) {\n            //                     if (\n            //                         google.maps.geometry.spherical.computeDistanceBetween(\n            //                             circleCenter,\n            //                             markerPosition\n            //                         ) <= circleRadius\n            //                     ) {\n            //                         marker.setIcon(\n            //                             'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n            //                         );\n            //                         blueMarkers.push(marker);\n            //                     } else {\n            //                         marker.setIcon(\n            //                             'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n            //                         );\n            //                     }\n            //                 } else {\n            //                     console.log(`Error before`);\n            //                 }\n            //             }\n            //         );\n            //     }\n            // );\n            this.drawingManager.setMap(map);\n        });\n    }\n\n    handleDrawHandClick = () => {\n        this.drawingManager.setDrawingMode(null);\n    };\n\n    handleDrawMarkerClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.MARKER\n        );\n\n        google.maps.event.addListener(\n            this.drawingManager,\n            'markercomplete',\n            function (marker: any) {\n                marker.addListener('rightclick', () => {\n                    if (currentInfoWindow) {\n                        currentInfoWindow.close();\n                    }\n                    const infowindow = new google.maps.InfoWindow({\n                        content:\n                            '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' +\n                            '<div><input type=\"checkbox\" id=\"remove\">Remove</div>',\n                    });\n\n                    infowindow.open(map, marker);\n                    currentInfoWindow = infowindow;\n\n                    infowindow.addListener('domready', () => {\n                        const editCheckbox = document.getElementById('edit');\n                        const removeCheckbox =\n                            document.getElementById('remove');\n\n                        if (marker.getDraggable()) {\n                            editCheckbox?.setAttribute('checked', 'true');\n                        } else {\n                            editCheckbox?.removeAttribute('checked');\n                        }\n\n                        editCheckbox?.addEventListener('change', () => {\n                            if (marker.getDraggable()) {\n                                editCheckbox?.removeAttribute('checked');\n                                marker.setDraggable(null);\n                            } else {\n                                editCheckbox.setAttribute('checked', 'true');\n                                marker.setDraggable(true);\n                            }\n                        });\n\n                        removeCheckbox?.addEventListener('change', () => {\n                            marker.setMap(null);\n                        });\n                    });\n                });\n            }\n        );\n    };\n\n    handleDrawCircleClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.CIRCLE\n        );\n\n        google.maps.event.addListener(\n            this.drawingManager,\n            'circlecomplete',\n            function (circle: any) {\n                circles.push(circle);\n\n                circle.addListener('rightclick', function () {\n                    console.log('Right click triggered');\n                });\n\n                circle.addListener('bounds_changed', () => {\n                    const circleCenter = circle.getCenter();\n                    const circleRadius = circle.getRadius();\n                    VNlocations.map(\n                        (item: { lat: number; lng: number }, index: number) => {\n                            const marker = new google.maps.Marker({\n                                position: item,\n                                map,\n                                title: `Item index ${index}`,\n                            });\n                            const markerPosition = marker.getPosition();\n\n                            if (markerPosition && circleCenter) {\n                                if (\n                                    google.maps.geometry.spherical.computeDistanceBetween(\n                                        circleCenter,\n                                        markerPosition\n                                    ) <= circleRadius\n                                ) {\n                                    marker.setIcon(\n                                        'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n                                    );\n                                    blueMarkers.push(marker);\n                                } else {\n                                    marker.setIcon(\n                                        'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n                                    );\n                                }\n                            } else {\n                                console.log(`Error before`);\n                            }\n                        }\n                    );\n                });\n            }\n        );\n    };\n\n    handleClearCircleClick = () => {\n        circles.forEach((circle) => {\n            circle.setMap(null);\n        });\n\n        circles.length = 0;\n    };\n\n    handleDrawShapeClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.POLYGON\n        );\n\n        google.maps.event.addListener(\n            this.drawingManager,\n            'polygoncomplete',\n            function (polygon: any) {\n                polygon.addListener('rightclick', function (event: any) {\n                    if (currentInfoWindow) {\n                        currentInfoWindow.close();\n                    }\n                    const infowindow = new google.maps.InfoWindow({\n                        content:\n                            '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' +\n                            '<div><input type=\"checkbox\" id=\"remove\">Remove</div>',\n                    });\n\n                    infowindow.setPosition(event.latLng);\n                    infowindow.open(map);\n                    currentInfoWindow = infowindow;\n\n                    infowindow.addListener('domready', () => {\n                        const editCheckbox = document.getElementById('edit');\n                        const removeCheckbox =\n                            document.getElementById('remove');\n\n                        if (polygon.getDraggable()) {\n                            editCheckbox?.setAttribute('checked', 'true');\n                        } else {\n                            editCheckbox?.removeAttribute('checked');\n                        }\n\n                        editCheckbox?.addEventListener('change', () => {\n                            if (polygon.getDraggable()) {\n                                editCheckbox?.removeAttribute('checked');\n                                polygon.setDraggable(null);\n                            } else {\n                                editCheckbox.setAttribute('checked', 'true');\n                                polygon.setDraggable(true);\n                            }\n                        });\n\n                        removeCheckbox?.addEventListener('change', () => {\n                            polygon.setMap(null);\n                            infowindow.close();\n                        });\n                    });\n                });\n            }\n        );\n    };\n    handleDrawLineClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.POLYLINE\n        );\n\n        google.maps.event.addListener(\n            this.drawingManager,\n            'polylinecomplete',\n            function (line: any) {\n                line.addListener('rightclick', function (event: any) {\n                    if (currentInfoWindow) {\n                        currentInfoWindow.close();\n                    }\n                    const infowindow = new google.maps.InfoWindow({\n                        content:\n                            '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' +\n                            '<div><input type=\"checkbox\" id=\"remove\">Remove</div>',\n                    });\n\n                    infowindow.setPosition(event.latLng);\n                    infowindow.open(map);\n                    currentInfoWindow = infowindow;\n\n                    infowindow.addListener('domready', () => {\n                        const editCheckbox = document.getElementById('edit');\n                        const removeCheckbox =\n                            document.getElementById('remove');\n\n                        if (line.getDraggable()) {\n                            editCheckbox?.setAttribute('checked', 'true');\n                        } else {\n                            editCheckbox?.removeAttribute('checked');\n                        }\n\n                        editCheckbox?.addEventListener('change', () => {\n                            if (line.getDraggable()) {\n                                editCheckbox?.removeAttribute('checked');\n                                line.setDraggable(null);\n                            } else {\n                                editCheckbox.setAttribute('checked', 'true');\n                                line.setDraggable(true);\n                            }\n                        });\n\n                        removeCheckbox?.addEventListener('change', () => {\n                            line.setMap(null);\n                            infowindow.close();\n                        });\n                    });\n                });\n            }\n        );\n    };\n    handleDrawRectangleClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.RECTANGLE\n        );\n\n        google.maps.event.addListener(\n            this.drawingManager,\n            'rectanglecomplete',\n            function (rectangle: any) {\n                rectangle.addListener('rightclick', function (event: any) {\n                    if (currentInfoWindow) {\n                        currentInfoWindow.close();\n                    }\n                    const infowindow = new google.maps.InfoWindow({\n                        content:\n                            '<div><input type=\"checkbox\" id=\"edit\">Edit</div>' +\n                            '<div><input type=\"checkbox\" id=\"remove\">Remove</div>',\n                    });\n\n                    infowindow.setPosition(event.latLng);\n                    infowindow.open(map);\n                    currentInfoWindow = infowindow;\n\n                    infowindow.addListener('domready', () => {\n                        const editCheckbox = document.getElementById('edit');\n                        const removeCheckbox =\n                            document.getElementById('remove');\n\n                        if (rectangle.getDraggable()) {\n                            editCheckbox?.setAttribute('checked', 'true');\n                        } else {\n                            editCheckbox?.removeAttribute('checked');\n                        }\n\n                        editCheckbox?.addEventListener('change', () => {\n                            if (rectangle.getDraggable()) {\n                                editCheckbox?.removeAttribute('checked');\n                                rectangle.setDraggable(null);\n                            } else {\n                                editCheckbox.setAttribute('checked', 'true');\n                                rectangle.setDraggable(true);\n                            }\n                        });\n\n                        removeCheckbox?.addEventListener('change', () => {\n                            rectangle.setMap(null);\n                            infowindow.close();\n                        });\n                    });\n                });\n            }\n        );\n    };\n\n    handleShowBlueMarkers = () => {\n        blueMarkers.forEach((item, index) =>\n            console.log(`item at index ${index}`)\n        );\n    };\n}\n","<div class=\"ms-4 d-flex gap-3\">\n    <div class=\"d-flex flex-column gap-3\">\n        <button\n            (click)=\"handleDrawHandClick()\"\n            type=\"button\"\n            class=\"btn btn-primary\"\n        >\n            Hand\n        </button>\n        <button\n            (click)=\"handleDrawMarkerClick()\"\n            type=\"button\"\n            class=\"btn btn-secondary\"\n        >\n            Add a Marker\n        </button>\n        <button\n            (click)=\"handleDrawCircleClick()\"\n            type=\"button\"\n            class=\"btn btn-primary\"\n        >\n            Draw a Circle\n        </button>\n        <button\n            (click)=\"handleDrawShapeClick()\"\n            type=\"button\"\n            class=\"btn btn btn-info\"\n        >\n            Draw a Shape\n        </button>\n        <button\n            (click)=\"handleDrawLineClick()\"\n            type=\"button\"\n            class=\"btn btn btn-dark\"\n        >\n            Draw a Line\n        </button>\n        <button\n            (click)=\"handleDrawRectangleClick()\"\n            type=\"button\"\n            class=\"btn btn-dark\"\n        >\n            Draw a Rectangle\n        </button>\n        <button\n            (click)=\"handleClearCircleClick()\"\n            type=\"button\"\n            class=\"btn btn-dark\"\n        >\n            Clear Circle\n        </button>\n        <button\n            (click)=\"handleShowBlueMarkers()\"\n            type=\"button\"\n            class=\"btn btn-dark\"\n        >\n            Show current markers\n        </button>\n    </div>\n    <div id=\"map\"></div>\n</div>\n"],"mappings":"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N,YAAY,CAACG,YAAY,CACrB,SAAS,EACT,MAAM,CACT;gBACDb,MAAM,CAACgB,YAAY,CAAC,IAAI,CAAC;;YAEjC,CAAC,CAAC;YAEFL,cAAc,EAAEI,gBAAgB,CAAC,QAAQ,EAAE,MAAK;cAC5Cf,MAAM,CAACiB,MAAM,CAAC,IAAI,CAAC;YACvB,CAAC,CAAC;YAEFjB,MAAM,CAACI,WAAW,CAAC,SAAS,eAAA9C,iBAAA,CAAE,aAAW;cACrC,MAAMtB,GAAG,GAAGgE,MAAM,CAACkB,WAAW,EAAE,EAAElF,GAAG,EAAE;cACvC,MAAMC,GAAG,GAAG+D,MAAM,CAACkB,WAAW,EAAE,EAAEjF,GAAG,EAAE;cAEvC,MAAMkF,OAAO,SAAS/D,WAAW,CAACpB,GAAG,EAAEC,GAAG,CAAC;cAE3C,IAAIkF,OAAO,EAAE;gBACTnB,MAAM,CAACoB,OAAO,CACV,uDAAuD,CAC1D;eACJ,MAAM;gBACHpB,MAAM,CAACoB,OAAO,CACV,sDAAsD,CACzD;;YAET,CAAC,EAAC;UACN,CAAC,CAAC;QACN,CAAC,CAAC;QACF;QACA;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,OAAOpB,MAAM;MACjB,CAAC,CACJ;MAED;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACAlE,GAAG,CAACsE,WAAW,CAAC,OAAO,EAAGiB,CAAM,I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"},"metadata":{},"sourceType":"module","externalDependencies":[]}