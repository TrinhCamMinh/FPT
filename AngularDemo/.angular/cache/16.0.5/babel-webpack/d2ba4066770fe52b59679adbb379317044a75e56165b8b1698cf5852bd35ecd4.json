{"ast":null,"code":"import _asyncToGenerator from \"/home/Workspace/FPT/AngularDemo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from 'src/environments/environment.development';\nimport { Loader } from '@googlemaps/js-api-loader';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet map;\nconst VietNamCor = {\n  lat: 15.9031,\n  lng: 105.8067\n};\nconst flightPlanCoordinates = [{\n  lat: 37.772,\n  lng: -122.214\n}, {\n  lat: 21.291,\n  lng: -157.821\n}, {\n  lat: -18.142,\n  lng: 178.431\n}, {\n  lat: -27.467,\n  lng: 153.027\n}];\nconst triangleCoords = [{\n  lat: 23.393396,\n  lng: 102.14682\n}, {\n  lat: 22.719568,\n  lng: 105.776716\n}, {\n  lat: 8.383496,\n  lng: 104.938748\n}, {\n  lat: 8.383496,\n  lng: 102.14682\n}];\nconst VNlocations = [{\n  lat: 21.0278,\n  lng: 105.8342\n}, {\n  lat: 16.0544,\n  lng: 108.2022\n}, {\n  lat: 10.8231,\n  lng: 106.6297\n}, {\n  lat: 12.2388,\n  lng: 109.1967\n}, {\n  lat: 20.8449,\n  lng: 106.6881\n}, {\n  lat: 21.0283,\n  lng: 105.8537\n}, {\n  lat: 10.9656,\n  lng: 108.107\n}, {\n  lat: 21.4049,\n  lng: 103.2055\n}, {\n  lat: 10.0333,\n  lng: 105.7833\n}, {\n  lat: 16.4692,\n  lng: 107.5787\n}, {\n  lat: 13.9833,\n  lng: 108\n}, {\n  lat: 14.0583,\n  lng: 108.2772\n}, {\n  lat: 13.7665,\n  lng: 109.2237\n}, {\n  lat: 11.9325,\n  lng: 109.1967\n}, {\n  lat: 10.3833,\n  lng: 105.4167\n}, {\n  lat: 21.5942,\n  lng: 105.8481\n}, {\n  lat: 20.8172,\n  lng: 106.7244\n}, {\n  lat: 20.9544,\n  lng: 107.0806\n}, {\n  lat: 21.3281,\n  lng: 103.8733\n} // Yen Bai\n];\n\nlet loader = new Loader({\n  apiKey: environment.apiKey,\n  version: 'weekly'\n});\nclass AppComponent {\n  constructor(http) {\n    this.http = http;\n    this.coordinate = [{\n      lat: Number,\n      lng: Number\n    }];\n  }\n  ngOnInit() {\n    this.demo();\n  }\n  demo() {\n    var _this = this;\n    loader.load().then( /*#__PURE__*/_asyncToGenerator(function* () {\n      //* initial map element\n      const {\n        Map\n      } = yield google.maps.importLibrary('maps');\n      map = new Map(document.getElementById('map'), {\n        center: VietNamCor,\n        zoom: 8\n      });\n      //* create circle instance.\n      // const circle = new google.maps.Circle({\n      //     editable: true,\n      //     strokeColor: '#FF0000',\n      //     strokeOpacity: 0.8,\n      //     strokeWeight: 2,\n      //     fillColor: '#FF0000',\n      //     fillOpacity: 0.35,\n      //     map,\n      //     center: { lat: 16.463713, lng: 107.590866 },\n      //     radius: Math.sqrt(2) * 100000,\n      // });\n      //* Create the polygon instance\n      // const polygon = new google.maps.Polygon({\n      //     paths: triangleCoords,\n      //     strokeColor: '#FF0000',\n      //     strokeOpacity: 0.8,\n      //     strokeWeight: 2,\n      //     fillColor: '#FF0000',\n      //     fillOpacity: 0.35,\n      // });\n      //* Create marker instance\n      // const markers = VNlocations.map(\n      //     (item: { lat: number; lng: number }, index: number) => {\n      //         const marker = new google.maps.Marker({\n      //             position: item,\n      //             map,\n      //             title: `Item index ${index}`,\n      //         });\n      //         const demo1 = circle.getCenter();\n      //         const demo2 = marker.getPosition();\n      //         if (demo2 && demo1) {\n      //             if (\n      //                 google.maps.geometry.spherical.computeDistanceBetween(\n      //                     demo1,\n      //                     demo2\n      //                 ) <= circle.getRadius()\n      //             ) {\n      //                 marker.setIcon(\n      //                     'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n      //                 );\n      //             } else {\n      //                 marker.setIcon(\n      //                     'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n      //                 );\n      //             }\n      //         } else {\n      //             console.log(`Error before`);\n      //         }\n      //     }\n      // );\n      _this.http.get('assets/Book1.csv', {\n        responseType: 'text'\n      }).subscribe(data => {\n        _this.result = data.split('\\n');\n        const markers = _this.result.map((item, index) => {\n          // this.coordinate.push({\n          //     lat: item.split(',')[0],\n          //     lng: item.split(',')[1],\n          // });\n          const marker = new google.maps.Marker({\n            position: {\n              lat: Number(item.split(',')[0]),\n              lng: Number(item.split(',')[1])\n            },\n            map,\n            title: `Item index ${index}`\n          });\n          return marker;\n        });\n        console.log(markers);\n      }, error => console.log(error.error));\n      //* Create polyline instance\n      // const poly = new google.maps.Polyline({\n      //     path: flightPlanCoordinates,\n      //     geodesic: true,\n      //     strokeColor: '#FF0000',\n      //     strokeOpacity: 1.0,\n      //     strokeWeight: 2,\n      // });\n      //! Add click event listener to map instance\n      // map.addListener('click', (e: any) => {\n      //     const lat = e.latLng.lat();\n      //     const lng = e.latLng.lng();\n      //     //! check if on water\n      //     detectWater(lat, lng);\n      // });\n      //! Add click event listener to marker instance\n      // marker.addListener('click', () => {\n      //     console.log('click event fired');\n      // });\n      // poly.setMap(map);\n      // polygon.setMap(map);\n      // const detectWater = async (lat: number, lng: number) => {\n      //     try {\n      //         const url = `https://isitwater-com.p.rapidapi.com/?latitude=${lat}&longitude=${lng}`;\n      //         const options = {\n      //             method: 'GET',\n      //             headers: {\n      //                 'X-RapidAPI-Key':\n      //                     '911f81d9e3msh5f705b8931d758cp13855bjsn19b3ba12960e',\n      //                 'X-RapidAPI-Host': 'isitwater-com.p.rapidapi.com',\n      //             },\n      //         };\n      //         const response = await fetch(url, options);\n      //         const result = await response.json();\n      //         console.log(result);\n      //         if (result.water) {\n      //             return alert('You clicked outside the land!');\n      //         }\n      //         return alert('You clicked inside the land!');\n      //     } catch (error) {\n      //         console.error(error);\n      //     }\n      // };\n    }));\n  }\n}\n\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 1,\n  vars: 0,\n  consts: [[\"id\", \"map\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0);\n    }\n  },\n  styles: [\"#map[_ngcontent-%COMP%] {\\r\\n    height: 100dvh;\\r\\n    width: 100%;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxjQUFjO0lBQ2QsV0FBVztBQUNmIiwic291cmNlc0NvbnRlbnQiOlsiI21hcCB7XHJcbiAgICBoZWlnaHQ6IDEwMGR2aDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { AppComponent };","map":{"version":3,"names":["environment","Loader","map","VietNamCor","lat","lng","flightPlanCoordinates","triangleCoords","VNlocations","loader","apiKey","version","AppComponent","constructor","http","coordinate","Number","ngOnInit","demo","_this","load","then","_asyncToGenerator","Map","google","maps","importLibrary","document","getElementById","center","zoom","get","responseType","subscribe","data","result","split","markers","item","index","marker","Marker","position","title","console","log","error","i0","ɵɵdirectiveInject","i1","HttpClient","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵelement"],"sources":["/home/Workspace/FPT/AngularDemo/src/app/app.component.ts","/home/Workspace/FPT/AngularDemo/src/app/app.component.html"],"sourcesContent":["import { environment } from 'src/environments/environment.development';\nimport { Component, OnInit } from '@angular/core';\nimport { Loader } from '@googlemaps/js-api-loader';\nimport { MarkerClusterer } from \"@googlemaps/markerclusterer\";\nimport * as _ from 'lodash';\nimport { HttpClient } from '@angular/common/http';\n\nlet map: google.maps.Map;\nconst VietNamCor = { lat: 15.9031, lng: 105.8067 };\nconst flightPlanCoordinates = [\n    { lat: 37.772, lng: -122.214 },\n    { lat: 21.291, lng: -157.821 },\n    { lat: -18.142, lng: 178.431 },\n    { lat: -27.467, lng: 153.027 },\n];\n\nconst triangleCoords = [\n    { lat: 23.393396, lng: 102.14682 },\n    { lat: 22.719568, lng: 105.776716 },\n    { lat: 8.383496, lng: 104.938748 },\n    { lat: 8.383496, lng: 102.14682 },\n];\n\nconst VNlocations = [\n    { lat: 21.0278, lng: 105.8342 }, // Hanoi\n    { lat: 16.0544, lng: 108.2022 }, // Da Nang\n    { lat: 10.8231, lng: 106.6297 }, // Ho Chi Minh City\n    { lat: 12.2388, lng: 109.1967 }, // Nha Trang\n    { lat: 20.8449, lng: 106.6881 }, // Hai Phong\n    { lat: 21.0283, lng: 105.8537 }, // Bac Ninh\n    { lat: 10.9656, lng: 108.107 }, // Vung Tau\n    { lat: 21.4049, lng: 103.2055 }, // Lao Cai\n    { lat: 10.0333, lng: 105.7833 }, // Can Tho\n    { lat: 16.4692, lng: 107.5787 }, // Hue\n    { lat: 13.9833, lng: 108 }, // Quy Nhon\n    { lat: 14.0583, lng: 108.2772 }, // Tuy Hoa\n    { lat: 13.7665, lng: 109.2237 }, // Phan Rang-Thap Cham\n    { lat: 11.9325, lng: 109.1967 }, // Phan Thiet\n    { lat: 10.3833, lng: 105.4167 }, // Rach Gia\n    { lat: 21.5942, lng: 105.8481 }, // Vinh Yen\n    { lat: 20.8172, lng: 106.7244 }, // Ha Long\n    { lat: 20.9544, lng: 107.0806 }, // Thai Nguyen\n    { lat: 21.3281, lng: 103.8733 }, // Yen Bai\n];\n\nlet loader = new Loader({\n    apiKey: environment.apiKey,\n    version: 'weekly',\n});\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnInit {\n    constructor(private http: HttpClient) {}\n\n    result: any;\n    coordinate: Array<Object> = [\n        {\n            lat: Number,\n            lng: Number,\n        },\n    ];\n\n    ngOnInit(): void {\n        this.demo();\n    }\n\n    demo() {\n        loader.load().then(async () => {\n            //* initial map element\n            const { Map } = (await google.maps.importLibrary(\n                'maps'\n            )) as google.maps.MapsLibrary;\n            map = new Map(document.getElementById('map') as HTMLElement, {\n                center: VietNamCor,\n                zoom: 8,\n            });\n\n            //* create circle instance.\n            // const circle = new google.maps.Circle({\n            //     editable: true,\n            //     strokeColor: '#FF0000',\n            //     strokeOpacity: 0.8,\n            //     strokeWeight: 2,\n            //     fillColor: '#FF0000',\n            //     fillOpacity: 0.35,\n            //     map,\n            //     center: { lat: 16.463713, lng: 107.590866 },\n            //     radius: Math.sqrt(2) * 100000,\n            // });\n\n            //* Create the polygon instance\n            // const polygon = new google.maps.Polygon({\n            //     paths: triangleCoords,\n            //     strokeColor: '#FF0000',\n            //     strokeOpacity: 0.8,\n            //     strokeWeight: 2,\n            //     fillColor: '#FF0000',\n            //     fillOpacity: 0.35,\n            // });\n\n            //* Create marker instance\n            // const markers = VNlocations.map(\n            //     (item: { lat: number; lng: number }, index: number) => {\n            //         const marker = new google.maps.Marker({\n            //             position: item,\n            //             map,\n            //             title: `Item index ${index}`,\n            //         });\n            //         const demo1 = circle.getCenter();\n            //         const demo2 = marker.getPosition();\n\n            //         if (demo2 && demo1) {\n            //             if (\n            //                 google.maps.geometry.spherical.computeDistanceBetween(\n            //                     demo1,\n            //                     demo2\n            //                 ) <= circle.getRadius()\n            //             ) {\n            //                 marker.setIcon(\n            //                     'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n            //                 );\n            //             } else {\n            //                 marker.setIcon(\n            //                     'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n            //                 );\n            //             }\n            //         } else {\n            //             console.log(`Error before`);\n            //         }\n            //     }\n            // );\n\n            this.http\n                .get('assets/Book1.csv', { responseType: 'text' })\n                .subscribe(\n                    (data: any) => {\n                        this.result = data.split('\\n');\n\n                        const markers = this.result.map(\n                            (item: any, index: number) => {\n                                // this.coordinate.push({\n                                //     lat: item.split(',')[0],\n                                //     lng: item.split(',')[1],\n                                // });\n\n                                const marker = new google.maps.Marker({\n                                    position: {\n                                        lat: Number(item.split(',')[0]),\n                                        lng: Number(item.split(',')[1]),\n                                    },\n                                    map,\n                                    title: `Item index ${index}`,\n                                });\n\n                                return marker;\n                            }\n                        );\n\n                        console.log(markers);\n                    },\n                    (error: any) => console.log(error.error)\n                );\n\n            //* Create polyline instance\n            // const poly = new google.maps.Polyline({\n            //     path: flightPlanCoordinates,\n            //     geodesic: true,\n            //     strokeColor: '#FF0000',\n            //     strokeOpacity: 1.0,\n            //     strokeWeight: 2,\n            // });\n\n            //! Add click event listener to map instance\n            // map.addListener('click', (e: any) => {\n            //     const lat = e.latLng.lat();\n            //     const lng = e.latLng.lng();\n\n            //     //! check if on water\n            //     detectWater(lat, lng);\n            // });\n\n            //! Add click event listener to marker instance\n            // marker.addListener('click', () => {\n            //     console.log('click event fired');\n            // });\n\n            // poly.setMap(map);\n            // polygon.setMap(map);\n\n            // const detectWater = async (lat: number, lng: number) => {\n            //     try {\n            //         const url = `https://isitwater-com.p.rapidapi.com/?latitude=${lat}&longitude=${lng}`;\n            //         const options = {\n            //             method: 'GET',\n            //             headers: {\n            //                 'X-RapidAPI-Key':\n            //                     '911f81d9e3msh5f705b8931d758cp13855bjsn19b3ba12960e',\n            //                 'X-RapidAPI-Host': 'isitwater-com.p.rapidapi.com',\n            //             },\n            //         };\n            //         const response = await fetch(url, options);\n            //         const result = await response.json();\n            //         console.log(result);\n            //         if (result.water) {\n            //             return alert('You clicked outside the land!');\n            //         }\n            //         return alert('You clicked inside the land!');\n            //     } catch (error) {\n            //         console.error(error);\n            //     }\n            // };\n        });\n    }\n}\n","<div id=\"map\"></div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}