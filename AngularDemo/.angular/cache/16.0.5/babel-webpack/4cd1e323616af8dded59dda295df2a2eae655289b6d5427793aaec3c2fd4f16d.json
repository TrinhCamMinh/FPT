{"ast":null,"code":"import _asyncToGenerator from \"/home/Workspace/FPT/AngularDemo/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from 'src/environments/environment.development';\nimport { Loader } from '@googlemaps/js-api-loader';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet map;\nconst VietNamCor = {\n  lat: 15.9031,\n  lng: 105.8067\n};\nconst flightPlanCoordinates = [{\n  lat: 37.772,\n  lng: -122.214\n}, {\n  lat: 21.291,\n  lng: -157.821\n}, {\n  lat: -18.142,\n  lng: 178.431\n}, {\n  lat: -27.467,\n  lng: 153.027\n}];\nconst triangleCoords = [{\n  lat: 23.393396,\n  lng: 102.14682\n}, {\n  lat: 22.719568,\n  lng: 105.776716\n}, {\n  lat: 8.383496,\n  lng: 104.938748\n}, {\n  lat: 8.383496,\n  lng: 102.14682\n}];\nconst VNlocations = [{\n  lat: 21.0278,\n  lng: 105.8342\n}, {\n  lat: 16.0544,\n  lng: 108.2022\n}, {\n  lat: 10.8231,\n  lng: 106.6297\n}, {\n  lat: 12.2388,\n  lng: 109.1967\n}, {\n  lat: 20.8449,\n  lng: 106.6881\n}, {\n  lat: 21.0283,\n  lng: 105.8537\n}, {\n  lat: 10.9656,\n  lng: 108.107\n}, {\n  lat: 21.4049,\n  lng: 103.2055\n}, {\n  lat: 10.0333,\n  lng: 105.7833\n}, {\n  lat: 16.4692,\n  lng: 107.5787\n}, {\n  lat: 13.9833,\n  lng: 108\n}, {\n  lat: 14.0583,\n  lng: 108.2772\n}, {\n  lat: 13.7665,\n  lng: 109.2237\n}, {\n  lat: 11.9325,\n  lng: 109.1967\n}, {\n  lat: 10.3833,\n  lng: 105.4167\n}, {\n  lat: 21.5942,\n  lng: 105.8481\n}, {\n  lat: 20.8172,\n  lng: 106.7244\n}, {\n  lat: 20.9544,\n  lng: 107.0806\n}, {\n  lat: 21.3281,\n  lng: 103.8733\n} // Yen Bai\n];\n\nlet loader = new Loader({\n  apiKey: environment.apiKey,\n  version: 'weekly'\n});\nconst circles = [];\nconst blueMarkers = [];\nclass AppComponent {\n  constructor(http) {\n    this.http = http;\n    this.successMarkers = [];\n    this.coordinate = [{\n      lat: Number,\n      lng: Number\n    }];\n  }\n  ngOnInit() {\n    this.demo();\n  }\n  demo() {\n    loader.load().then( /*#__PURE__*/_asyncToGenerator(function* () {\n      //* initial map element\n      const {\n        Map\n      } = yield google.maps.importLibrary('maps');\n      map = new Map(document.getElementById('map'), {\n        center: VietNamCor,\n        zoom: 8\n      });\n      const infowindow = new google.maps.InfoWindow({\n        content: '<div><input type=\"checkbox\" id=\"edit\" checked=true>Edit</div>' + '<div><input type=\"checkbox\" id=\"remove\">Remove</div>'\n      });\n      //* create circle instance.\n      // const circle = new google.maps.Circle({\n      //     editable: true,\n      //     strokeColor: '#FF0000',\n      //     strokeOpacity: 0.8,\n      //     strokeWeight: 2,\n      //     fillColor: '#FF0000',\n      //     fillOpacity: 0.35,\n      //     map,\n      //     center: { lat: 16.463713, lng: 107.590866 },\n      //     radius: Math.sqrt(2) * 100000,\n      // });\n      //* Create the polygon instance\n      // const polygon = new google.maps.Polygon({\n      //     paths: triangleCoords,\n      //     strokeColor: '#FF0000',\n      //     strokeOpacity: 0.8,\n      //     strokeWeight: 2,\n      //     fillColor: '#FF0000',\n      //     fillOpacity: 0.35,\n      // });\n      //* Create marker instance\n      const markers = VNlocations.map((item, index) => {\n        const marker = new google.maps.Marker({\n          position: item,\n          map,\n          title: `Item index ${index}`\n        });\n        marker.addListener('rightclick', () => {\n          console.log('right event');\n          infowindow.open(map, marker);\n          infowindow.addListener('domready', () => {\n            const editCheckbox = document.getElementById('edit');\n            const removeCheckbox = document.getElementById('remove');\n            editCheckbox?.addEventListener('change', () => {\n              if (editCheckbox.classList.contains('dragTrue')) editCheckbox.a;\n            });\n            {\n              editCheckbox.classList.remove('dragTrue');\n              marker.setDraggable(false);\n            }\n            {\n              editCheckbox.classList.add('dragTrue');\n              marker.setDraggable(true);\n            }\n          });\n          removeCheckbox?.addEventListener('change', () => {\n            marker.setMap(null);\n          });\n        });\n      });\n      // const demo1 = circle.getCenter();\n      // const demo2 = marker.getPosition();\n      // if (demo2 && demo1) {\n      //     if (\n      //         google.maps.geometry.spherical.computeDistanceBetween(\n      //             demo1,\n      //             demo2\n      //         ) <= circle.getRadius()\n      //     ) {\n      //         marker.setIcon(\n      //             'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n      //         );\n      //     } else {\n      //         marker.setIcon(\n      //             'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n      //         );\n      //     }\n      // } else {\n      //     console.log(`Error before`);\n      // }\n    }));\n    // this.http\n    //     .get('assets/Book1.csv', { responseType: 'text' })\n    //     .subscribe(\n    //         (data: any) => {\n    //             this.result = data.split('\\n');\n    //             const markers = this.result.map(\n    //                 (item: any, index: number) => {\n    //                     // this.coordinate.push({\n    //                     //     lat: item.split(',')[0],\n    //                     //     lng: item.split(',')[1],\n    //                     // });\n    //                     const marker = new google.maps.Marker({\n    //                         position: {\n    //                             lat: Number(item.split(',')[0]),\n    //                             lng: Number(item.split(',')[1]),\n    //                         },\n    //                         map,\n    //                         title: `Item index ${index}`,\n    //                     });\n    //                     return marker;\n    //                 }\n    //             );\n    //         },\n    //         (error: any) => console.log(error.error)\n    //     );\n    //* Create polyline instance\n    // const poly = new google.maps.Polyline({\n    //     path: flightPlanCoordinates,\n    //     geodesic: true,\n    //     strokeColor: '#FF0000',\n    //     strokeOpacity: 1.0,\n    //     strokeWeight: 2,\n    // });\n    // circle.addListener('bounds_changed', () => {\n    //     VNlocations.map(\n    //         (item: { lat: number; lng: number }, index: number) => {\n    //             const marker = new google.maps.Marker({\n    //                 position: item,\n    //                 map,\n    //                 title: `Item index ${index}`,\n    //             });\n    //             const demo1 = circle.getCenter();\n    //             const demo2 = marker.getPosition();\n    //             if (demo2 && demo1) {\n    //                 if (\n    //                     google.maps.geometry.spherical.computeDistanceBetween(\n    //                         demo1,\n    //                         demo2\n    //                     ) <= circle.getRadius()\n    //                 ) {\n    //                     marker.setIcon(\n    //                         'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n    //                     );\n    //                 } else {\n    //                     marker.setIcon(\n    //                         'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n    //                     );\n    //                 }\n    //             } else {\n    //                 console.log(`Error before`);\n    //             }\n    //         }\n    //     );\n    // });\n    //! Add click event listener to map instance\n    // map.addListener('click', (e: any) => {\n    //     const lat = e.latLng.lat();\n    //     const lng = e.latLng.lng();\n    //     //! check if on water\n    //     detectWater(lat, lng);\n    // });\n    //! Add click event listener to marker instance\n    // marker.addListener('click', () => {\n    //     console.log('click event fired');\n    // });\n    // poly.setMap(map);\n    // polygon.setMap(map);\n    this.drawingManager = new google.maps.drawing.DrawingManager({\n      drawingMode: null,\n      drawingControl: false,\n      circleOptions: {\n        fillColor: '#ffff00',\n        fillOpacity: 1,\n        strokeWeight: 5,\n        clickable: false,\n        editable: true,\n        zIndex: 1\n      }\n    });\n    // google.maps.event.addListener(\n    //     this.drawingManager,\n    //     'circlecomplete',\n    //     function (circle: any) {\n    //         const circleCenter = circle.getCenter();\n    //         const circleRadius = circle.getRadius();\n    //         VNlocations.map(\n    //             (item: { lat: number; lng: number }, index: number) => {\n    //                 const marker = new google.maps.Marker({\n    //                     position: item,\n    //                     map,\n    //                     title: `Item index ${index}`,\n    //                 });\n    //                 const markerPosition = marker.getPosition();\n    //                 if (markerPosition && circleCenter) {\n    //                     if (\n    //                         google.maps.geometry.spherical.computeDistanceBetween(\n    //                             circleCenter,\n    //                             markerPosition\n    //                         ) <= circleRadius\n    //                     ) {\n    //                         marker.setIcon(\n    //                             'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n    //                         );\n    //                         blueMarkers.push(marker);\n    //                     } else {\n    //                         marker.setIcon(\n    //                             'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n    //                         );\n    //                     }\n    //                 } else {\n    //                     console.log(`Error before`);\n    //                 }\n    //             }\n    //         );\n    //     }\n    // );\n    this.drawingManager.setMap(map);\n    // const detectWater = async (lat: number, lng: number) => {\n    //     try {\n    //         const url = `https://isitwater-com.p.rapidapi.com/?latitude=${lat}&longitude=${lng}`;\n    //         const options = {\n    //             method: 'GET',\n    //             headers: {\n    //                 'X-RapidAPI-Key':\n    //                     '911f81d9e3msh5f705b8931d758cp13855bjsn19b3ba12960e',\n    //                 'X-RapidAPI-Host': 'isitwater-com.p.rapidapi.com',\n    //             },\n    //         };\n    //         const response = await fetch(url, options);\n    //         const result = await response.json();\n    //         console.log(result);\n    //         if (result.water) {\n    //             return alert('You clicked outside the land!');\n    //         }\n    //         return alert('You clicked inside the land!');\n    //     } catch (error) {\n    //         console.error(error);\n    //     }\n    // };\n  }\n}\n\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 19,\n  vars: 0,\n  consts: [[1, \"ms-4\", \"d-flex\", \"gap-3\"], [1, \"d-flex\", \"flex-column\", \"gap-3\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn\", \"btn-info\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn\", \"btn-dark\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-dark\", 3, \"click\"], [\"id\", \"map\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_2_listener() {\n        return ctx.handleDrawHandClick();\n      });\n      i0.ɵɵtext(3, \" Hand \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_4_listener() {\n        return ctx.handleDrawMarkerClick();\n      });\n      i0.ɵɵtext(5, \" Add a Marker \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_6_listener() {\n        return ctx.handleDrawCircleClick();\n      });\n      i0.ɵɵtext(7, \" Draw a Circle \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_8_listener() {\n        return ctx.handleDrawShapeClick();\n      });\n      i0.ɵɵtext(9, \" Draw a Shape \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_10_listener() {\n        return ctx.handleDrawLineClick();\n      });\n      i0.ɵɵtext(11, \" Draw a Line \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_12_listener() {\n        return ctx.handleDrawRectangleClick();\n      });\n      i0.ɵɵtext(13, \" Draw a Rectangle \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_14_listener() {\n        return ctx.handleClearCircleClick();\n      });\n      i0.ɵɵtext(15, \" Clear Circle \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_16_listener() {\n        return ctx.handleShowBlueMarkers();\n      });\n      i0.ɵɵtext(17, \" Show current markers \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(18, \"div\", 7);\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"#map[_ngcontent-%COMP%] {\\r\\n    height: 100dvh;\\r\\n    width: 100%;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxjQUFjO0lBQ2QsV0FBVztBQUNmIiwic291cmNlc0NvbnRlbnQiOlsiI21hcCB7XHJcbiAgICBoZWlnaHQ6IDEwMGR2aDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { AppComponent };\nhandleDrawHandClick = () => {\n  this.drawingManager.setDrawingMode(null);\n};\nhandleDrawMarkerClick = () => {\n  this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.MARKER);\n};\nhandleDrawCircleClick = () => {\n  this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.CIRCLE);\n  google.maps.event.addListener(this.drawingManager, 'circlecomplete', function (circle) {\n    circles.push(circle);\n    console.log('big event');\n    circle.addListener('bounds_changed', () => {\n      const circleCenter = circle.getCenter();\n      const circleRadius = circle.getRadius();\n      VNlocations.map((item, index) => {\n        const marker = new google.maps.Marker({\n          position: item,\n          map,\n          title: `Item index ${index}`\n        });\n        const markerPosition = marker.getPosition();\n        if (markerPosition && circleCenter) {\n          if (google.maps.geometry.spherical.computeDistanceBetween(circleCenter, markerPosition) <= circleRadius) {\n            marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');\n            console.log('success');\n            blueMarkers.push(marker);\n          } else {\n            marker.setIcon('http://maps.google.com/mapfiles/ms/icons/red-dot.png');\n          }\n        } else {\n          console.log(`Error before`);\n        }\n      });\n    });\n  });\n};\nhandleClearCircleClick = () => {\n  circles.forEach(circle => {\n    circle.setMap(null);\n  });\n  circles.length = 0;\n};\nhandleDrawShapeClick = () => {\n  this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);\n};\nhandleDrawLineClick = () => {\n  this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYLINE);\n};\nhandleDrawRectangleClick = () => {\n  this.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.RECTANGLE);\n};\nhandleShowBlueMarkers = () => {\n  blueMarkers.forEach((item, index) => console.log(`item at index ${index}`));\n};","map":{"version":3,"names":["environment","Loader","map","VietNamCor","lat","lng","flightPlanCoordinates","triangleCoords","VNlocations","loader","apiKey","version","circles","blueMarkers","AppComponent","constructor","http","successMarkers","coordinate","Number","ngOnInit","demo","load","then","_asyncToGenerator","Map","google","maps","importLibrary","document","getElementById","center","zoom","infowindow","InfoWindow","content","markers","item","index","marker","Marker","position","title","addListener","console","log","open","editCheckbox","removeCheckbox","addEventListener","classList","contains","a","remove","setDraggable","add","setMap","drawingManager","drawing","DrawingManager","drawingMode","drawingControl","circleOptions","fillColor","fillOpacity","strokeWeight","clickable","editable","zIndex","i0","ɵɵdirectiveInject","i1","HttpClient","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵelementStart","ɵɵlistener","AppComponent_Template_button_click_2_listener","handleDrawHandClick","ɵɵtext","ɵɵelementEnd","AppComponent_Template_button_click_4_listener","handleDrawMarkerClick","AppComponent_Template_button_click_6_listener","handleDrawCircleClick","AppComponent_Template_button_click_8_listener","handleDrawShapeClick","AppComponent_Template_button_click_10_listener","handleDrawLineClick","AppComponent_Template_button_click_12_listener","handleDrawRectangleClick","AppComponent_Template_button_click_14_listener","handleClearCircleClick","AppComponent_Template_button_click_16_listener","handleShowBlueMarkers","ɵɵelement","setDrawingMode","OverlayType","MARKER","CIRCLE","event","circle","push","circleCenter","getCenter","circleRadius","getRadius","markerPosition","getPosition","geometry","spherical","computeDistanceBetween","setIcon","forEach","length","POLYGON","POLYLINE","RECTANGLE"],"sources":["/home/Workspace/FPT/AngularDemo/src/app/app.component.ts","/home/Workspace/FPT/AngularDemo/src/app/app.component.html"],"sourcesContent":["import { environment } from 'src/environments/environment.development';\nimport { Component, OnInit } from '@angular/core';\nimport { Loader } from '@googlemaps/js-api-loader';\nimport * as _ from 'lodash';\nimport { HttpClient } from '@angular/common/http';\n\nlet map: google.maps.Map;\nconst VietNamCor = { lat: 15.9031, lng: 105.8067 };\nconst flightPlanCoordinates = [\n    { lat: 37.772, lng: -122.214 },\n    { lat: 21.291, lng: -157.821 },\n    { lat: -18.142, lng: 178.431 },\n    { lat: -27.467, lng: 153.027 },\n];\n\nconst triangleCoords = [\n    { lat: 23.393396, lng: 102.14682 },\n    { lat: 22.719568, lng: 105.776716 },\n    { lat: 8.383496, lng: 104.938748 },\n    { lat: 8.383496, lng: 102.14682 },\n];\n\nconst VNlocations = [\n    { lat: 21.0278, lng: 105.8342 }, // Hanoi\n    { lat: 16.0544, lng: 108.2022 }, // Da Nang\n    { lat: 10.8231, lng: 106.6297 }, // Ho Chi Minh City\n    { lat: 12.2388, lng: 109.1967 }, // Nha Trang\n    { lat: 20.8449, lng: 106.6881 }, // Hai Phong\n    { lat: 21.0283, lng: 105.8537 }, // Bac Ninh\n    { lat: 10.9656, lng: 108.107 }, // Vung Tau\n    { lat: 21.4049, lng: 103.2055 }, // Lao Cai\n    { lat: 10.0333, lng: 105.7833 }, // Can Tho\n    { lat: 16.4692, lng: 107.5787 }, // Hue\n    { lat: 13.9833, lng: 108 }, // Quy Nhon\n    { lat: 14.0583, lng: 108.2772 }, // Tuy Hoa\n    { lat: 13.7665, lng: 109.2237 }, // Phan Rang-Thap Cham\n    { lat: 11.9325, lng: 109.1967 }, // Phan Thiet\n    { lat: 10.3833, lng: 105.4167 }, // Rach Gia\n    { lat: 21.5942, lng: 105.8481 }, // Vinh Yen\n    { lat: 20.8172, lng: 106.7244 }, // Ha Long\n    { lat: 20.9544, lng: 107.0806 }, // Thai Nguyen\n    { lat: 21.3281, lng: 103.8733 }, // Yen Bai\n];\n\nlet loader = new Loader({\n    apiKey: environment.apiKey,\n    version: 'weekly',\n});\n\nconst circles: Array<any> = [];\nconst blueMarkers: Array<any> = [];\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnInit {\n    constructor(private http: HttpClient) {}\n\n    result: any;\n    successMarkers: Array<Object> = [];\n    coordinate: Array<Object> = [\n        {\n            lat: Number,\n            lng: Number,\n        },\n    ];\n    drawingManager: any;\n\n    ngOnInit(): void {\n        this.demo();\n    }\n\n    demo() {\n        loader.load().then(async () => {\n            //* initial map element\n            const { Map } = (await google.maps.importLibrary(\n                'maps'\n            )) as google.maps.MapsLibrary;\n            map = new Map(document.getElementById('map') as HTMLElement, {\n                center: VietNamCor,\n                zoom: 8,\n            });\n\n            const infowindow = new google.maps.InfoWindow({\n                content:\n                    '<div><input type=\"checkbox\" id=\"edit\" checked=true>Edit</div>' +\n                    '<div><input type=\"checkbox\" id=\"remove\">Remove</div>',\n            });\n\n            //* create circle instance.\n            // const circle = new google.maps.Circle({\n            //     editable: true,\n            //     strokeColor: '#FF0000',\n            //     strokeOpacity: 0.8,\n            //     strokeWeight: 2,\n            //     fillColor: '#FF0000',\n            //     fillOpacity: 0.35,\n            //     map,\n            //     center: { lat: 16.463713, lng: 107.590866 },\n            //     radius: Math.sqrt(2) * 100000,\n            // });\n\n            //* Create the polygon instance\n            // const polygon = new google.maps.Polygon({\n            //     paths: triangleCoords,\n            //     strokeColor: '#FF0000',\n            //     strokeOpacity: 0.8,\n            //     strokeWeight: 2,\n            //     fillColor: '#FF0000',\n            //     fillOpacity: 0.35,\n            // });\n\n            //* Create marker instance\n            const markers = VNlocations.map(\n                (item: { lat: number; lng: number }, index: number) => {\n                    const marker = new google.maps.Marker({\n                        position: item,\n                        map,\n                        title: `Item index ${index}`,\n                    });\n\n                    marker.addListener('rightclick', () => {\n                        console.log('right event');\n                        infowindow.open(map, marker);\n\n                        infowindow.addListener('domready', () => {\n                            const editCheckbox =\n                                document.getElementById('edit');\n                            const removeCheckbox =\n                                document.getElementById('remove');\n\n                            editCheckbox?.addEventListener('change', () => {\n                                if (\n                                    editCheckbox.classList.contains('dragTrue')\n                                    editCheckbox.a\n                                ) {\n                                    editCheckbox.classList.remove('dragTrue');\n                                    marker.setDraggable(false);\n                                } else {\n                                    editCheckbox.classList.add('dragTrue');\n                                    marker.setDraggable(true);\n\n                                }\n                            });\n\n                            removeCheckbox?.addEventListener('change', () => {\n                                marker.setMap(null);\n                            });\n                        });\n                    });\n                    // const demo1 = circle.getCenter();\n                    // const demo2 = marker.getPosition();\n\n                    // if (demo2 && demo1) {\n                    //     if (\n                    //         google.maps.geometry.spherical.computeDistanceBetween(\n                    //             demo1,\n                    //             demo2\n                    //         ) <= circle.getRadius()\n                    //     ) {\n                    //         marker.setIcon(\n                    //             'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n                    //         );\n                    //     } else {\n                    //         marker.setIcon(\n                    //             'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n                    //         );\n                    //     }\n                    // } else {\n                    //     console.log(`Error before`);\n                    // }\n                }\n            );\n\n            // this.http\n            //     .get('assets/Book1.csv', { responseType: 'text' })\n            //     .subscribe(\n            //         (data: any) => {\n            //             this.result = data.split('\\n');\n\n            //             const markers = this.result.map(\n            //                 (item: any, index: number) => {\n            //                     // this.coordinate.push({\n            //                     //     lat: item.split(',')[0],\n            //                     //     lng: item.split(',')[1],\n            //                     // });\n\n            //                     const marker = new google.maps.Marker({\n            //                         position: {\n            //                             lat: Number(item.split(',')[0]),\n            //                             lng: Number(item.split(',')[1]),\n            //                         },\n            //                         map,\n            //                         title: `Item index ${index}`,\n            //                     });\n\n            //                     return marker;\n            //                 }\n            //             );\n            //         },\n            //         (error: any) => console.log(error.error)\n            //     );\n\n            //* Create polyline instance\n            // const poly = new google.maps.Polyline({\n            //     path: flightPlanCoordinates,\n            //     geodesic: true,\n            //     strokeColor: '#FF0000',\n            //     strokeOpacity: 1.0,\n            //     strokeWeight: 2,\n            // });\n\n            // circle.addListener('bounds_changed', () => {\n            //     VNlocations.map(\n            //         (item: { lat: number; lng: number }, index: number) => {\n            //             const marker = new google.maps.Marker({\n            //                 position: item,\n            //                 map,\n            //                 title: `Item index ${index}`,\n            //             });\n            //             const demo1 = circle.getCenter();\n            //             const demo2 = marker.getPosition();\n\n            //             if (demo2 && demo1) {\n            //                 if (\n            //                     google.maps.geometry.spherical.computeDistanceBetween(\n            //                         demo1,\n            //                         demo2\n            //                     ) <= circle.getRadius()\n            //                 ) {\n            //                     marker.setIcon(\n            //                         'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n            //                     );\n            //                 } else {\n            //                     marker.setIcon(\n            //                         'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n            //                     );\n            //                 }\n            //             } else {\n            //                 console.log(`Error before`);\n            //             }\n            //         }\n            //     );\n            // });\n\n            //! Add click event listener to map instance\n            // map.addListener('click', (e: any) => {\n            //     const lat = e.latLng.lat();\n            //     const lng = e.latLng.lng();\n\n            //     //! check if on water\n            //     detectWater(lat, lng);\n            // });\n\n            //! Add click event listener to marker instance\n            // marker.addListener('click', () => {\n            //     console.log('click event fired');\n            // });\n\n            // poly.setMap(map);\n            // polygon.setMap(map);\n\n            this.drawingManager = new google.maps.drawing.DrawingManager({\n                drawingMode: null,\n                drawingControl: false,\n                circleOptions: {\n                    fillColor: '#ffff00',\n                    fillOpacity: 1,\n                    strokeWeight: 5,\n                    clickable: false,\n                    editable: true,\n                    zIndex: 1,\n                },\n            });\n\n            // google.maps.event.addListener(\n            //     this.drawingManager,\n            //     'circlecomplete',\n            //     function (circle: any) {\n            //         const circleCenter = circle.getCenter();\n            //         const circleRadius = circle.getRadius();\n            //         VNlocations.map(\n            //             (item: { lat: number; lng: number }, index: number) => {\n            //                 const marker = new google.maps.Marker({\n            //                     position: item,\n            //                     map,\n            //                     title: `Item index ${index}`,\n            //                 });\n            //                 const markerPosition = marker.getPosition();\n\n            //                 if (markerPosition && circleCenter) {\n            //                     if (\n            //                         google.maps.geometry.spherical.computeDistanceBetween(\n            //                             circleCenter,\n            //                             markerPosition\n            //                         ) <= circleRadius\n            //                     ) {\n            //                         marker.setIcon(\n            //                             'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n            //                         );\n            //                         blueMarkers.push(marker);\n            //                     } else {\n            //                         marker.setIcon(\n            //                             'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n            //                         );\n            //                     }\n            //                 } else {\n            //                     console.log(`Error before`);\n            //                 }\n            //             }\n            //         );\n            //     }\n            // );\n            this.drawingManager.setMap(map);\n            // const detectWater = async (lat: number, lng: number) => {\n            //     try {\n            //         const url = `https://isitwater-com.p.rapidapi.com/?latitude=${lat}&longitude=${lng}`;\n            //         const options = {\n            //             method: 'GET',\n            //             headers: {\n            //                 'X-RapidAPI-Key':\n            //                     '911f81d9e3msh5f705b8931d758cp13855bjsn19b3ba12960e',\n            //                 'X-RapidAPI-Host': 'isitwater-com.p.rapidapi.com',\n            //             },\n            //         };\n            //         const response = await fetch(url, options);\n            //         const result = await response.json();\n            //         console.log(result);\n            //         if (result.water) {\n            //             return alert('You clicked outside the land!');\n            //         }\n            //         return alert('You clicked inside the land!');\n            //     } catch (error) {\n            //         console.error(error);\n            //     }\n            // };\n        });\n    }\n\n    handleDrawHandClick = () => {\n        this.drawingManager.setDrawingMode(null);\n    };\n\n    handleDrawMarkerClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.MARKER\n        );\n    };\n\n    handleDrawCircleClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.CIRCLE\n        );\n\n        google.maps.event.addListener(\n            this.drawingManager,\n            'circlecomplete',\n            function (circle: any) {\n                circles.push(circle);\n                console.log('big event');\n                circle.addListener('bounds_changed', () => {\n                    const circleCenter = circle.getCenter();\n                    const circleRadius = circle.getRadius();\n                    VNlocations.map(\n                        (item: { lat: number; lng: number }, index: number) => {\n                            const marker = new google.maps.Marker({\n                                position: item,\n                                map,\n                                title: `Item index ${index}`,\n                            });\n                            const markerPosition = marker.getPosition();\n\n                            if (markerPosition && circleCenter) {\n                                if (\n                                    google.maps.geometry.spherical.computeDistanceBetween(\n                                        circleCenter,\n                                        markerPosition\n                                    ) <= circleRadius\n                                ) {\n                                    marker.setIcon(\n                                        'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'\n                                    );\n                                    console.log('success');\n                                    blueMarkers.push(marker);\n                                } else {\n                                    marker.setIcon(\n                                        'http://maps.google.com/mapfiles/ms/icons/red-dot.png'\n                                    );\n                                }\n                            } else {\n                                console.log(`Error before`);\n                            }\n                        }\n                    );\n                });\n            }\n        );\n    };\n\n    handleClearCircleClick = () => {\n        circles.forEach((circle) => {\n            circle.setMap(null);\n        });\n\n        circles.length = 0;\n    };\n\n    handleDrawShapeClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.POLYGON\n        );\n    };\n    handleDrawLineClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.POLYLINE\n        );\n    };\n    handleDrawRectangleClick = () => {\n        this.drawingManager.setDrawingMode(\n            google.maps.drawing.OverlayType.RECTANGLE\n        );\n    };\n\n    handleShowBlueMarkers = () => {\n        blueMarkers.forEach((item, index) =>\n            console.log(`item at index ${index}`)\n        );\n    };\n}\n","<div class=\"ms-4 d-flex gap-3\">\n    <div class=\"d-flex flex-column gap-3\">\n        <button\n            (click)=\"handleDrawHandClick()\"\n            type=\"button\"\n            class=\"btn btn-primary\"\n        >\n            Hand\n        </button>\n        <button\n            (click)=\"handleDrawMarkerClick()\"\n            type=\"button\"\n            class=\"btn btn-secondary\"\n        >\n            Add a Marker\n        </button>\n        <button\n            (click)=\"handleDrawCircleClick()\"\n            type=\"button\"\n            class=\"btn btn-primary\"\n        >\n            Draw a Circle\n        </button>\n        <button\n            (click)=\"handleDrawShapeClick()\"\n            type=\"button\"\n            class=\"btn btn btn-info\"\n        >\n            Draw a Shape\n        </button>\n        <button\n            (click)=\"handleDrawLineClick()\"\n            type=\"button\"\n            class=\"btn btn btn-dark\"\n        >\n            Draw a Line\n        </button>\n        <button\n            (click)=\"handleDrawRectangleClick()\"\n            type=\"button\"\n            class=\"btn btn-dark\"\n        >\n            Draw a Rectangle\n        </button>\n        <button\n            (click)=\"handleClearCircleClick()\"\n            type=\"button\"\n            class=\"btn btn-dark\"\n        >\n            Clear Circle\n        </button>\n        <button\n            (click)=\"handleShowBlueMarkers()\"\n            type=\"button\"\n            class=\"btn btn-dark\"\n        >\n            Show current markers\n        </button>\n    </div>\n    <div id=\"map\"></div>\n</div>\n"],"mappings":"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CA;MACA;MACA;MACA;MACA;IACJ,CAAC,EACJ;IAED;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;IACA;IACA;IACA;IAEA;IACA;IAEA,IAAI,CAACC,cAAc,GAAG,IAAI/B,MAAM,CAACC,IAAI,CAAC+B,OAAO,CAACC,cAAc,CAAC;MACzDC,WAAW,EAAE,IAAI;MACjBC,cAAc,EAAE,KAAK;MACrBC,aAAa,EAAE;QACXC,SAAS,EAAE,SAAS;QACpBC,WAAW,EAAE,CAAC;QACdC,YAAY,EAAE,CAAC;QACfC,SAAS,EAAE,KAAK;QAChBC,QAAQ,EAAE,IAAI;QACdC,MAAM,EAAE;;KAEf,CAAC;IAEF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,CAACX,cAAc,CAACD,MAAM,CAACtD,GAAG,CAAC;IAC/B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ;;;AAzRKY,YAAY,C;mBAAZA,YAAY,EAAAuD,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAZ1D,YAAY,C;QAAZA,YAAY;EAAA2D,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}